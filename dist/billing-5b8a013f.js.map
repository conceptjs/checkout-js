{"version":3,"sources":["webpack://checkout/./src/app/ui/form/CheckboxInput.tsx","webpack://checkout/./src/app/ui/form/RadioInput.tsx","webpack://checkout/./src/app/ui/form/TextArea.tsx","webpack://checkout/./src/app/ui/form/CheckboxFormField.tsx","webpack://checkout/./src/app/shipping/getShippableItemsCount.ts","webpack://checkout/./src/app/formFields/mapCustomFormFieldsFromFormValues.ts","webpack://checkout/./src/app/ui/dropdown/DropdownTrigger.tsx","webpack://checkout/./src/app/locale/withDate.tsx","webpack://checkout/./src/app/address/getAddressFormFieldInputId.ts","webpack://checkout/./src/app/address/googleAutocomplete/AddressSelector.ts","webpack://checkout/./src/app/address/googleAutocomplete/AddressSelectorUk.ts","webpack://checkout/./src/app/address/googleAutocomplete/AddressSelectorFactory.ts","webpack://checkout/./src/app/ui/popover/Popover.tsx","webpack://checkout/./src/app/ui/popover/PopoverList.tsx","webpack://checkout/./src/app/address/googleAutocomplete/getGoogleAutocompleteScriptLoader.ts","webpack://checkout/./src/app/ui/autocomplete/Autocomplete.tsx","webpack://checkout/./src/app/address/googleAutocomplete/GoogleAutocompleteScriptLoader.ts","webpack://checkout/./src/app/address/googleAutocomplete/GoogleAutocompleteService.ts","webpack://checkout/./src/app/address/googleAutocomplete/GoogleAutocomplete.tsx","webpack://checkout/./src/app/address/googleAutocomplete/GoogleAutocompleteFormField.tsx","webpack://checkout/./src/app/address/AddressForm.tsx","webpack://checkout/./src/app/address/googleAutocomplete/mapToAddress.ts","webpack://checkout/./src/app/ui/form/DynamicInput.tsx","webpack://checkout/./src/app/ui/form/MultiCheckboxControl.tsx","webpack://checkout/./src/app/ui/form/CheckboxGroupFormField.tsx","webpack://checkout/./src/app/ui/form/DynamicFormField.tsx","webpack://checkout/./src/app/address/mapAddressFromFormValues.ts","webpack://checkout/./src/app/payment/getPreselectedPayment.ts","webpack://checkout/./src/app/coldChainCheckout/components/AddressFilterInput.tsx","webpack://checkout/./src/app/address/AddressSelect.tsx","webpack://checkout/./src/app/billing/getBillingMethodId.ts","webpack://checkout/./src/app/orderComments/OrderComments.tsx","webpack://checkout/./src/app/billing/BillingForm.tsx","webpack://checkout/./src/app/billing/Billing.tsx"],"names":["CheckboxInput","ref","additionalClassName","label","id","rest","className","type","htmlFor","RadioInput","value","checked","TextArea","testId","disabled","labelContent","onChange","name","renderField","field","render","getShippableItemsCount","cart","lineItems","physicalItems","filter","item","addedByPromotion","mapCustomFormFieldsFromFormValues","customFieldsObject","customFields","key","fieldValue","padMonth","getMonth","toString","padDay","getDate","getFullYear","push","fieldId","state","shouldShow","handleClick","event","handleClose","nativeEvent","handleOpen","setState","document","addEventListener","removeEventListener","componentWillUnmount","this","props","children","placement","dropdown","onClick","modifiers","hide","enabled","flip","preventOverflow","style","width","zIndex","defaultProps","withDate","displayNamePrefix","pickProps","ADDRESS_FIELD_IDS","address1","address2","postalCode","stateOrProvince","stateOrProvinceCode","getAddressFormFieldLegacyName","getAddressFormFieldInputId","googlePlace","address_components","_name","_address","getState","_get","getStreet","getStreet2","getCity","getCountry","getPostCode","access","element","find","types","indexOf","create","autocompleteData","addressSelector","getItemClassName","highlightedIndex","index","classes","join","instance","getItemProps","menuProps","items","length","map","content","stateReducer","changes","stateChangeTypes","blurInput","blurButton","mouseUp","touchEnd","inputValue","changeInput","isOpen","keyDownEnter","handleStateChange","onToggleOpen","undefined","inputProps","initialValue","initialHighlightedIndex","onSelect","listTestId","defaultHighlightedIndex","initialInputValue","itemToString","labelId","onStateChange","getInputProps","getMenuProps","toPopoverItem","highlightItem","highlightedSlices","lastIndex","reduce","node","slice","i","offset","notHighlightedLength","substr","_scriptLoader","loadMapsSdk","apiKey","_googleAutoComplete","Promise","resolve","reject","params","window","autocompleteWindow","Boolean","google","maps","places","isAutocompleteWindow","loadScript","catch","e","_apiKey","getAutocompleteService","_autocompletePromise","then","googleMapsSdk","AutocompleteService","Error","getPlacesServices","createElement","_placesPromise","PlacesService","fields","nextElement","googleAutocompleteService","service","getDetails","placeId","result","focus","input","isAutocompleteEnabled","resetAutocomplete","setAutocomplete","setItems","autoComplete","componentRestrictions","getPlacePredictions","results","toAutocompleteItems","description","structured_formatting","main_text","matched_substrings","place_id","placeholder","countryCode","supportedCountries","parentFieldName","fieldName","TranslatedString","getAddressFormFieldLabelId","renderInput","country","FormField","Label","LABEL","city","company","firstName","lastName","phone","AUTOCOMPLETE","PLACEHOLDER","AUTOCOMPLETE_FIELD_NAME","containerRef","handleDynamicFormFieldChange","syncNonFormikValue","handleAutocompleteChange","handleAutocompleteSelect","place","autocompleteValue","countries","setFieldValue","address","accessor","c","code","street2","stateName","states","subdivisions","mapToAddress","formFields","dateFormFieldNames","custom","fieldType","DynamicFormFieldType","date","componentDidMount","current","querySelector","language","countriesWithAutocomplete","googleMapsApiKey","onAutocompleteToggle","shouldShowSaveAddress","Fieldset","addressFieldName","translatedPlaceholderId","DynamicFormField","autocomplete","extraClass","inputId","default","translate","CheckboxFormField","withLanguage","options","inputFormat","handleDateChange","dateValue","target","optionValue","radio","checkbox","Array","isArray","includes","calendarClassName","dateFormat","maxDate","max","Date","minDate","min","placeholderText","toUpperCase","popperClassName","selected","multiline","TextInput","password","onSelectedAll","onSelectedNone","handleSelectAllClick","preventDefault","handleSelectNoneClick","href","MultiCheckboxFormField","form","values","errors","remove","handleSelectAll","checkedValues","forEach","val","handleSelectNone","handleInputChange","FormFieldContainer","hasError","FormFieldError","renderProps","secret","fieldLabel","required","maxLength","fieldInputId","labelComponent","dynamicFormFieldType","number","text","helperLabel","rows","mapAddressFromFormValues","formValues","shouldSaveAddress","getPreselectedPayment","checkout","payments","payment","providerId","onclick","stopPropagation","addrBase","shippingAddressMethod","CCShippingMethod","getValue","OTSAddress","CCOTSAddress","JSON","parse","handleShippingAddressMethodChange","setValue","console","log","handleSelectAddress","newAddress","onSelectAddress","selectedAddress","isEqualAddress","handleUseNewAddress","onUseNewAddress","handleFieldValueChange","stringify","addresses","allowOTS","CCAllowOTS","isOTSAddress","role","DropdownTrigger","AddressSelectMenu","AddressSelectButton","Form","disPlayAddress","setDisPlayAddress","q","trim","toLocaleLowerCase","addressesFilterHandler","StaticAddress","getBillingMethodId","preselectedPayment","renderLabel","hidden","legend","Legend","isResettingAddress","addressFormRef","updateAddress","onUnhandledError","billingAddress","customer","getFields","isUpdating","shouldShowOrderComments","shouldRenderStaticAddress","allFormFields","customFormFields","hasAddresses","StaticBillingAddress","LoadingOverlay","isLoading","AddressSelect","Button","variant","Primary","handleSubmit","onSubmit","mapPropsToValues","customerMessage","mapAddressToFormValues","orderComment","isInitialValid","getAddressFormFieldsValidationSchema","isValidSync","validationSchema","getCustomFormFieldsValidationSchema","enableReinitialize","addressValues","updateCheckout","navigateNextStep","promises","all","CCAddresses","billAddresses","initialize","onReady","isInitializing","unmountContentWhenLoading","withCheckout","checkoutService","checkoutState","getCheckout","getConfig","getCart","getCustomer","getBillingAddress","getBillingAddressFields","getBillingCountries","isLoadingBillingCountries","isUpdatingBillingAddress","isUpdatingCheckout","config","checkoutSettings","enableOrderComments","loadBillingAddressFields","methodId","updateBillingAddress"],"mappings":"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","file":"billing-5b8a013f.js","sourcesContent":["import classNames from 'classnames';\nimport React, { forwardRef, ReactNode, Ref } from 'react';\n\nimport Input, { InputProps } from './Input';\nimport Label from './Label';\n\nexport interface CheckboxInputProps extends InputProps {\n    additionalClassName?: string;\n    label: ReactNode;\n    value: string;\n    checked: boolean;\n}\n\nconst CheckboxInput = forwardRef((\n    {\n        additionalClassName,\n        label,\n        id,\n        ...rest\n    }: CheckboxInputProps,\n    ref: Ref<HTMLInputElement>\n) => (\n    <>\n        <Input\n            { ...rest }\n            className={ classNames(\n                'form-checkbox',\n                'optimizedCheckout-form-checkbox',\n                additionalClassName\n            ) }\n            id={ id }\n            ref={ ref }\n            type=\"checkbox\"\n        />\n        <Label htmlFor={ id }>\n            { label }\n        </Label>\n    </>\n));\n\nexport default CheckboxInput;\n","import classNames from 'classnames';\nimport React, { forwardRef, ReactNode, Ref } from 'react';\n\nimport Input, { InputProps } from './Input';\nimport Label from './Label';\n\nexport interface RadioInputProps extends InputProps {\n    additionalClassName?: string;\n    label: ReactNode;\n    value: string;\n    checked: boolean;\n}\n\nconst RadioInput = forwardRef((\n    {\n        additionalClassName,\n        label,\n        value,\n        checked,\n        id,\n        ...rest\n    }: RadioInputProps,\n    ref: Ref<HTMLInputElement>\n) => (\n    <>\n        <Input\n            { ...rest }\n            checked={ checked }\n            className={ classNames(\n                'form-radio',\n                'optimizedCheckout-form-radio',\n                additionalClassName\n            ) }\n            id={ id }\n            ref={ ref }\n            type=\"radio\"\n            value={ value }\n        />\n        <Label htmlFor={ id }>\n            { label }\n        </Label>\n    </>\n));\n\nexport default RadioInput;\n","import classNames from 'classnames';\nimport React, { forwardRef, Ref, TextareaHTMLAttributes } from 'react';\n\nexport interface TextAreaProps extends TextareaHTMLAttributes<HTMLTextAreaElement> {\n    additionalClassName?: string;\n    testId?: string;\n}\n\nconst TextArea = forwardRef((\n    { additionalClassName, testId, className, ...rest }: TextAreaProps,\n    ref: Ref<HTMLTextAreaElement>\n) => (\n    <textarea\n        { ...rest }\n        className={ className || classNames(\n            'form-input',\n            'optimizedCheckout-form-input',\n            additionalClassName\n        ) }\n        data-test={ testId }\n        ref={ ref }\n    />\n));\n\nexport default TextArea;\n","import { FieldProps } from 'formik';\nimport { kebabCase } from 'lodash';\nimport React, { memo, useCallback, Fragment, FunctionComponent, ReactNode } from 'react';\n\nimport BasicFormField from './BasicFormField';\nimport CheckboxInput from './CheckboxInput';\nimport FormFieldError from './FormFieldError';\n\nexport interface CheckboxFormFieldProps {\n    additionalClassName?: string;\n    disabled?: boolean;\n    name: string;\n    id?: string;\n    labelContent: ReactNode;\n    onChange?(isChecked: boolean): void;\n}\n\nconst CheckboxFormField: FunctionComponent<CheckboxFormFieldProps> = ({\n    additionalClassName,\n    disabled = false,\n    labelContent,\n    onChange,\n    name,\n    id,\n}) => {\n    const renderField = useCallback(({ field }: FieldProps) => (\n        <Fragment>\n            { <CheckboxInput\n                { ...field }\n                checked={ !!field.value }\n                disabled={ disabled }\n                id={ id || field.name }\n                label={ labelContent }\n            /> }\n\n            <FormFieldError\n                name={ name }\n                testId={ `${kebabCase(name)}-field-error-message` }\n            />\n        </Fragment>\n    ), [\n        disabled,\n        id,\n        labelContent,\n        name,\n    ]);\n\n    return <BasicFormField\n        additionalClassName={ additionalClassName }\n        name={ name }\n        onChange={ onChange }\n        render={ renderField }\n    />;\n};\n\nexport default memo(CheckboxFormField);\n","import { Cart } from '@bigcommerce/checkout-sdk';\n\nimport getLineItemsCount from './getLineItemsCount';\n\nexport default function getShippableItemsCount(cart: Cart): number {\n    return getLineItemsCount(cart.lineItems.physicalItems.filter(item => !item.addedByPromotion));\n}\n","import { forIn, isDate, padStart } from 'lodash';\n\nexport default function mapCustomFormFieldsFromFormValues(\n    customFieldsObject: { [id: string]: any }\n): Array<{fieldId: string; fieldValue: string}> {\n    const customFields: Array<{fieldId: string; fieldValue: string}> = [];\n    forIn(customFieldsObject, (value, key) => {\n        let fieldValue: string;\n\n        if (isDate(value)) {\n            const padMonth = padStart((value.getMonth() + 1).toString(), 2, '0');\n            const padDay = padStart((value.getDate()).toString(), 2, '0');\n            fieldValue = `${value.getFullYear()}-${padMonth}-${padDay}`;\n        } else {\n            fieldValue = value;\n        }\n\n        customFields.push({\n            fieldId: key,\n            fieldValue,\n        });\n    });\n\n    return customFields;\n}\n","import { Placement } from 'popper.js';\nimport React, { Component, MouseEventHandler, ReactNode } from 'react';\nimport { Manager, Popper, Reference } from 'react-popper';\n\nexport interface DropdownTriggerProps {\n    placement?: Placement;\n    dropdown: ReactNode;\n}\n\nexport interface DropdownTriggerState {\n    shouldShow: boolean;\n}\n\nexport default class DropdownTrigger extends Component<DropdownTriggerProps, DropdownTriggerState> {\n    static defaultProps = {\n        placement: 'bottom-start',\n    };\n\n    state: Readonly<DropdownTriggerState> = {\n        shouldShow: false,\n    };\n\n    componentWillUnmount(): void {\n        document.removeEventListener('click', this.handleClose);\n    }\n\n    render() {\n        const { children, placement, dropdown } = this.props;\n        const { shouldShow } = this.state;\n\n        return (\n            <Manager>\n                <Reference>\n                    { ({ ref }) => (\n                        <div\n                            className=\"dropdownTrigger\"\n                            onClick={ this.handleClick }\n                            ref={ ref }\n                        >\n                            { children }\n                        </div>\n                    ) }\n                </Reference>\n\n                <Popper\n                    modifiers={ {\n                        hide: { enabled: false },\n                        flip: { enabled: false },\n                        preventOverflow: { enabled: false },\n                    } }\n                    placement={ placement }\n                >\n                    { ({ ref, style }) => !shouldShow ? null : (\n                        <div\n                            className=\"dropdownMenu\"\n                            ref={ ref }\n                            style={ {\n                                ...style,\n                                width: '100%',\n                                zIndex: 1,\n                            } }\n                        >\n                            { dropdown }\n                        </div>\n                    ) }\n                </Popper>\n            </Manager>\n        );\n    }\n\n    private handleClick: MouseEventHandler<HTMLElement> = event => {\n        const { shouldShow } = this.state;\n\n        if (shouldShow) {\n            this.handleClose(event.nativeEvent);\n        } else {\n            this.handleOpen(event.nativeEvent);\n        }\n    };\n\n    private handleOpen: (event: MouseEvent) => void = () => {\n        const { shouldShow } = this.state;\n\n        if (shouldShow) {\n            return;\n        }\n\n        this.setState({ shouldShow: true }, () => {\n            document.addEventListener('click', this.handleClose);\n        });\n    };\n\n    private handleClose: (event: MouseEvent) => void = () => {\n        const { shouldShow } = this.state;\n\n        if (!shouldShow) {\n            return;\n        }\n\n        this.setState({ shouldShow: false }, () => {\n            document.removeEventListener('click', this.handleClose);\n        });\n    };\n}\n","import { createInjectHoc, InjectHoc } from '../common/hoc';\n\nimport LocaleContext from './LocaleContext';\n\nexport interface WithDateProps {\n    date: {\n        inputFormat: string;\n    };\n}\n\nconst withDate: InjectHoc<WithDateProps> = createInjectHoc(LocaleContext, {\n    displayNamePrefix: 'withDate',\n    pickProps: (value, key) => key === 'date' && !!value,\n});\n\nexport default withDate;\n","import { AddressKeyMap } from './address';\n\nexport const ADDRESS_FIELD_IDS: AddressKeyMap = {\n    address1: 'addressLine1',\n    address2: 'addressLine2',\n    postalCode: 'postCode',\n    stateOrProvince: 'province',\n    stateOrProvinceCode: 'provinceCode',\n};\n\nexport function getAddressFormFieldLegacyName(name: string): string {\n    return `${ADDRESS_FIELD_IDS[name] || name}`;\n}\n\nexport function getAddressFormFieldInputId(name: string): string {\n    return `${getAddressFormFieldLegacyName(name)}Input`;\n}\nexport function getAddressFormFieldLabelId(name: string): string {\n    return `${getAddressFormFieldLegacyName(name)}Label`;\n}\n","import { GoogleAddressFieldType } from './googleAutocompleteTypes';\n\nexport default class AddressSelector {\n    protected _address: google.maps.GeocoderAddressComponent[] | undefined;\n    protected _name: string;\n\n    constructor(\n        googlePlace: google.maps.places.PlaceResult\n    ) {\n        const { address_components, name } = googlePlace;\n\n        this._name = name;\n        this._address = address_components;\n    }\n\n    getState(): string {\n        return this._get('administrative_area_level_1', 'short_name');\n    }\n\n    getStreet(): string {\n        return this._name;\n    }\n\n    getStreet2(): string {\n        return '';\n    }\n\n    getCity(): string {\n        return this._get('postal_town', 'long_name') ||\n            this._get('locality', 'long_name') ||\n            this._get('neighborhood', 'short_name');\n    }\n\n    getCountry(): string {\n        return this._get('country', 'short_name');\n    }\n\n    getPostCode(): string {\n        return this._get('postal_code', 'short_name');\n    }\n\n    protected _get(\n        type: GoogleAddressFieldType,\n        access: Exclude<keyof google.maps.GeocoderAddressComponent, 'types'>\n    ): string {\n        const element = this._address && this._address.find(field => field.types.indexOf(type) !== -1);\n\n        if (element) {\n            return element[access];\n        }\n\n        return '';\n    }\n}\n","import AddressSelector from './AddressSelector';\n\nexport default class AddressSelectorUK extends AddressSelector {\n    getState(): string {\n        return this._get('administrative_area_level_2', 'long_name');\n    }\n\n    getStreet2(): string {\n        return this._get('locality', 'long_name');\n    }\n}\n","import AddressSelector from './AddressSelector';\nimport AddressSelectorUK from './AddressSelectorUk';\n\nexport default class AddressSelectorFactory {\n    static create(autocompleteData: google.maps.places.PlaceResult): AddressSelector {\n        const addressSelector = new AddressSelector(autocompleteData);\n\n        switch (addressSelector.getCountry()) {\n        case 'GB':\n            return new AddressSelectorUK(autocompleteData);\n        }\n\n        return addressSelector;\n    }\n}\n","import React, { FunctionComponent } from 'react';\n\nimport './Popover.scss';\n\nexport interface PopoverProps {\n    children: React.ReactNode;\n}\n\nconst Popover: FunctionComponent<PopoverProps> = ({ children }) => {\n    return (\n        <div className=\"popover\">\n            { children }\n        </div>\n    );\n};\n\nexport default Popover;\n","import React, { memo, FunctionComponent } from 'react';\n\nimport './PopoverList.scss';\n\nexport interface PopoverListProps {\n    menuProps?: any;\n    highlightedIndex?: number;\n    getItemProps?: any;\n    items: PopoverListItem[];\n    testId?: string;\n}\n\nexport interface PopoverListItem {\n    id: string;\n    content: React.ReactChild[] | React.ReactChild;\n}\n\nconst PopoverList: FunctionComponent<PopoverListProps> = ({\n    highlightedIndex = -1,\n    testId,\n    getItemProps = (props: any) => props,\n    menuProps = {},\n    items,\n}) => {\n    if (!items || !items.length) {\n        return null;\n    }\n\n    return (\n        <ul\n            className=\"popoverList\"\n            data-test={ testId } { ...menuProps }\n        >\n            { items\n                .map((item, index) => (\n                    <li\n                        className={ getItemClassName(highlightedIndex, index) }\n                        data-test={ testId && `${testId}-item` }\n                        { ...getItemProps({\n                            key: item.id,\n                            index,\n                            item,\n                        }) }\n                        key={ index }\n                    >\n                        { item.content }\n                    </li>\n                )) }\n        </ul>\n    );\n};\n\nfunction getItemClassName(highlightedIndex: number, index: number): string {\n    const classes = ['popoverList-item'];\n\n    if (highlightedIndex === index) {\n        classes.push('is-active');\n    }\n\n    return classes.join(' ');\n}\n\nexport default memo(PopoverList);\n","import GoogleAutocompleteScriptLoader from './GoogleAutocompleteScriptLoader';\n\nlet instance: GoogleAutocompleteScriptLoader;\n\nexport default function getGoogleAutocompleteScriptLoader(): GoogleAutocompleteScriptLoader {\n    if (!instance) {\n        instance = new GoogleAutocompleteScriptLoader();\n    }\n\n    return instance;\n}\n","import Downshift, { DownshiftState, StateChangeOptions } from 'downshift';\nimport { isNumber, noop } from 'lodash';\nimport React, { Fragment, PureComponent, ReactChild, ReactNode } from 'react';\n\nimport { Popover, PopoverList, PopoverListItem } from '../popover';\n\nimport AutocompleteItem from './autocomplete-item';\n\nexport interface AutocompleteProps {\n    initialValue?: string;\n    initialHighlightedIndex?: number;\n    children?: ReactNode;\n    items: AutocompleteItem[];\n    inputProps?: any;\n    listTestId?: string;\n    onToggleOpen?(state: { inputValue: string; isOpen: boolean }): void;\n    onSelect?(item: AutocompleteItem): void;\n    onChange?(value: string, isOpen: boolean): void;\n}\n\nclass Autocomplete extends PureComponent<AutocompleteProps> {\n    render(): ReactNode {\n        const {\n            inputProps,\n            initialValue,\n            initialHighlightedIndex,\n            items,\n            children,\n            onSelect,\n            listTestId,\n        } = this.props;\n\n        return (\n            <Downshift\n                defaultHighlightedIndex={ 0 }\n                initialHighlightedIndex={ initialHighlightedIndex }\n                initialInputValue={ initialValue }\n                itemToString={ this.itemToString }\n                labelId={ inputProps && inputProps['aria-labelledby'] ? inputProps['aria-labelledby'] : null }\n                onChange={ onSelect }\n                onStateChange={ this.handleStateChange }\n                stateReducer={ this.stateReducer }\n            >\n                { ({\n                    isOpen,\n                    getInputProps,\n                    getMenuProps,\n                    getItemProps,\n                    highlightedIndex,\n                }) => (\n                    <div>\n                        <input\n                            { ...getInputProps() }\n                            { ...inputProps }\n                        />\n                        { isOpen && !!items.length &&\n                            <Popover>\n                                <PopoverList\n                                    getItemProps={ getItemProps }\n                                    highlightedIndex={ isNumber(highlightedIndex) ? highlightedIndex : -1 }\n                                    items={ items.map(item => this.toPopoverItem(item)) }\n                                    menuProps={ getMenuProps() }\n                                    testId={ listTestId }\n                                />\n                                { children }\n                            </Popover> }\n                    </div>\n                ) }\n            </Downshift>\n        );\n    }\n\n    private toPopoverItem(item: AutocompleteItem): PopoverListItem {\n        return {\n            ...item,\n            content: this.highlightItem(item),\n        };\n    }\n\n    private highlightItem(item: AutocompleteItem): ReactChild[] | ReactChild {\n        if (!item.highlightedSlices || !item.highlightedSlices.length) {\n            return item.label;\n        }\n\n        let lastIndex: number = 0;\n        let key = 0;\n\n        return item.highlightedSlices.reduce((node, slice, i) => {\n            const { label } = item;\n            const { offset, length } = slice;\n            const notHighlightedLength = offset - lastIndex;\n\n            if (notHighlightedLength) {\n                node.push(<Fragment key={ key }>\n                    { label.substr(lastIndex, notHighlightedLength) }\n                </Fragment>);\n                key += 1;\n            }\n\n            lastIndex  = offset + length;\n\n            node.push(<strong key={ key }>{ label.substr(offset, length) }</strong>);\n            key += 1;\n\n            if (i === (item.highlightedSlices || []).length - 1) {\n                node.push(<Fragment key={ key }>\n                    { label.substr(lastIndex) }\n                </Fragment>);\n                key += 1;\n            }\n\n            return node;\n        }, [] as ReactChild[]);\n    }\n\n    private itemToString(item?: AutocompleteItem): string {\n        return item && item.value || '';\n    }\n\n    private stateReducer: (\n        state: DownshiftState<AutocompleteItem>,\n        changes: StateChangeOptions<AutocompleteItem>\n    ) => Partial<StateChangeOptions<AutocompleteItem>> = (state, changes) => {\n        const { onChange } = this.props;\n\n        switch (changes.type) {\n        case Downshift.stateChangeTypes.blurInput:\n        case Downshift.stateChangeTypes.blurButton:\n        case Downshift.stateChangeTypes.mouseUp:\n        case Downshift.stateChangeTypes.touchEnd:\n            return {\n                ...changes,\n                inputValue: state.inputValue,\n            };\n\n        case Downshift.stateChangeTypes.changeInput:\n            if (changes.inputValue !== state.inputValue && onChange) {\n                onChange(changes.inputValue || '', state.isOpen);\n            }\n\n            return changes;\n\n        case Downshift.stateChangeTypes.keyDownEnter:\n            return changes;\n\n        default:\n            return changes;\n        }\n        };\n\n    private handleStateChange = ({ isOpen, inputValue }: StateChangeOptions<string>) => {\n        const { onToggleOpen = noop } = this.props;\n\n        if (isOpen !== undefined) {\n            onToggleOpen({ isOpen, inputValue: inputValue || '' });\n        }\n    };\n}\n\nexport default Autocomplete;\n","import { getScriptLoader, ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { GoogleAutocompleteWindow, GoogleMapsSdk } from './googleAutocompleteTypes';\n\nexport default class GoogleAutocompleteScriptLoader {\n    private _scriptLoader: ScriptLoader;\n    private _googleAutoComplete?: Promise<GoogleMapsSdk>;\n\n    constructor() {\n        this._scriptLoader = getScriptLoader();\n    }\n\n    loadMapsSdk(apiKey: string): Promise<GoogleMapsSdk> {\n        if (this._googleAutoComplete) {\n            return this._googleAutoComplete;\n        }\n\n        this._googleAutoComplete = new Promise((resolve, reject) => {\n            const callbackName = 'initAutoComplete';\n            const params = [\n                'language=en',\n                `key=${apiKey}`,\n                'libraries=places',\n                `callback=${callbackName}`,\n            ].join('&');\n\n            (window as GoogleCallbackWindow)[callbackName] = () => {\n                if (isAutocompleteWindow(window)) {\n                    resolve(window.google.maps);\n                }\n\n                reject();\n            };\n\n            this._scriptLoader.loadScript(`//maps.googleapis.com/maps/api/js?${params}`)\n                .catch(e => {\n                    this._googleAutoComplete = undefined;\n                    throw e;\n                });\n        });\n\n        return this._googleAutoComplete;\n    }\n}\n\nfunction isAutocompleteWindow(window: Window): window is GoogleAutocompleteWindow {\n    const autocompleteWindow = window as GoogleAutocompleteWindow;\n\n    return Boolean(autocompleteWindow.google &&\n        autocompleteWindow.google.maps &&\n        autocompleteWindow.google.maps.places);\n}\n\nexport interface GoogleCallbackWindow extends Window {\n    initAutoComplete?(): void;\n}\n","import getGoogleAutocompleteScriptLoader from './getGoogleAutocompleteScriptLoader';\nimport GoogleAutocompleteScriptLoader from './GoogleAutocompleteScriptLoader';\n\nexport default class GoogleAutocompleteService {\n    private _autocompletePromise?: Promise<google.maps.places.AutocompleteService>;\n    private _placesPromise?: Promise<google.maps.places.PlacesService>;\n\n    constructor(\n        private _apiKey: string,\n        private _scriptLoader: GoogleAutocompleteScriptLoader = getGoogleAutocompleteScriptLoader()\n    ) {}\n\n    getAutocompleteService(): Promise<google.maps.places.AutocompleteService> {\n        if (!this._autocompletePromise) {\n            this._autocompletePromise = this._scriptLoader.loadMapsSdk(this._apiKey)\n                .then(googleMapsSdk => {\n                    if (!googleMapsSdk.places.AutocompleteService) {\n                        throw new Error('`AutocompleteService` is undefined');\n                    }\n\n                    return new googleMapsSdk.places.AutocompleteService();\n                });\n        }\n\n        return this._autocompletePromise;\n    }\n\n    getPlacesServices(): Promise<google.maps.places.PlacesService> {\n        const node = document.createElement('div');\n\n        if (!this._placesPromise) {\n            this._placesPromise = this._scriptLoader.loadMapsSdk(this._apiKey)\n                .then(googleMapsSdk => {\n                    if (!googleMapsSdk.places.PlacesService) {\n                        throw new Error('`PlacesService` is undefined');\n                    }\n\n                    return new googleMapsSdk.places.PlacesService(node);\n                });\n        }\n\n        return this._placesPromise;\n    }\n}\n","import { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { Autocomplete, AutocompleteItem } from '../../ui/autocomplete';\n\nimport { GoogleAutocompleteOptionTypes } from './googleAutocompleteTypes';\nimport './GoogleAutocomplete.scss';\nimport GoogleAutocompleteService from './GoogleAutocompleteService';\n\ninterface GoogleAutocompleteProps {\n    initialValue?: string;\n    componentRestrictions?: google.maps.places.ComponentRestrictions;\n    fields?: string[];\n    apiKey: string;\n    nextElement?: HTMLElement;\n    inputProps?: any;\n    isAutocompleteEnabled?: boolean;\n    types?: GoogleAutocompleteOptionTypes[];\n    onSelect?(place: google.maps.places.PlaceResult, item: AutocompleteItem): void;\n    onToggleOpen?(state: { inputValue: string; isOpen: boolean }): void;\n    onChange?(value: string, isOpen: boolean): void;\n}\n\ninterface GoogleAutocompleteState {\n    items: AutocompleteItem[];\n    autoComplete: string;\n}\n\nclass GoogleAutocomplete extends PureComponent<GoogleAutocompleteProps, GoogleAutocompleteState> {\n    googleAutocompleteService: GoogleAutocompleteService;\n\n    constructor(props: GoogleAutocompleteProps) {\n        super(props);\n        this.googleAutocompleteService = new GoogleAutocompleteService(props.apiKey);\n        this.state = {\n            items: [],\n            autoComplete: 'off',\n        };\n    }\n\n    render(): ReactNode {\n        const {\n            initialValue,\n            onToggleOpen = noop,\n            inputProps = {},\n        } = this.props;\n\n        const {\n            autoComplete,\n            items,\n        } = this.state;\n\n        return (\n            <Autocomplete\n                initialHighlightedIndex={ 0 }\n                initialValue={ initialValue }\n                inputProps={ {\n                    ...inputProps,\n                    autoComplete,\n                } }\n                items={ items }\n                listTestId=\"address-autocomplete-suggestions\"\n                onChange={ this.onChange }\n                onSelect={ this.onSelect }\n                onToggleOpen={ onToggleOpen }\n            >\n                <div className=\"co-googleAutocomplete-footer\" />\n            </Autocomplete>\n        );\n    }\n\n    private onSelect: (item: AutocompleteItem) => void = item => {\n        const {\n            fields,\n            onSelect = noop,\n            nextElement,\n        } = this.props;\n\n        this.googleAutocompleteService.getPlacesServices().then(service => {\n            service.getDetails({\n                placeId: item.id,\n                fields: fields || ['address_components', 'name'],\n            }, result => {\n                if (nextElement) {\n                    nextElement.focus();\n                }\n\n                onSelect(result, item);\n            });\n        });\n    };\n\n    private onChange: (input: string) => void = input => {\n        const {\n            isAutocompleteEnabled,\n            onChange = noop,\n        } = this.props;\n\n        onChange(input, false);\n\n        if (!isAutocompleteEnabled) {\n            return this.resetAutocomplete();\n        }\n\n        this.setAutocomplete(input);\n        this.setItems(input);\n    };\n\n    private setItems(input: string): void {\n        if (!input) {\n            this.setState({ items: [] });\n\n            return;\n        }\n\n        const {\n            componentRestrictions,\n            types,\n        } = this.props;\n\n        this.googleAutocompleteService.getAutocompleteService().then(service => {\n            service.getPlacePredictions({\n                input,\n                types: types || ['geocode'],\n                componentRestrictions,\n            }, results =>\n                this.setState({ items: this.toAutocompleteItems(results) })\n            );\n        });\n    }\n\n    private resetAutocomplete(): void {\n        this.setState({\n            items: [],\n            autoComplete: 'off',\n        });\n    }\n\n    private setAutocomplete(input: string): void {\n        this.setState({\n            ...this.state,\n            autoComplete: input && input.length ? 'nope' : 'off',\n        });\n    }\n\n    private toAutocompleteItems(results?: google.maps.places.AutocompletePrediction[]): AutocompleteItem[] {\n        return (results || []).map(result => ({\n            label: result.description,\n            value: result.structured_formatting.main_text,\n            highlightedSlices: result.matched_substrings,\n            id: result.place_id,\n        }));\n    }\n}\n\nexport default GoogleAutocomplete;\n","import { FormField as FormFieldType } from '@bigcommerce/checkout-sdk';\nimport { FieldProps } from 'formik';\nimport React, { memo, useCallback, useMemo, FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../../locale';\nimport { AutocompleteItem } from '../../ui/autocomplete';\nimport { FormField, Label } from '../../ui/form';\nimport { getAddressFormFieldInputId, getAddressFormFieldLabelId } from '../getAddressFormFieldInputId';\n\nimport GoogleAutocomplete from './GoogleAutocomplete';\n\nexport interface GoogleAutocompleteFormFieldProps {\n    apiKey: string;\n    field: FormFieldType;\n    countryCode?: string;\n    supportedCountries: string[];\n    nextElement?: HTMLElement;\n    parentFieldName?: string;\n    onSelect(place: google.maps.places.PlaceResult, item: AutocompleteItem): void;\n    onToggleOpen?(state: { inputValue: string; isOpen: boolean }): void;\n    onChange(value: string, isOpen: boolean): void;\n}\n\nconst GoogleAutocompleteFormField: FunctionComponent<GoogleAutocompleteFormFieldProps>  = ({\n    field: {\n        default: placeholder,\n        name,\n    },\n    countryCode,\n    supportedCountries,\n    parentFieldName,\n    nextElement,\n    apiKey,\n    onSelect,\n    onChange,\n    onToggleOpen,\n}) => {\n    const fieldName = parentFieldName ? `${parentFieldName}.${name}` : name;\n\n    const labelContent = useMemo(() => (\n        <TranslatedString id=\"address.address_line_1_label\" />\n    ), []);\n\n    const labelId = getAddressFormFieldLabelId(name);\n\n    const inputProps = useMemo(() => ({\n        className: 'form-input optimizedCheckout-form-input',\n        id: getAddressFormFieldInputId(name),\n        'aria-labelledby': labelId,\n        placeholder,\n    }), [name, labelId, placeholder]);\n\n    const renderInput = useCallback(({ field }: FieldProps) => (\n        <GoogleAutocomplete\n            apiKey={ apiKey }\n            componentRestrictions={ countryCode ?\n                { country: countryCode } :\n                undefined }\n            initialValue={ field.value }\n            inputProps={ inputProps }\n            isAutocompleteEnabled={ countryCode ?\n                supportedCountries.indexOf(countryCode) > -1 :\n                false }\n            nextElement={ nextElement }\n            onChange={ onChange }\n            onSelect={ onSelect }\n            onToggleOpen={ onToggleOpen }\n        />\n    ), [\n        apiKey,\n        countryCode,\n        inputProps,\n        nextElement,\n        onChange,\n        onSelect,\n        onToggleOpen,\n        supportedCountries,\n    ]);\n\n    return (\n        <div className={ `dynamic-form-field dynamic-form-field--addressLineAutocomplete` }>\n            <FormField\n                input={ renderInput }\n                label={ <Label htmlFor={ inputProps.id } id={ labelId }>{ labelContent }</Label> }\n                name={ fieldName }\n            />\n        </div>\n    );\n};\n\nexport default memo(GoogleAutocompleteFormField);\n","import { Address, Country, FormField } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { forIn, noop } from 'lodash';\nimport React, { createRef, Component, ReactNode, RefObject } from 'react';\n\nimport { withLanguage, TranslatedString, WithLanguageProps } from '../locale';\nimport { AutocompleteItem } from '../ui/autocomplete';\nimport { CheckboxFormField, DynamicFormField, DynamicFormFieldType, Fieldset } from '../ui/form';\n\nimport { AddressKeyMap } from './address';\nimport { getAddressFormFieldInputId, getAddressFormFieldLegacyName } from './getAddressFormFieldInputId';\nimport { mapToAddress, GoogleAutocompleteFormField } from './googleAutocomplete';\nimport './AddressForm.scss';\n\nexport interface AddressFormProps {\n    fieldName?: string;\n    countryCode?: string;\n    countriesWithAutocomplete?: string[];\n    countries?: Country[];\n    formFields: FormField[];\n    googleMapsApiKey?: string;\n    shouldShowSaveAddress?: boolean;\n    onAutocompleteSelect?(address: Partial<Address>): void;\n    onAutocompleteToggle?(state: { inputValue: string; isOpen: boolean }): void;\n    onChange?(fieldName: string, value: string | string[]): void;\n    setFieldValue?(fieldName: string, value: string | string[]): void;\n}\n\nconst LABEL: AddressKeyMap = {\n    address1: 'address.address_line_1_label',\n    address2: 'address.address_line_2_label',\n    city: 'address.city_label',\n    company: 'address.company_name_label',\n    countryCode: 'address.country_label',\n    firstName: 'address.first_name_label',\n    lastName: 'address.last_name_label',\n    phone: 'address.phone_number_label',\n    postalCode: 'address.postal_code_label',\n    stateOrProvince: 'address.state_label',\n    stateOrProvinceCode: 'address.state_label',\n};\n\nconst AUTOCOMPLETE: AddressKeyMap = {\n    address1: 'address-line1',\n    address2: 'address-line2',\n    city: 'address-level2',\n    company: 'organization',\n    countryCode: 'country',\n    firstName: 'given-name',\n    lastName: 'family-name',\n    phone: 'tel',\n    postalCode: 'postal-code',\n    stateOrProvince: 'address-level1',\n    stateOrProvinceCode: 'address-level1',\n};\n\nconst PLACEHOLDER: AddressKeyMap = {\n    countryCode: 'address.select_country_action',\n    stateOrProvince: 'address.select_state_action',\n    stateOrProvinceCode: 'address.select_state_action',\n};\n\nconst AUTOCOMPLETE_FIELD_NAME = 'address1';\n\nclass AddressForm extends Component<AddressFormProps & WithLanguageProps> {\n    private containerRef: RefObject<HTMLElement> = createRef();\n    private nextElement?: HTMLElement | null;\n\n    private handleDynamicFormFieldChange: (name: string) => (value: string | string[]) => void = memoize(name => value => {\n        this.syncNonFormikValue(name, value);\n    });\n\n    componentDidMount(): void {\n        const { current } = this.containerRef;\n\n        if (current) {\n            this.nextElement = current.querySelector<HTMLElement>('[autocomplete=\"address-line2\"]');\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            formFields,\n            fieldName,\n            language,\n            countriesWithAutocomplete,\n            countryCode,\n            googleMapsApiKey,\n            onAutocompleteToggle,\n            shouldShowSaveAddress,\n        } = this.props;\n\n        return (<>\n            <Fieldset>\n                <div className=\"checkout-address\" ref={ this.containerRef as RefObject<HTMLDivElement> }>\n                    { formFields.map(field => {\n                        const addressFieldName = field.name;\n                        const translatedPlaceholderId = PLACEHOLDER[addressFieldName];\n\n                        if (addressFieldName === 'address1' && googleMapsApiKey && countriesWithAutocomplete) {\n                            return (\n                                <GoogleAutocompleteFormField\n                                    apiKey={ googleMapsApiKey }\n                                    countryCode={ countryCode }\n                                    field={ field }\n                                    key={ field.id }\n                                    nextElement={ this.nextElement || undefined }\n                                    onChange={ this.handleAutocompleteChange }\n                                    onSelect={ this.handleAutocompleteSelect }\n                                    onToggleOpen={ onAutocompleteToggle }\n                                    parentFieldName={ fieldName }\n                                    supportedCountries={ countriesWithAutocomplete }\n                                />\n                            );\n                        }\n\n                        return (\n                            <DynamicFormField\n                                autocomplete={ AUTOCOMPLETE[field.name] }\n                                extraClass={ `dynamic-form-field--${getAddressFormFieldLegacyName(addressFieldName)}` }\n                                field={ field }\n                                inputId={ getAddressFormFieldInputId(addressFieldName) }\n                                // stateOrProvince can sometimes be a dropdown or input, so relying on id is not sufficient\n                                key={ `${field.id}-${field.name}` }\n                                label={ field.custom ? field.label : <TranslatedString id={ LABEL[field.name] } /> }\n                                onChange={ this.handleDynamicFormFieldChange(addressFieldName) }\n                                parentFieldName={ field.custom ?\n                                    (fieldName ? `${fieldName}.customFields` : 'customFields') :\n                                    fieldName }\n                                placeholder={ field.default ? field.default : translatedPlaceholderId && language.translate(translatedPlaceholderId) }\n                            />\n                        );\n                    }) }\n                </div>\n            </Fieldset>\n            { shouldShowSaveAddress &&\n                <CheckboxFormField\n                    labelContent={ <TranslatedString id=\"address.save_in_addressbook\" /> }\n                    name={ fieldName ? `${fieldName}.shouldSaveAddress` : 'shouldSaveAddress' }\n                /> }\n        </>);\n    }\n\n    private handleAutocompleteChange: (value: string, isOpen: boolean) => void = (value, isOpen) => {\n        if (!isOpen) {\n            this.syncNonFormikValue(AUTOCOMPLETE_FIELD_NAME, value);\n        }\n    };\n\n    private handleAutocompleteSelect: (\n        place: google.maps.places.PlaceResult,\n        item: AutocompleteItem\n    ) => void = (place, { value: autocompleteValue }) => {\n        const {\n            countries,\n            setFieldValue = noop,\n            onChange = noop,\n        } = this.props;\n\n        const address = mapToAddress(place, countries);\n\n        forIn(address, (value, fieldName) => {\n            setFieldValue(fieldName, value as string);\n            onChange(fieldName, value as string);\n        });\n\n        if (autocompleteValue) {\n            this.syncNonFormikValue(AUTOCOMPLETE_FIELD_NAME, autocompleteValue);\n        }\n    };\n\n    // because autocomplete state is controlled by Downshift, we need to manually keep formik\n    // value in sync when autocomplete value changes\n    private syncNonFormikValue: (\n        fieldName: string,\n        value: string | string[]\n    ) => void = (fieldName, value) => {\n        const {\n            formFields,\n            setFieldValue = noop,\n            onChange = noop,\n        } = this.props;\n\n        const dateFormFieldNames = formFields\n            .filter(field => field.custom && field.fieldType === DynamicFormFieldType.date)\n            .map(field => field.name);\n\n        if (fieldName === AUTOCOMPLETE_FIELD_NAME || dateFormFieldNames.indexOf(fieldName) > -1) {\n            setFieldValue(fieldName, value);\n        }\n\n        onChange(fieldName, value);\n    };\n}\n\nexport default withLanguage(AddressForm);\n","import { Address, Country, Region } from '@bigcommerce/checkout-sdk';\n\nimport AddressSelectorFactory from './AddressSelectorFactory';\n\nexport default function mapToAddress(\n    autocompleteData: google.maps.places.PlaceResult,\n    countries: Country[] = []\n): Partial<Address> {\n    if (!autocompleteData || !autocompleteData.address_components) {\n        return {};\n    }\n\n    const accessor = AddressSelectorFactory.create(autocompleteData);\n    const state = accessor.getState();\n    const countryCode = accessor.getCountry();\n    const country = countries && countries.find(c => countryCode === c.code);\n    const street2 = accessor.getStreet2();\n\n    return {\n        address2: street2,\n        city: accessor.getCity(),\n        countryCode,\n        postalCode: accessor.getPostCode(),\n        ...state ? getState(state, country && country.subdivisions) : {},\n    };\n}\n\nfunction getState(\n    stateName: string,\n    states: Region[] = []\n): Partial<Address> {\n    const state = states.find(({ code, name }: Region) =>\n        code === stateName || name === stateName\n    );\n\n    if (!state) {\n        return {\n            stateOrProvince: !states.length ? stateName : '',\n            stateOrProvinceCode: '',\n        };\n    }\n\n    return {\n        stateOrProvince: state.name,\n        stateOrProvinceCode: state.code,\n    };\n}\n","import { FormFieldItem } from '@bigcommerce/checkout-sdk';\nimport { isDate, noop } from 'lodash';\nimport React, { memo, useCallback, FunctionComponent } from 'react';\nimport ReactDatePicker from 'react-datepicker';\n\nimport { withDate, WithDateProps } from '../../locale';\n\nimport CheckboxInput from './CheckboxInput';\nimport DynamicFormFieldType from './DynamicFormFieldType';\nimport { InputProps } from './Input';\nimport RadioInput from './RadioInput';\nimport TextArea from './TextArea';\nimport TextInput from './TextInput';\n\nexport interface DynamicInputProps extends InputProps {\n    id: string;\n    additionalClassName?: string;\n    value?: string | string[];\n    rows?: number;\n    fieldType?: DynamicFormFieldType;\n    options?: FormFieldItem[];\n}\n\nconst DynamicInput: FunctionComponent<DynamicInputProps & WithDateProps> = ({\n    additionalClassName,\n    date,\n    fieldType,\n    id,\n    name,\n    onChange = noop,\n    options,\n    placeholder,\n    value,\n    ...rest\n}) => {\n    const { inputFormat } = date;\n    const handleDateChange = useCallback((dateValue, event) => onChange({\n        ...event,\n        target: {\n            name,\n            value: dateValue,\n        },\n    }), [\n        onChange,\n        name,\n    ]);\n\n    switch (fieldType) {\n    case DynamicFormFieldType.dropdown:\n        return (\n            <select\n                { ...rest as any }\n                className=\"form-select optimizedCheckout-form-select\"\n                data-test={ `${id}-select` }\n                id={ id }\n                name={ name }\n                onChange={ onChange }\n                value={ value === null ? '' : value }\n            >\n                { placeholder &&\n                    <option value=\"\">\n                        { placeholder }\n                    </option> }\n                { options && options.map(({ label, value: optionValue }) =>\n                    <option\n                        key={ optionValue }\n                        value={ optionValue }\n                    >\n                        { label }\n                    </option>\n                ) }\n            </select>\n        );\n\n    case DynamicFormFieldType.radio:\n        if (!options || !options.length) {\n            return null;\n        }\n\n        return <>\n            { options.map(({ label, value: optionValue }) =>\n                <RadioInput\n                    { ...rest }\n                    checked={ optionValue === value }\n                    id={ `${id}-${optionValue}` }\n                    key={ optionValue }\n                    label={ label }\n                    name={ name }\n                    onChange={ onChange }\n                    testId={ `${id}-${optionValue}-radio` }\n                    value={ optionValue }\n                />) }\n        </>;\n\n    case DynamicFormFieldType.checkbox:\n        if (!options || !options.length) {\n            return null;\n        }\n\n        return <>\n            { options.map(({ label, value: optionValue }) =>\n                <CheckboxInput\n                    { ...rest }\n                    checked={ Array.isArray(value) ? value.includes(optionValue) : false }\n                    id={ `${id}-${optionValue}` }\n                    key={ optionValue }\n                    label={ label }\n                    name={ name }\n                    onChange={ onChange }\n                    testId={ `${id}-${optionValue}-checkbox` }\n                    value={ optionValue }\n                />) }\n        </>;\n\n    case DynamicFormFieldType.date:\n        return (\n            <ReactDatePicker\n                { ...rest as any }\n                autoComplete=\"off\"\n                // FIXME: we can avoid this by simply using onChangeRaw, but it's not being triggered properly\n                // https://github.com/Hacker0x01/react-datepicker/issues/1357\n                // onChangeRaw={ rest.onChange }\n                calendarClassName=\"optimizedCheckout-contentPrimary\"\n                className=\"form-input optimizedCheckout-form-input\"\n                dateFormat={ inputFormat }\n                maxDate={ rest.max ? new Date(`${rest.max}T00:00:00Z`) : undefined }\n                minDate={ rest.min ? new Date(`${rest.min}T00:00:00Z`) : undefined }\n                name={ name }\n                onChange={ handleDateChange }\n                placeholderText={ inputFormat.toUpperCase() }\n                popperClassName=\"optimizedCheckout-contentPrimary\"\n                selected={ isDate(value) ? value : undefined }\n            />\n        );\n\n    case DynamicFormFieldType.multiline:\n        return (\n            <TextArea\n                { ...rest as any }\n                id={ id }\n                name={ name }\n                onChange={ onChange }\n                testId={ `${id}-text` }\n                type={ fieldType }\n                value={ value }\n            />\n        );\n\n    default:\n        return (\n            <TextInput\n                { ...rest }\n                id={ id }\n                name={ name }\n                onChange={ onChange }\n                placeholder={ placeholder }\n                testId={ `${id}-${ fieldType === DynamicFormFieldType.password ?\n                    'password' :\n                    'text' }` }\n                type={ fieldType }\n                value={ value }\n            />\n        );\n    }\n};\n\nexport default memo(withDate(DynamicInput));\n","import React, { memo, useCallback, FunctionComponent, MouseEvent } from 'react';\n\nimport { TranslatedString } from '../../locale';\n\nimport './MultiCheckboxControl.scss';\n\nexport interface MultiCheckboxControlProps {\n    testId?: string;\n    onSelectedAll(): void;\n    onSelectedNone(): void;\n}\n\nconst MultiCheckboxControl: FunctionComponent<MultiCheckboxControlProps> = ({\n    testId,\n    onSelectedAll,\n    onSelectedNone,\n}) => {\n    const handleSelectAllClick = useCallback((event: MouseEvent) => {\n        event.preventDefault();\n        onSelectedAll();\n    }, [onSelectedAll]);\n\n    const handleSelectNoneClick = useCallback((event: MouseEvent) => {\n        event.preventDefault();\n        onSelectedNone();\n    }, [onSelectedNone]);\n\n    return <ul className=\"multiCheckbox--controls\">\n        <li className=\"multiCheckbox--control\">\n            <TranslatedString id=\"address.select\" />\n        </li>\n\n        <li className=\"multiCheckbox--control\">\n            <a\n                data-test={ `${testId}Checkbox-all-button` }\n                href=\"#\"\n                onClick={ handleSelectAllClick }\n            >\n                <TranslatedString id=\"address.select_all\" />\n            </a>\n        </li>\n\n        <li className=\"multiCheckbox--control\">\n            <a\n                data-test={ `${testId}Checkbox-none-button` }\n                href=\"#\"\n                onClick={ handleSelectNoneClick }\n            >\n                <TranslatedString id=\"address.select_none\" />\n            </a>\n        </li>\n    </ul>;\n};\n\nexport default memo(MultiCheckboxControl);\n","import { FormFieldItem } from '@bigcommerce/checkout-sdk';\nimport { getIn, FieldArray, FieldArrayRenderProps } from 'formik';\nimport { difference, kebabCase, noop, pick } from 'lodash';\nimport React, { memo, useCallback, ChangeEvent, FunctionComponent, ReactNode } from 'react';\n\nimport DynamicFormFieldType from './DynamicFormFieldType';\nimport DynamicInput from './DynamicInput';\nimport FormFieldContainer from './FormFieldContainer';\nimport FormFieldError from './FormFieldError';\nimport MultiCheckboxControl from './MultiCheckboxControl';\n\nexport interface CheckboxGroupFormFieldProps {\n    id: string;\n    label: ReactNode;\n    name: string;\n    options: FormFieldItem[];\n    onChange?(values: string[]): void;\n}\n\ntype MultiCheckboxFormFieldProps = (\n    CheckboxGroupFormFieldProps &\n    Pick<FieldArrayRenderProps, 'push' | 'remove' | 'pop' | 'form'>\n);\n\nconst MultiCheckboxFormField: FunctionComponent<MultiCheckboxFormFieldProps> = ({\n    form: { values, errors },\n    id,\n    label,\n    name,\n    onChange = noop,\n    options,\n    push,\n    remove,\n}) => {\n    const handleSelectAll = useCallback(() => {\n        const checkedValues: string[] = getIn(values, name) || [];\n\n        difference(options.map(({ value }) => value), checkedValues)\n            .forEach(val => push(val));\n\n        onChange(getIn(values, name));\n    }, [\n        name,\n        onChange,\n        options,\n        push,\n        values,\n    ]);\n\n    const handleSelectNone = useCallback(() => {\n        const checkedValues: string[] = getIn(values, name) || [];\n\n        checkedValues.forEach(() => remove(0));\n\n        onChange(getIn(values, name));\n    }, [\n        name,\n        onChange,\n        remove,\n        values,\n    ]);\n\n    const handleInputChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n        const checkedValues: string[] = getIn(values, name) || [];\n        const { value, checked } = event.target;\n\n        if (checked) {\n            push(value);\n        } else {\n            remove(checkedValues.indexOf(value));\n        }\n\n        onChange(getIn(values, name));\n    }, [\n        name,\n        onChange,\n        push,\n        remove,\n        values,\n    ]);\n\n    return <FormFieldContainer hasError={ getIn(errors, name) && getIn(errors, name).length }>\n        { label }\n\n        { options.length > 1 && <MultiCheckboxControl\n            onSelectedAll={ handleSelectAll }\n            onSelectedNone={ handleSelectNone }\n            testId={ id }\n        /> }\n\n        <DynamicInput\n            fieldType={ DynamicFormFieldType.checkbox }\n            id={ id }\n            name={ name }\n            onChange={ handleInputChange }\n            options={ options }\n            value={ getIn(values, name) || [] }\n        />\n\n        <FormFieldError\n            name={ name }\n            testId={ `${kebabCase(name)}-field-error-message` }\n        />\n    </FormFieldContainer>;\n};\n\nconst CheckboxGroupFormField: FunctionComponent<CheckboxGroupFormFieldProps> = ({\n    id,\n    label,\n    name,\n    onChange,\n    options,\n}) => {\n    const renderField = useCallback((renderProps: FieldArrayRenderProps) => (\n        <MultiCheckboxFormField\n            id={ id }\n            label={ label }\n            name={ name }\n            onChange={ onChange }\n            options={ options }\n            { ...pick(renderProps, [\n                'form',\n                'pop',\n                'push',\n                'remove',\n            ]) }\n        />\n    ), [\n        id,\n        label,\n        name,\n        onChange,\n        options,\n    ]);\n\n    return <FieldArray\n        name={ name }\n        render={ renderField }\n    />;\n};\n\nexport default memo(CheckboxGroupFormField);\n","import { FormField as FormFieldType } from '@bigcommerce/checkout-sdk';\nimport { FieldProps } from 'formik';\nimport React, { memo, useCallback, useMemo, FunctionComponent, ReactNode } from 'react';\n\nimport { TranslatedString } from '../../locale';\n\nimport CheckboxGroupFormField from './CheckboxGroupFormField';\nimport DynamicFormFieldType from './DynamicFormFieldType';\nimport DynamicInput from './DynamicInput';\nimport FormField from './FormField';\nimport Label from './Label';\n\nexport interface DynamicFormFieldOption {\n    code: string;\n    name: string;\n}\n\nexport interface DynamicFormFieldProps {\n    field: FormFieldType;\n    inputId?: string;\n    extraClass?: string;\n    autocomplete?: string;\n    parentFieldName?: string;\n    placeholder?: string;\n    label?: ReactNode;\n    onChange?(value: string | string[]): void;\n}\n\nconst DynamicFormField: FunctionComponent<DynamicFormFieldProps>  = ({\n    field: {\n        fieldType,\n        type,\n        secret,\n        name,\n        label: fieldLabel,\n        required,\n        options,\n        max,\n        min,\n        maxLength,\n    },\n    parentFieldName,\n    onChange,\n    placeholder,\n    inputId,\n    autocomplete,\n    label,\n    extraClass,\n}) => {\n    const fieldInputId = inputId || name;\n    const fieldName = parentFieldName ? `${parentFieldName}.${name}` : name;\n\n    const labelComponent = useMemo(() => (\n        <Label htmlFor={ fieldInputId }>\n            { label || fieldLabel }\n            { !required &&\n                <>\n                    { ' ' }\n                    <small className=\"optimizedCheckout-contentSecondary\">\n                        <TranslatedString id=\"common.optional_text\" />\n                    </small>\n                </> }\n        </Label>\n    ), [\n        fieldInputId,\n        fieldLabel,\n        required,\n        label,\n    ]);\n\n    const dynamicFormFieldType = useMemo((): DynamicFormFieldType => {\n        if (fieldType === 'text') {\n            if (type === 'integer') {\n                return DynamicFormFieldType.number;\n            }\n\n            return secret ?\n                DynamicFormFieldType.password :\n                DynamicFormFieldType.text;\n        }\n\n        return fieldType as DynamicFormFieldType;\n    }, [fieldType, type, secret]);\n\n    const renderInput = useCallback(({ field }: FieldProps<string>) => (\n        <DynamicInput\n            { ...field }\n            autoComplete={ autocomplete }\n            fieldType={ dynamicFormFieldType }\n            id={ fieldInputId }\n            max={ max }\n            maxLength={ maxLength || undefined }\n            min={ min }\n            options={ options && options.items }\n            placeholder={ placeholder || (options && options.helperLabel) }\n            rows={ options && (options as any).rows }\n        />\n    ), [\n        fieldInputId,\n        max,\n        maxLength,\n        min,\n        options,\n        placeholder,\n        dynamicFormFieldType,\n        autocomplete,\n    ]);\n\n    return (\n        <div className={ `dynamic-form-field ${extraClass}` }>\n            { fieldType === DynamicFormFieldType.checkbox ?\n                <CheckboxGroupFormField\n                    id={ fieldInputId }\n                    label={ labelComponent }\n                    name={ fieldName }\n                    onChange={ onChange }\n                    options={ (options && options.items) || [] }\n                /> :\n                <FormField\n                    input={ renderInput }\n                    label={ labelComponent }\n                    name={ fieldName }\n                    onChange={ onChange }\n                /> }\n        </div>\n    );\n};\n\nexport default memo(DynamicFormField);\n","import { Address } from '@bigcommerce/checkout-sdk';\n\nimport { mapCustomFormFieldsFromFormValues } from '../formFields';\n\nimport { AddressFormValues } from './mapAddressToFormValues';\n\nexport default function mapAddressFromFormValues(formValues: AddressFormValues): Address {\n    const { customFields, ...address } = formValues;\n    const shouldSaveAddress = formValues.shouldSaveAddress;\n\n    return {\n        ...address,\n        shouldSaveAddress,\n        customFields: mapCustomFormFieldsFromFormValues(customFields),\n    };\n}\n","import { Checkout, CheckoutPayment } from '@bigcommerce/checkout-sdk';\n\nimport { isGiftCertificatePayment } from '../giftCertificate';\n\nimport { isStoreCreditPayment } from './storeCredit';\n\nexport default function getPreselectedPayment(checkout: Checkout): CheckoutPayment | undefined {\n    const payments = checkout && checkout.payments ? checkout.payments : [];\n\n    return payments.find(payment =>\n        !isGiftCertificatePayment(payment)\n        && !isStoreCreditPayment(payment)\n        && !!payment.providerId\n    );\n}\n","import React, { createRef, FC, useEffect } from 'react'\nimport { debounce } from 'lodash'\nimport TextInput from '../../ui/form/TextInput'\n\nimport './styles.scss'\n\nimport withLanguage, { WithLanguageProps } from '../../locale/withLanguage';\n\nexport interface AddressFilterInputProps {\n  onChange: Function\n}\n\nconst AddressFilterInput:FC<AddressFilterInputProps & WithLanguageProps> = ({\n  onChange,\n  language\n}) => {\n  const ref = createRef<HTMLDivElement>();\n  const handleInputChange = debounce((val) => {\n    onChange && onChange(val)\n  }, 200)\n\n  useEffect(() => {\n    const { current } = ref\n    current && (current.onclick = (e) => {\n      e.stopPropagation()\n    })\n\n    return () => {}\n  })\n\n  return (\n    <div className=\"cc-address-search-container\" ref={ref}>\n      <TextInput \n        placeholder={language.translate(\"shipping.searchAddress_label\")}\n        onChange={(e) => {\n          handleInputChange(e.target.value)\n        }}\n      />\n    </div>\n  )\n}\n\nexport default withLanguage(AddressFilterInput)","import { Address, CustomerAddress } from '@bigcommerce/checkout-sdk';\nimport React, { memo, FunctionComponent, PureComponent, ReactNode, useState } from 'react';\n\nimport { preventDefault } from '../common/dom';\nimport { TranslatedString } from '../locale';\nimport { DropdownTrigger } from '../ui/dropdown';\nimport RadioInput from '../ui/form/RadioInput';\nimport { Fieldset, Form, Label, TextInput } from '../ui/form';\n\nimport isEqualAddress from './isEqualAddress';\nimport './AddressSelect.scss';\nimport StaticAddress from './StaticAddress';\n\nimport { AddressFilterInput } from '../coldChainCheckout';\n\nimport { storage } from '../coldChainCheckout/utils';\n\nexport interface AddressSelectProps {\n    addresses: CustomerAddress[];\n    selectedAddress?: Address;\n    onSelectAddress(address: Address): void;\n    onUseNewAddress(currentAddress?: Address): void;\n}\n\ninterface AddressSelectState {\n    shippingAddressMethod: string;\n    OTSAddress: any;\n}\n\nconst addrBase = {\n    address1: \"\",\n    address2: \"\",\n    city: \"\",\n    company: \"\",\n    country: \"USA\",\n    countryCode: \"US\",\n    customFields: [],\n    firstName: \"\",\n    id: \"\",\n    lastName: \"\",\n    phone: \"\",\n    postalCode: \"\",\n    stateOrProvince: \"\",\n    stateOrProvinceCode: \"\",    \n    type: \"residential\"\n}\n\nclass AddressSelect extends PureComponent<AddressSelectProps> {\n    state: AddressSelectState = {\n        shippingAddressMethod: (storage.CCShippingMethod.getValue())?storage.CCShippingMethod.getValue():\"buildIn\",\n        OTSAddress: (storage.CCOTSAddress.getValue()) ? JSON.parse(storage.CCOTSAddress.getValue()) : addrBase\n    };\n\n    handleShippingAddressMethodChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        storage.CCShippingMethod.setValue(e.target.value);\n        this.setState({ shippingAddressMethod: e.target.value });\n        console.log(\"after set, storage.CCShippingMethod value:\"+storage.CCShippingMethod.getValue());\n    }\n\n    render(): ReactNode {\n        const {\n            addresses,\n            selectedAddress,\n        } = this.props;\n\n        const {\n            shippingAddressMethod,\n            OTSAddress\n        } = this.state;\n\n        const formFields = [\n            { id: \"firstName\", name: \"firstName\", custom: false, label: \"Contact Name\", required: true },\n            { id: \"company\", name: \"company\", custom: false, label: \"Company Name\", required: true },\n            { id: \"address1\", name: \"address1\", custom: false, label: \"Address Line 1\", required: true },\n            { id: \"address2\", name: \"address2\", custom: false, label: \"Address Line 2\", required: false },\n            { id: \"city\", name: \"city\", custom: false, label: \"City\", required: true },\n            { id: \"stateOrProvince\", name: \"stateOrProvince\", custom: false, label: \"State\", required: true },\n            { id: \"postalCode\", name: \"postalCode\", custom: false, label: \"Zip Code\", required: true },\n            { id: \"phone\", name: \"phone\", custom: false, label: \"Phone Number\", required: false }\n        ]\n\n        const allowOTS = storage.CCAllowOTS.getValue();\n        console.log(\"allowOTS:\" + allowOTS);\n        var isOTSAddress = (selectedAddress && selectedAddress.customFields && selectedAddress.customFields.length == 0);\n\n        return (\n            <div className=\"form-field\">\n                <RadioInput\n                    checked={shippingAddressMethod == \"buildIn\"}\n                    id=\"addr-methohd-default\"\n                    key=\"buildIn\"\n                    label=\"Choose from the address book:\"\n                    name=\"shippingAddressMethod\"\n                    onChange={this.handleShippingAddressMethodChange}\n                    value=\"buildIn\"\n                />\n                {(shippingAddressMethod == \"buildIn\") ?<div className=\"dropdown--select\" role=\"combobox\">\n                    <DropdownTrigger\n                        dropdown={\n                            <AddressSelectMenu\n                                addresses={addresses}\n                                onSelectAddress={this.handleSelectAddress}\n                                onUseNewAddress={this.handleUseNewAddress}\n                                selectedAddress={(isOTSAddress)?undefined:selectedAddress}\n                            />\n                        }\n                    >\n                        <AddressSelectButton\n                            addresses={addresses}\n                            selectedAddress={selectedAddress}\n                        />\n                    </DropdownTrigger>\n                </div>:\"\"}\n                {(allowOTS == \"true\") ? <RadioInput\n                    checked={shippingAddressMethod == \"OTS\"}\n                    id=\"addr-method-ots\"\n                    key=\"OTS\"\n                    label=\"Specify a one-time shipping address (US only):\"\n                    name=\"shippingAddressMethod\"\n                    onChange={this.handleShippingAddressMethodChange}\n                    value=\"OTS\"\n                /> : \"\"}\n                {(allowOTS == \"true\" && shippingAddressMethod == \"OTS\") ? <Form\n                    className=\"checkout-form\"\n                    id=\"checkout-customer-returning\"\n                    testId=\"checkout-customer-returning\"\n                >\n                    <Fieldset>\n                        <div className=\"create-account-form\">\n                            {formFields.map(field => (\n                                <div className=\"dynamic-form-field\">\n                                    <div className=\"form-field\">\n                                        <Label htmlFor={field.id}>\n                                            {field.label}\n                                            {(field.required)? <>\n                                                    {' '}\n                                                    <small className=\"optimizedCheckout-contentSecondary\">\n                                                        (Required)\n                                                    </small>\n                                                </>:\n                                                <>\n                                                    {' '}\n                                                    <small className=\"optimizedCheckout-contentSecondary\">\n                                                        <TranslatedString id=\"common.optional_text\" />\n                                                    </small>\n                                                </>}\n                                        </Label>\n                                        <TextInput\n                                            id={field.id}\n                                            name={field.name}\n                                            onChange={this.handleFieldValueChange(field.name)}\n                                            value={OTSAddress[field.name]}\n                                        />\n                                    </div>\n                                </div>\n                            ))}\n                        </div>\n                    </Fieldset>\n                </Form> : \"\"}\n            </div>\n        );\n    }\n\n    private handleSelectAddress: (newAddress: Address) => void = (newAddress: Address) => {\n        const {\n            onSelectAddress,\n            selectedAddress,\n        } = this.props;\n\n        if (!isEqualAddress(selectedAddress, newAddress)) {\n            onSelectAddress(newAddress);\n        }\n    };\n\n    private handleUseNewAddress: () => void = () => {\n        const {\n            selectedAddress,\n            onUseNewAddress,\n        } = this.props;\n\n        onUseNewAddress(selectedAddress);\n    };\n\n    private handleFieldValueChange: (name: string) => (e: React.ChangeEvent<HTMLInputElement>) => void = name => e => {\n        this.state.OTSAddress[name] = e.target.value;\n        if (name == \"stateOrProvince\"){\n            this.state.OTSAddress[\"stateOrProvinceCode\"] = e.target.value;\n        }\n        if (name == \"firstName\"){\n            this.state.OTSAddress[\"lastName\"] = e.target.value;\n        }\n        this.setState({ OTSAddress: {...this.state.OTSAddress} });\n        //this.props.onSelectAddress(this.state.OTSAddress);\n        storage.CCOTSAddress.setValue(JSON.stringify(this.state.OTSAddress));\n    };\n}\n\nconst addressesFilterHandler = (q: string, addresses: CustomerAddress[]) => {\n    return addresses.filter(address => JSON\n        .stringify(address)\n        .trim()\n        .toLocaleLowerCase()\n        .includes(\n            q\n                .trim()\n                .toLocaleLowerCase()\n        )\n    )\n}\n\nconst AddressSelectMenu: FunctionComponent<AddressSelectProps> = ({\n    addresses,\n    onSelectAddress\n}) => {\n    const [disPlayAddress, setDisPlayAddress] = useState(addresses);\n\n    return (<ul\n        className=\"dropdown-menu instrumentSelect-dropdownMenu\"\n        id=\"addressDropdown\"\n    >\n        <AddressFilterInput\n            onChange={(q: string) => {\n                setDisPlayAddress(addressesFilterHandler(q, addresses))\n            }}\n        />\n        { disPlayAddress.map(address => (\n            <li\n                className=\"dropdown-menu-item dropdown-menu-item--select\"\n                key={address.id}\n            >\n                <a href=\"#\" onClick={preventDefault(() => onSelectAddress(address))}>\n                    <StaticAddress address={address} />\n                </a>\n            </li>\n        ))}\n    </ul>\n    );\n};\n\ntype AddressSelectButtonProps = Pick<AddressSelectProps, 'selectedAddress' | 'addresses'>;\n\nconst AddressSelectButton: FunctionComponent<AddressSelectButtonProps> = ({\n    selectedAddress,\n}) => (\n    <a\n        className=\"button dropdown-button dropdown-toggle--select\"\n        href=\"#\"\n        id=\"addressToggle\"\n        onClick={preventDefault()}\n    >\n        { selectedAddress ?\n            <StaticAddress address={selectedAddress} /> :\n            <TranslatedString id=\"address.enter_address_action\" />}\n    </a>\n);\n\nexport default memo(AddressSelect);\n","import { Checkout } from '@bigcommerce/checkout-sdk';\n\nimport { getPreselectedPayment } from '../payment';\n\nexport default function getBillingMethodId(checkout: Checkout): string | undefined {\n    const BILLING_METHOD_IDS = ['amazonpay'];\n    const preselectedPayment = getPreselectedPayment(checkout);\n\n    return preselectedPayment && BILLING_METHOD_IDS.indexOf(preselectedPayment.providerId) > -1 ?\n        preselectedPayment.providerId :\n        undefined;\n}\n","import { FieldProps } from 'formik';\nimport React, { useCallback, useMemo, FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../locale';\nimport { Fieldset, FormField, Label, Legend, TextInput } from '../ui/form';\n\nconst OrderComments: FunctionComponent = () => {\n    const renderLabel = useCallback(name => (\n        <Label hidden htmlFor={ name }>\n            <TranslatedString id=\"shipping.order_comment_label\" />\n        </Label>\n    ), []);\n\n    const renderInput = useCallback(({ field }: FieldProps) => (\n        <TextInput\n            { ...field }\n            autoComplete={ 'off' }\n            maxLength={ 2000 }\n        />\n    ), []);\n\n    const legend = useMemo(() => (\n        <Legend>\n            <TranslatedString id=\"shipping.order_comment_label\" />\n        </Legend>\n    ), []);\n\n    return <Fieldset legend={ legend } testId=\"checkout-shipping-comments\">\n        <FormField\n            input={ renderInput }\n            label={ renderLabel }\n            name=\"orderComment\"\n        />\n    </Fieldset>;\n};\n\nexport default OrderComments;\n","import { Address, CheckoutSelectors, Country, Customer, FormField } from '@bigcommerce/checkout-sdk';\nimport { withFormik, FormikProps } from 'formik';\nimport React, { createRef, PureComponent, ReactNode, RefObject } from 'react';\nimport { lazy } from 'yup';\n\nimport { getAddressFormFieldsValidationSchema, getTranslateAddressError, mapAddressToFormValues, AddressForm, AddressFormValues, AddressSelect } from '../address';\nimport { getCustomFormFieldsValidationSchema } from '../formFields';\nimport { withLanguage, TranslatedString, WithLanguageProps } from '../locale';\nimport { OrderComments } from '../orderComments';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Fieldset, Form } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\n\nimport StaticBillingAddress from './StaticBillingAddress';\n\nexport type BillingFormValues = AddressFormValues & { orderComment: string };\n\nexport interface BillingFormProps {\n    billingAddress?: Address;\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customer: Customer;\n    customerMessage: string;\n    googleMapsApiKey: string;\n    isUpdating: boolean;\n    methodId?: string;\n    shouldShowOrderComments: boolean;\n    getFields(countryCode?: string): FormField[];\n    onSubmit(values: BillingFormValues): void;\n    onUnhandledError(error: Error): void;\n    updateAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n}\n\ninterface BillingFormState {\n    isResettingAddress: boolean;\n}\n\nclass BillingForm extends PureComponent<BillingFormProps & WithLanguageProps & FormikProps<BillingFormValues>, BillingFormState> {\n    state: BillingFormState = {\n        isResettingAddress: false,\n    };\n\n    private addressFormRef: RefObject<HTMLFieldSetElement> = createRef();\n\n    render(): ReactNode {\n        const {\n            googleMapsApiKey,\n            billingAddress,\n            countriesWithAutocomplete,\n            customer: { addresses, isGuest },\n            getFields,\n            countries,\n            isUpdating,\n            setFieldValue,\n            shouldShowOrderComments,\n            values,\n            methodId,\n        } = this.props;\n\n        const shouldRenderStaticAddress = methodId === 'amazonpay';\n        const allFormFields = getFields(values.countryCode);\n        const customFormFields = allFormFields.filter(({ custom }) => custom);\n        const hasCustomFormFields = customFormFields.length > 0;\n        const editableFormFields = shouldRenderStaticAddress && hasCustomFormFields ? customFormFields : allFormFields;\n        const { isResettingAddress } = this.state;\n        const hasAddresses = addresses && addresses.length > 0;\n        //const hasValidCustomerAddress = billingAddress &&\n        //    isValidCustomerAddress(billingAddress, addresses, getFields(billingAddress.countryCode));\n\n        const hasValidCustomerAddress = true;\n\n        return (\n            <Form autoComplete=\"on\">\n                { shouldRenderStaticAddress && billingAddress &&\n                    <div className={'form-fieldset'}>\n                        <StaticBillingAddress address={billingAddress} />\n                    </div>}\n\n                <Fieldset id=\"checkoutBillingAddress\" ref={this.addressFormRef}>\n                    {hasAddresses && !shouldRenderStaticAddress &&\n                        <Fieldset id=\"billingAddresses\">\n                            <LoadingOverlay isLoading={isResettingAddress}>\n                                <AddressSelect\n                                    addresses={addresses}\n                                    onSelectAddress={this.handleSelectAddress}\n                                    onUseNewAddress={this.handleUseNewAddress}\n                                    selectedAddress={hasValidCustomerAddress ? billingAddress : undefined}\n                                />\n                            </LoadingOverlay>\n                        </Fieldset>}\n\n                    {!hasValidCustomerAddress &&\n                        <div className=\"shippingOptions-panel optimizedCheckout-overlay\">\n                            <p className=\"shippingOptions-panel-message optimizedCheckout-primaryContent\">\n                                <TranslatedString id=\"shipping.noAddress_label\" />\n                            </p>\n                        </div>\n                        &&\n                        <LoadingOverlay isLoading={isResettingAddress}>\n                            <AddressForm\n                                countries={countries}\n                                countriesWithAutocomplete={countriesWithAutocomplete}\n                                countryCode={values.countryCode}\n                                formFields={editableFormFields}\n                                googleMapsApiKey={googleMapsApiKey}\n                                setFieldValue={setFieldValue}\n                                shouldShowSaveAddress={!isGuest}\n                            />\n                        </LoadingOverlay>}\n                </Fieldset>\n\n                { shouldShowOrderComments &&\n                    <OrderComments />}\n\n                <div className=\"form-actions\">\n                    <Button\n                        disabled={isUpdating || isResettingAddress}\n                        id=\"checkout-billing-continue\"\n                        isLoading={isUpdating || isResettingAddress}\n                        type=\"submit\"\n                        variant={ButtonVariant.Primary}\n                    >\n                        <TranslatedString id=\"common.continue_action\" />\n                    </Button>\n                </div>\n            </Form>\n        );\n    }\n\n    private handleSelectAddress: (address: Partial<Address>) => void = async address => {\n        const {\n            updateAddress,\n            onUnhandledError,\n        } = this.props;\n\n        this.setState({ isResettingAddress: true });\n\n        try {\n            await updateAddress(address);\n        } catch (e) {\n            onUnhandledError(e);\n        } finally {\n            this.setState({ isResettingAddress: false });\n        }\n    };\n\n    private handleUseNewAddress: () => void = () => {\n        this.handleSelectAddress({});\n    };\n}\n\nexport default withLanguage(withFormik<BillingFormProps & WithLanguageProps, BillingFormValues>({\n    handleSubmit: (values, { props: { onSubmit } }) => {\n        onSubmit(values);\n    },\n    mapPropsToValues: ({ getFields, customerMessage, billingAddress }) => (\n        {\n            ...mapAddressToFormValues(\n                getFields(billingAddress && billingAddress.countryCode),\n                billingAddress\n            ),\n            orderComment: customerMessage,\n        }),\n    isInitialValid: ({\n        billingAddress,\n        getFields,\n        language,\n    }) => (\n        !!billingAddress && getAddressFormFieldsValidationSchema({\n            language,\n            formFields: getFields(billingAddress.countryCode),\n        }).isValidSync(billingAddress)\n    ),\n    validationSchema: ({\n        language,\n        getFields,\n        methodId,\n    }: BillingFormProps & WithLanguageProps) => methodId === 'amazonpay' ?\n            (lazy<Partial<AddressFormValues>>(values => getCustomFormFieldsValidationSchema({\n                translate: getTranslateAddressError(language),\n                formFields: getFields(values && values.countryCode),\n            }))) :\n            (lazy<Partial<AddressFormValues>>(values => getAddressFormFieldsValidationSchema({\n                language,\n                formFields: getFields(values && values.countryCode),\n            }))),\n    enableReinitialize: true,\n})(BillingForm));\n","import { Address, CheckoutRequestBody, CheckoutSelectors, Country, Customer, FormField } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\n\nimport { isEqualAddress, mapAddressFromFormValues } from '../address';\nimport { withCheckout, CheckoutContextProps } from '../checkout';\nimport { EMPTY_ARRAY } from '../common/utility';\nimport { TranslatedString } from '../locale';\nimport { getShippableItemsCount } from '../shipping';\nimport { Legend } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\n\nimport getBillingMethodId from './getBillingMethodId';\nimport BillingForm, { BillingFormValues } from './BillingForm';\n\nimport { storage } from '../coldChainCheckout/utils';\n\nexport interface BillingProps {\n    navigateNextStep(): void;\n    onReady?(): void;\n    onUnhandledError(error: Error): void;\n}\n\nexport interface WithCheckoutBillingProps {\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customer: Customer;\n    customerMessage: string;\n    googleMapsApiKey: string;\n    isInitializing: boolean;\n    isUpdating: boolean;\n    shouldShowOrderComments: boolean;\n    billingAddress?: Address;\n    methodId?: string;\n    getFields(countryCode?: string): FormField[];\n    initialize(): Promise<CheckoutSelectors>;\n    updateAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n    updateCheckout(payload: CheckoutRequestBody): Promise<CheckoutSelectors>;\n}\n\ninterface BillingState {\n    billingAddress?: Address;\n}\n\nclass Billing extends Component<BillingProps & WithCheckoutBillingProps, BillingState> {\n    constructor(props: BillingProps & WithCheckoutBillingProps) {\n        super(props);\n\n        var address = JSON.parse(storage.CCAddresses.getValue());\n\n        this.state = {\n            billingAddress: address.billAddresses\n        };\n    }\n\n    async componentDidMount(): Promise<void> {\n        const {\n            initialize,\n            onReady = noop,\n            onUnhandledError,\n        } = this.props;\n\n        try {\n            //var self = this;\n            await initialize();\n\n\n            var address = JSON.parse(storage.CCAddresses.getValue());\n\n            if (address && this.props.customer) {\n                this.props.customer.addresses = [address.billAddresses];\n                //if (!this.props.billingAddress || this.props.billingAddress.customFields.length == 0) {\n                //    setTimeout(function () {\n                //        self.setState({\n                //            billingAddress: address.addresses[address.defaultBillingId]\n                //        })\n                //    }, 1000);\n                //}\n            }\n\n            try {\n                await this.props.updateAddress(address.billAddresses);\n            } catch (error) {\n                onUnhandledError(error);\n            }\n\n            onReady();\n        } catch (e) {\n            onUnhandledError(e);\n        }\n    }\n\n    /*\n    async componentWillReceiveProps(nextProps: any): Promise<void> {\n        if (!isEqualAddress(this.props.billingAddress, nextProps.shippingAddress)) {\n            this.setState({\n                billingAddress: nextProps.billingAddress\n            })\n        }\n    }\n    */\n\n    render(): ReactNode {\n        const {\n            updateAddress,\n            isInitializing,\n            ...props\n        } = this.props;\n\n        const {\n            billingAddress\n        } = this.state;\n\n        return (\n            <div className=\"checkout-form\">\n                <div className=\"form-legend-container\">\n                    <Legend testId=\"billing-address-heading\">\n                        <TranslatedString id=\"billing.billing_address_heading\" />\n                    </Legend>\n                </div>\n\n                <LoadingOverlay\n                    isLoading={isInitializing}\n                    unmountContentWhenLoading\n                >\n                    <BillingForm\n                        {...props}\n                        onSubmit={this.handleSubmit}\n                        updateAddress={updateAddress}\n                        billingAddress={billingAddress}\n                    />\n                </LoadingOverlay>\n            </div>\n        );\n    }\n\n    private handleSubmit: (values: BillingFormValues) => void = async ({\n        orderComment,\n        ...addressValues\n    }) => {\n        const {\n            updateAddress,\n            updateCheckout,\n            customerMessage,\n            billingAddress,\n            navigateNextStep,\n            onUnhandledError,\n        } = this.props;\n\n        const promises: Array<Promise<CheckoutSelectors>> = [];\n        const address = mapAddressFromFormValues(addressValues);\n\n        if (address && !isEqualAddress(address, billingAddress)) {\n            promises.push(updateAddress(address));\n        }\n\n        if (customerMessage !== orderComment) {\n            promises.push(updateCheckout({ customerMessage: orderComment }));\n        }\n\n        try {\n            await Promise.all(promises);\n\n            navigateNextStep();\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    };\n}\n\nfunction mapToBillingProps({\n    checkoutService,\n    checkoutState,\n}: CheckoutContextProps): WithCheckoutBillingProps | null {\n    const {\n        data: {\n            getCheckout,\n            getConfig,\n            getCart,\n            getCustomer,\n            getBillingAddress,\n            getBillingAddressFields,\n            getBillingCountries,\n        },\n        statuses: {\n            isLoadingBillingCountries,\n            isUpdatingBillingAddress,\n            isUpdatingCheckout,\n        },\n    } = checkoutState;\n\n    const config = getConfig();\n    const customer = getCustomer();\n    const checkout = getCheckout();\n    const cart = getCart();\n\n    if (!config || !customer || !checkout || !cart) {\n        return null;\n    }\n\n    const {\n        enableOrderComments,\n        googleMapsApiKey,\n        features,\n    } = config.checkoutSettings;\n\n    const countriesWithAutocomplete = ['US', 'CA', 'AU', 'NZ'];\n\n    if (features['CHECKOUT-4183.checkout_google_address_autocomplete_uk']) {\n        countriesWithAutocomplete.push('GB');\n    }\n\n    return {\n        billingAddress: getBillingAddress(),\n        countries: getBillingCountries() || EMPTY_ARRAY,\n        countriesWithAutocomplete,\n        customer,\n        customerMessage: checkout.customerMessage,\n        getFields: getBillingAddressFields,\n        googleMapsApiKey,\n        initialize: checkoutService.loadBillingAddressFields,\n        isInitializing: isLoadingBillingCountries(),\n        isUpdating: isUpdatingBillingAddress() || isUpdatingCheckout(),\n        methodId: getBillingMethodId(checkout),\n        shouldShowOrderComments: enableOrderComments && getShippableItemsCount(cart) < 1,\n        updateAddress: checkoutService.updateBillingAddress,\n        updateCheckout: checkoutService.updateCheckout,\n    };\n}\n\nexport default withCheckout(mapToBillingProps)(Billing);\n"],"sourceRoot":""}