{"version":3,"sources":["webpack://checkout/./src/app/ui/form/CheckboxInput.tsx","webpack://checkout/./src/app/ui/form/RadioInput.tsx","webpack://checkout/./src/app/ui/accordion/AccordionContext.tsx","webpack://checkout/./src/app/ui/form/TextArea.tsx","webpack://checkout/./src/app/ui/form/CheckboxFormField.tsx","webpack://checkout/./src/app/shipping/getShippableItemsCount.ts","webpack://checkout/./src/app/ui/accordion/Accordion.tsx","webpack://checkout/./src/app/ui/form/Checklist.tsx","webpack://checkout/./src/app/formFields/mapCustomFormFieldsFromFormValues.ts","webpack://checkout/./src/app/ui/dropdown/DropdownTrigger.tsx","webpack://checkout/./src/app/locale/withDate.tsx","webpack://checkout/./src/app/common/utility/parseAnchor.ts","webpack://checkout/./src/app/address/getAddressFormFieldInputId.ts","webpack://checkout/./src/app/address/googleAutocomplete/AddressSelector.ts","webpack://checkout/./src/app/address/googleAutocomplete/AddressSelectorUk.ts","webpack://checkout/./src/app/address/googleAutocomplete/AddressSelectorFactory.ts","webpack://checkout/./src/app/ui/popover/Popover.tsx","webpack://checkout/./src/app/ui/popover/PopoverList.tsx","webpack://checkout/./src/app/address/googleAutocomplete/getGoogleAutocompleteScriptLoader.ts","webpack://checkout/./src/app/ui/autocomplete/Autocomplete.tsx","webpack://checkout/./src/app/address/googleAutocomplete/GoogleAutocompleteScriptLoader.ts","webpack://checkout/./src/app/address/googleAutocomplete/GoogleAutocompleteService.ts","webpack://checkout/./src/app/address/googleAutocomplete/GoogleAutocomplete.tsx","webpack://checkout/./src/app/address/googleAutocomplete/GoogleAutocompleteFormField.tsx","webpack://checkout/./src/app/address/AddressForm.tsx","webpack://checkout/./src/app/address/googleAutocomplete/mapToAddress.ts","webpack://checkout/./src/app/ui/form/DynamicInput.tsx","webpack://checkout/./src/app/ui/form/MultiCheckboxControl.tsx","webpack://checkout/./src/app/ui/form/CheckboxGroupFormField.tsx","webpack://checkout/./src/app/ui/form/DynamicFormField.tsx","webpack://checkout/./src/app/address/mapAddressFromFormValues.ts","webpack://checkout/./src/app/payment/getPreselectedPayment.ts","webpack://checkout/./src/app/locale/TranslatedLink.tsx","webpack://checkout/./src/app/common/form/connectFormik.tsx","webpack://checkout/./src/app/ui/accordion/AccordionItem.tsx","webpack://checkout/./src/app/ui/form/ChecklistItemInput.tsx","webpack://checkout/./src/app/ui/form/ChecklistItem.tsx","webpack://checkout/./src/app/coldChainCheckout/components/AddressFilterInput.tsx","webpack://checkout/./src/app/address/AddressSelect.tsx","webpack://checkout/./src/app/shipping/errors/UnassignItemError.ts","webpack://checkout/./src/app/shipping/getShippingMethodId.ts","webpack://checkout/./src/app/address/AddressFormModal.tsx","webpack://checkout/./src/app/shipping/errors/AssignItemInvalidAddressError.ts","webpack://checkout/./src/app/shipping/errors/AssignItemFailedError.ts","webpack://checkout/./src/app/shipping/findConsignment.ts","webpack://checkout/./src/app/shipping/getShippableLineItems.ts","webpack://checkout/./src/app/shipping/ItemAddressSelect.tsx","webpack://checkout/./src/app/coldChainCheckout/components/OnlyShipWhenCompleteField.tsx","webpack://checkout/./src/app/coldChainCheckout/components/ColdChainCOExtraFields.tsx","webpack://checkout/./src/app/shipping/shippingOption/ShippingOptionsList.tsx","webpack://checkout/./src/app/shipping/shippingOption/ShippingOptionsForm.tsx","webpack://checkout/./src/app/shipping/getRecommendedShippingOption.ts","webpack://checkout/./src/app/shipping/shippingOption/ShippingOptions.tsx","webpack://checkout/./src/app/shipping/ShippingFormFooter.tsx","webpack://checkout/./src/app/shipping/MultiShippingForm.tsx","webpack://checkout/./src/app/shipping/updateShippableItems.ts","webpack://checkout/./src/app/shipping/RemoteShippingAddress.tsx","webpack://checkout/./src/app/shipping/ShippingAddressForm.tsx","webpack://checkout/./src/app/shipping/StaticAddressEditable.tsx","webpack://checkout/./src/app/shipping/ShippingAddress.tsx","webpack://checkout/./src/app/shipping/ShippingAddressFields.ts","webpack://checkout/./src/app/shipping/SingleShippingForm.tsx","webpack://checkout/./src/app/shipping/ShippingForm.tsx","webpack://checkout/./src/app/shipping/ShippingHeader.tsx","webpack://checkout/./src/app/shipping/Shipping.tsx"],"names":["CheckboxInput","ref","additionalClassName","label","id","rest","className","type","htmlFor","RadioInput","value","checked","AccordionContext","onToggle","TextArea","testId","disabled","labelContent","onChange","name","renderField","field","render","getShippableItemsCount","cart","lineItems","physicalItems","filter","item","addedByPromotion","state","getContextValue","selectedItemId","handleToggleItem","props","isDisabled","onSelect","setState","this","children","defaultSelectedItemId","Provider","ChecklistContext","undefined","connectFormik","setFieldValue","handleSelect","contextValue","mapCustomFormFieldsFromFormValues","customFieldsObject","customFields","key","fieldValue","padMonth","getMonth","toString","padDay","getDate","getFullYear","push","fieldId","shouldShow","handleClick","event","handleClose","nativeEvent","handleOpen","document","addEventListener","removeEventListener","componentWillUnmount","placement","dropdown","onClick","modifiers","hide","enabled","flip","preventOverflow","style","width","zIndex","defaultProps","withDate","displayNamePrefix","pickProps","parseAnchor","text","div","createElement","innerHTML","anchor","querySelector","anchorSiblings","split","outerHTML","ADDRESS_FIELD_IDS","address1","address2","postalCode","stateOrProvince","stateOrProvinceCode","getAddressFormFieldLegacyName","getAddressFormFieldInputId","googlePlace","address_components","_name","_address","getState","_get","getStreet","getStreet2","getCity","getCountry","getPostCode","access","element","find","types","indexOf","create","autocompleteData","addressSelector","getItemClassName","highlightedIndex","index","classes","join","instance","getItemProps","menuProps","items","length","map","content","stateReducer","changes","stateChangeTypes","blurInput","blurButton","mouseUp","touchEnd","inputValue","changeInput","isOpen","keyDownEnter","handleStateChange","onToggleOpen","inputProps","initialValue","initialHighlightedIndex","listTestId","defaultHighlightedIndex","initialInputValue","itemToString","labelId","onStateChange","getInputProps","getMenuProps","toPopoverItem","highlightItem","highlightedSlices","lastIndex","reduce","node","slice","i","offset","notHighlightedLength","substr","_scriptLoader","loadMapsSdk","apiKey","_googleAutoComplete","Promise","resolve","reject","params","window","autocompleteWindow","Boolean","google","maps","places","isAutocompleteWindow","loadScript","catch","e","_apiKey","getAutocompleteService","_autocompletePromise","then","googleMapsSdk","AutocompleteService","Error","getPlacesServices","_placesPromise","PlacesService","fields","nextElement","googleAutocompleteService","service","getDetails","placeId","result","focus","input","isAutocompleteEnabled","resetAutocomplete","setAutocomplete","setItems","autoComplete","componentRestrictions","getPlacePredictions","results","toAutocompleteItems","description","structured_formatting","main_text","matched_substrings","place_id","placeholder","countryCode","supportedCountries","parentFieldName","fieldName","TranslatedString","getAddressFormFieldLabelId","renderInput","country","FormField","Label","LABEL","city","company","firstName","lastName","phone","AUTOCOMPLETE","PLACEHOLDER","AUTOCOMPLETE_FIELD_NAME","containerRef","handleDynamicFormFieldChange","syncNonFormikValue","handleAutocompleteChange","handleAutocompleteSelect","place","autocompleteValue","countries","address","accessor","c","code","street2","stateName","states","subdivisions","mapToAddress","formFields","dateFormFieldNames","custom","fieldType","DynamicFormFieldType","date","componentDidMount","current","language","countriesWithAutocomplete","googleMapsApiKey","onAutocompleteToggle","shouldShowSaveAddress","Fieldset","addressFieldName","translatedPlaceholderId","DynamicFormField","autocomplete","extraClass","inputId","default","translate","CheckboxFormField","withLanguage","options","inputFormat","handleDateChange","dateValue","target","optionValue","radio","checkbox","Array","isArray","includes","calendarClassName","dateFormat","maxDate","max","Date","minDate","min","placeholderText","toUpperCase","popperClassName","selected","multiline","TextInput","password","onSelectedAll","onSelectedNone","handleSelectAllClick","preventDefault","handleSelectNoneClick","href","MultiCheckboxFormField","form","values","errors","remove","handleSelectAll","checkedValues","forEach","val","handleSelectNone","handleInputChange","FormFieldContainer","hasError","FormFieldError","renderProps","secret","fieldLabel","required","maxLength","fieldInputId","labelComponent","dynamicFormFieldType","number","helperLabel","rows","mapAddressFromFormValues","formValues","shouldSaveAddress","getPreselectedPayment","checkout","payments","payment","providerId","data","translatedString","parsedString","OriginalComponent","InnerComponent","prevFormik","prevProps","nextFormik","nextProps","DecoratedComponent","displayName","bodyClassName","classNameSelected","headerClassName","headerClassNameSelected","headerContent","itemId","isSelected","transitionEndListener","done","addEndListener","classNames","in","mountOnEnter","timeout","unmountOnExit","Input","htmlId","Checklist","Function","handleChange","selectedValue","renderHeaderContent","BasicFormField","onclick","stopPropagation","addrBase","shippingAddressMethod","CCShippingMethod","getValue","OTSAddress","CCOTSAddress","JSON","parse","handleShippingAddressMethodChange","setValue","console","log","handleSelectAddress","newAddress","onSelectAddress","selectedAddress","isEqualAddress","handleUseNewAddress","onUseNewAddress","handleFieldValueChange","stringify","addresses","allowOTS","CCAllowOTS","isOTSAddress","role","DropdownTrigger","AddressSelectMenu","AddressSelectButton","Form","disPlayAddress","setDisPlayAddress","q","trim","toLocaleLowerCase","addressesFilterHandler","StaticAddress","message","getLanguageService","UnassignItemError","prototype","CustomError","getShippingMethodId","preselectedPayment","SaveAddressForm","handleSubmit","onSaveAddress","mapPropsToValues","defaultCountryCode","validationSchema","getFields","getAddressFormFieldsValidationSchema","isLoading","onRequestClose","LoadingOverlay","AddressForm","Button","variant","Primary","onAfterOpen","addressFormProps","Modal","additionalModalClassName","header","ModalHeader","shouldShowCloseButton","title","AssignItemInvalidAddressError","AssignItemFailedError","findConsignment","consignments","consignment","lineItemIds","getShippableLineItems","parentId","concat","lineItemIndex","splitItems","quantity","variantId","productId","splitItem","imageUrl","alt","src","optionName","nameId","AddressSelect","shippingAddress","icon","shipViaOptions","storage","CCShipViaOptions","CCNeedBy","needBy","setNeedBy","CCShipWhenComplete","shipWhenComplete","setShipWhenComplete","CCShippingPreference","shippingReference","setShippingReference","CCReferLine","referLine","setReferLine","CCShipVia","shipVia","setShipVia","needBylegend","Legend","shippingPreferencelegend","referLinelegend","shipVialegend","legend","removeValue","sv","onSelectShipVia","ShippingOptionListItem","consignmentId","shippingOption","renderLabel","StaticShippingOption","displayAdditionalInformation","method","ChecklistItem","inputName","shippingOptions","selectedShippingOptionId","onSelectedOption","selectDefaultShippingOptions","selectShippingOption","getConsignments","selectedShippingOption","availableShippingOptions","recommendedOption","getRecommendedShippingOption","singleShippingOption","defaultShippingOption","subscribeToConsignments","unsubscribe","isMultiShippingMode","shouldShowShippingOptions","methodId","renderConsignment","renderNoShippingOptions","StaticConsignmentItemList","shippingOptionIds","subscribeToConsignmentsSelector","subscribe","subscriber","isLoadingSelector","_","isLoadingShippingOptions","isSelectingShippingOption","isUpdatingConsignment","isCreatingConsignments","isUpdatingAddress","sortConsignments","unsortedConsignments","shippableItems","consignmentsOrder","withCheckout","checkoutService","checkoutState","getCart","getConfig","getCustomer","getCheckout","customer","config","invalidShippingMessage","checkoutSettings","selectConsignmentShippingOption","cartHasChanged","shouldDisableSubmit","onContinueButton","Alert","ShippingOptions","handleCloseErrorModal","createCustomerAddressError","handleSaveAddress","createCustomerAddress","itemAddingAddress","itemKey","handleCloseAddAddressForm","assignItem","onUnhandledError","isValidAddress","syncItems","hasSelectedShippingOptions","currentItems","updatedItemIndex","cartItemIds","updatedConsignment","newId","matchingCartItemIds","findNewItemId","updateShippableItems","findIndex","getDerivedStateFromProps","isGuest","onSignIn","onCreateAccount","shouldShowOrderComments","TranslatedLink","ErrorModal","error","onClose","shouldShowErrorCode","hasUnassignedLineItems","onSubmit","orderComment","enableReinitialize","onFieldChange","initialize","deinitialize","containerId","tabIndex","formFieldName","handleAutocompleteToggle","onAddressSelect","hasAddresses","buttonId","customFormFields","shouldShowCustomFormFields","padding","size","Tiny","Secondary","hasRequestedShippingOptions","isShippingStepPending","setSubmitted","initializeShipping","defaultOptions","amazon","container","onError","amazonpay","editAddressButtonId","SHIPPING_ADDRESS_FIELDS","SHIPPING_AUTOSAVE_DELAY","isResettingAddress","isUpdatingShippingData","isValid","handleFieldChange","setTimeout","isShippingField","updateAddressWithFormData","handleAddressSelect","updateAddress","setValues","CCSelectShippingAddressId","CCSelectedAddress","mapAddressToFormValues","shippingMethod","addrValue","billingSameAsShipping","err","deleteConsignments","debouncedUpdateAddress","includeShippingOptions","include","addressForm","updatedShippingAddress","contextType","isInitialValid","isValidSync","getCustomFormFieldsValidationSchema","customerMessage","isBillingSameAsShipping","onMultiShippingSubmit","onSingleShippingSubmit","shouldShowAddAddressInCheckout","signOut","onMultiShippingChange","shouldShowMultiShipping","handleMultiShippingModeSwitch","onToggleMultiShipping","updateShippingAddress","isInitializing","handleSingleShippingSubmit","addressValues","updateCheckout","updateBillingAddress","navigateNextStep","billingAddress","localBillingSameAsShipping","promises","hasRemoteBilling","all","some","unassignItem","location","handleMultiShippingSubmit","ccAddress","myShippingAddress","loadShippingAddressFields","loadShippingOptions","onReady","CCAddresses","componentWillReceiveProps","initializeShippingMethod","deinitializeShippingMethod","shippingFormProps","unmountContentWhenLoading","deleteConsignmentsSelector","deleteConsignment","getShippingAddress","mapToShippingProps","getBillingAddress","getShippingAddressFields","getShippingCountries","isCreatingCustomerAddress","isLoadingShippingCountries","isUpdatingBillingAddress","isUpdatingCheckout","enableOrderComments","features","hasMultiShippingEnabled","shippableItemsCount","assignItemsToAddress","deinitializeShipping","signOutCustomer","unassignItemsToAddress"],"mappings":"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","file":"shipping-51567fcc.js","sourcesContent":["import classNames from 'classnames';\nimport React, { forwardRef, ReactNode, Ref } from 'react';\n\nimport Input, { InputProps } from './Input';\nimport Label from './Label';\n\nexport interface CheckboxInputProps extends InputProps {\n    additionalClassName?: string;\n    label: ReactNode;\n    value: string;\n    checked: boolean;\n}\n\nconst CheckboxInput = forwardRef((\n    {\n        additionalClassName,\n        label,\n        id,\n        ...rest\n    }: CheckboxInputProps,\n    ref: Ref<HTMLInputElement>\n) => (\n    <>\n        <Input\n            { ...rest }\n            className={ classNames(\n                'form-checkbox',\n                'optimizedCheckout-form-checkbox',\n                additionalClassName\n            ) }\n            id={ id }\n            ref={ ref }\n            type=\"checkbox\"\n        />\n        <Label htmlFor={ id }>\n            { label }\n        </Label>\n    </>\n));\n\nexport default CheckboxInput;\n","import classNames from 'classnames';\nimport React, { forwardRef, ReactNode, Ref } from 'react';\n\nimport Input, { InputProps } from './Input';\nimport Label from './Label';\n\nexport interface RadioInputProps extends InputProps {\n    additionalClassName?: string;\n    label: ReactNode;\n    value: string;\n    checked: boolean;\n}\n\nconst RadioInput = forwardRef((\n    {\n        additionalClassName,\n        label,\n        value,\n        checked,\n        id,\n        ...rest\n    }: RadioInputProps,\n    ref: Ref<HTMLInputElement>\n) => (\n    <>\n        <Input\n            { ...rest }\n            checked={ checked }\n            className={ classNames(\n                'form-radio',\n                'optimizedCheckout-form-radio',\n                additionalClassName\n            ) }\n            id={ id }\n            ref={ ref }\n            type=\"radio\"\n            value={ value }\n        />\n        <Label htmlFor={ id }>\n            { label }\n        </Label>\n    </>\n));\n\nexport default RadioInput;\n","import { noop } from 'lodash';\nimport { createContext } from 'react';\n\nexport interface AccordionContextProps {\n    selectedItemId?: string;\n    onToggle(id: string): void;\n}\n\nconst AccordionContext = createContext<AccordionContextProps>({ onToggle: noop });\n\nexport default AccordionContext;\n","import classNames from 'classnames';\nimport React, { forwardRef, Ref, TextareaHTMLAttributes } from 'react';\n\nexport interface TextAreaProps extends TextareaHTMLAttributes<HTMLTextAreaElement> {\n    additionalClassName?: string;\n    testId?: string;\n}\n\nconst TextArea = forwardRef((\n    { additionalClassName, testId, className, ...rest }: TextAreaProps,\n    ref: Ref<HTMLTextAreaElement>\n) => (\n    <textarea\n        { ...rest }\n        className={ className || classNames(\n            'form-input',\n            'optimizedCheckout-form-input',\n            additionalClassName\n        ) }\n        data-test={ testId }\n        ref={ ref }\n    />\n));\n\nexport default TextArea;\n","import { FieldProps } from 'formik';\nimport { kebabCase } from 'lodash';\nimport React, { memo, useCallback, Fragment, FunctionComponent, ReactNode } from 'react';\n\nimport BasicFormField from './BasicFormField';\nimport CheckboxInput from './CheckboxInput';\nimport FormFieldError from './FormFieldError';\n\nexport interface CheckboxFormFieldProps {\n    additionalClassName?: string;\n    disabled?: boolean;\n    name: string;\n    id?: string;\n    labelContent: ReactNode;\n    onChange?(isChecked: boolean): void;\n}\n\nconst CheckboxFormField: FunctionComponent<CheckboxFormFieldProps> = ({\n    additionalClassName,\n    disabled = false,\n    labelContent,\n    onChange,\n    name,\n    id,\n}) => {\n    const renderField = useCallback(({ field }: FieldProps) => (\n        <Fragment>\n            { <CheckboxInput\n                { ...field }\n                checked={ !!field.value }\n                disabled={ disabled }\n                id={ id || field.name }\n                label={ labelContent }\n            /> }\n\n            <FormFieldError\n                name={ name }\n                testId={ `${kebabCase(name)}-field-error-message` }\n            />\n        </Fragment>\n    ), [\n        disabled,\n        id,\n        labelContent,\n        name,\n    ]);\n\n    return <BasicFormField\n        additionalClassName={ additionalClassName }\n        name={ name }\n        onChange={ onChange }\n        render={ renderField }\n    />;\n};\n\nexport default memo(CheckboxFormField);\n","import { Cart } from '@bigcommerce/checkout-sdk';\n\nimport getLineItemsCount from './getLineItemsCount';\n\nexport default function getShippableItemsCount(cart: Cart): number {\n    return getLineItemsCount(cart.lineItems.physicalItems.filter(item => !item.addedByPromotion));\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\n\nimport AccordionContext from './AccordionContext';\n\nexport interface AccordionProps {\n    children: ReactNode;\n    className?: string;\n    defaultSelectedItemId?: string;\n    isDisabled?: boolean;\n    onSelect?(id: string): void;\n}\n\nexport interface AccordionState {\n    selectedItemId?: string;\n}\n\nexport default class Accordion extends Component<AccordionProps, AccordionState> {\n    state: AccordionState = {};\n\n    private getContextValue = memoizeOne(selectedItemId => {\n        return {\n            onToggle: this.handleToggleItem,\n            selectedItemId,\n        };\n    });\n\n    render(): ReactNode {\n        const {\n            children,\n            className = 'accordion',\n            defaultSelectedItemId,\n        } = this.props;\n\n        const { selectedItemId = defaultSelectedItemId } = this.state;\n\n        return (\n            <AccordionContext.Provider value={ this.getContextValue(selectedItemId) }>\n                <ul className={ className }>\n                    { children }\n                </ul>\n            </AccordionContext.Provider>\n        );\n    }\n\n    private handleToggleItem: (id: string) => void = id => {\n        const { isDisabled, onSelect = noop } = this.props;\n\n        if (isDisabled) {\n            return;\n        }\n\n        this.setState({ selectedItemId: id });\n        onSelect(id);\n    };\n}\n","import { noop } from 'lodash';\nimport React, { createContext, memo, useCallback, useMemo, FunctionComponent, ReactNode } from 'react';\n\nimport { connectFormik, ConnectFormikProps } from '../../common/form';\nimport { Accordion } from '../accordion';\n\nexport interface ChecklistProps {\n    children: ReactNode;\n    defaultSelectedItemId?: string;\n    isDisabled?: boolean;\n    name: string;\n    onSelect?(value: string): void;\n}\n\nexport interface ChecklistContextProps {\n    name: string;\n}\n\nexport const ChecklistContext = createContext<ChecklistContextProps | undefined>(undefined);\n\nconst Checklist: FunctionComponent<\n    ChecklistProps &\n    ConnectFormikProps<{ [key: string]: string }>\n> = ({\n    formik: { setFieldValue },\n    name,\n    onSelect = noop,\n    ...props\n}) => {\n    const handleSelect = useCallback((value: string) => {\n        setFieldValue(name, value);\n        onSelect(value);\n    }, [\n        name,\n        onSelect,\n        setFieldValue,\n    ]);\n\n    const contextValue = useMemo(() => ({ name }), [name]);\n\n    return (\n        <ChecklistContext.Provider value={ contextValue }>\n            <Accordion\n                { ...props }\n                className=\"form-checklist optimizedCheckout-form-checklist\"\n                onSelect={ handleSelect }\n            />\n        </ChecklistContext.Provider>\n    );\n};\n\nexport default connectFormik(memo(Checklist));\n","import { forIn, isDate, padStart } from 'lodash';\n\nexport default function mapCustomFormFieldsFromFormValues(\n    customFieldsObject: { [id: string]: any }\n): Array<{fieldId: string; fieldValue: string}> {\n    const customFields: Array<{fieldId: string; fieldValue: string}> = [];\n    forIn(customFieldsObject, (value, key) => {\n        let fieldValue: string;\n\n        if (isDate(value)) {\n            const padMonth = padStart((value.getMonth() + 1).toString(), 2, '0');\n            const padDay = padStart((value.getDate()).toString(), 2, '0');\n            fieldValue = `${value.getFullYear()}-${padMonth}-${padDay}`;\n        } else {\n            fieldValue = value;\n        }\n\n        customFields.push({\n            fieldId: key,\n            fieldValue,\n        });\n    });\n\n    return customFields;\n}\n","import { Placement } from 'popper.js';\nimport React, { Component, MouseEventHandler, ReactNode } from 'react';\nimport { Manager, Popper, Reference } from 'react-popper';\n\nexport interface DropdownTriggerProps {\n    placement?: Placement;\n    dropdown: ReactNode;\n}\n\nexport interface DropdownTriggerState {\n    shouldShow: boolean;\n}\n\nexport default class DropdownTrigger extends Component<DropdownTriggerProps, DropdownTriggerState> {\n    static defaultProps = {\n        placement: 'bottom-start',\n    };\n\n    state: Readonly<DropdownTriggerState> = {\n        shouldShow: false,\n    };\n\n    componentWillUnmount(): void {\n        document.removeEventListener('click', this.handleClose);\n    }\n\n    render() {\n        const { children, placement, dropdown } = this.props;\n        const { shouldShow } = this.state;\n\n        return (\n            <Manager>\n                <Reference>\n                    { ({ ref }) => (\n                        <div\n                            className=\"dropdownTrigger\"\n                            onClick={ this.handleClick }\n                            ref={ ref }\n                        >\n                            { children }\n                        </div>\n                    ) }\n                </Reference>\n\n                <Popper\n                    modifiers={ {\n                        hide: { enabled: false },\n                        flip: { enabled: false },\n                        preventOverflow: { enabled: false },\n                    } }\n                    placement={ placement }\n                >\n                    { ({ ref, style }) => !shouldShow ? null : (\n                        <div\n                            className=\"dropdownMenu\"\n                            ref={ ref }\n                            style={ {\n                                ...style,\n                                width: '100%',\n                                zIndex: 1,\n                            } }\n                        >\n                            { dropdown }\n                        </div>\n                    ) }\n                </Popper>\n            </Manager>\n        );\n    }\n\n    private handleClick: MouseEventHandler<HTMLElement> = event => {\n        const { shouldShow } = this.state;\n\n        if (shouldShow) {\n            this.handleClose(event.nativeEvent);\n        } else {\n            this.handleOpen(event.nativeEvent);\n        }\n    };\n\n    private handleOpen: (event: MouseEvent) => void = () => {\n        const { shouldShow } = this.state;\n\n        if (shouldShow) {\n            return;\n        }\n\n        this.setState({ shouldShow: true }, () => {\n            document.addEventListener('click', this.handleClose);\n        });\n    };\n\n    private handleClose: (event: MouseEvent) => void = () => {\n        const { shouldShow } = this.state;\n\n        if (!shouldShow) {\n            return;\n        }\n\n        this.setState({ shouldShow: false }, () => {\n            document.removeEventListener('click', this.handleClose);\n        });\n    };\n}\n","import { createInjectHoc, InjectHoc } from '../common/hoc';\n\nimport LocaleContext from './LocaleContext';\n\nexport interface WithDateProps {\n    date: {\n        inputFormat: string;\n    };\n}\n\nconst withDate: InjectHoc<WithDateProps> = createInjectHoc(LocaleContext, {\n    displayNamePrefix: 'withDate',\n    pickProps: (value, key) => key === 'date' && !!value,\n});\n\nexport default withDate;\n","export default function parseAnchor(text: string): string[] {\n    const div = document.createElement('div');\n    div.innerHTML = text;\n\n    const anchor = div.querySelector('a');\n\n    if (!anchor) {\n        return [];\n    }\n\n    const anchorSiblings = div.innerHTML.split(anchor.outerHTML);\n\n    return [ anchorSiblings[0], anchor.text, anchorSiblings[1] ];\n}\n","import { AddressKeyMap } from './address';\n\nexport const ADDRESS_FIELD_IDS: AddressKeyMap = {\n    address1: 'addressLine1',\n    address2: 'addressLine2',\n    postalCode: 'postCode',\n    stateOrProvince: 'province',\n    stateOrProvinceCode: 'provinceCode',\n};\n\nexport function getAddressFormFieldLegacyName(name: string): string {\n    return `${ADDRESS_FIELD_IDS[name] || name}`;\n}\n\nexport function getAddressFormFieldInputId(name: string): string {\n    return `${getAddressFormFieldLegacyName(name)}Input`;\n}\nexport function getAddressFormFieldLabelId(name: string): string {\n    return `${getAddressFormFieldLegacyName(name)}Label`;\n}\n","import { GoogleAddressFieldType } from './googleAutocompleteTypes';\n\nexport default class AddressSelector {\n    protected _address: google.maps.GeocoderAddressComponent[] | undefined;\n    protected _name: string;\n\n    constructor(\n        googlePlace: google.maps.places.PlaceResult\n    ) {\n        const { address_components, name } = googlePlace;\n\n        this._name = name;\n        this._address = address_components;\n    }\n\n    getState(): string {\n        return this._get('administrative_area_level_1', 'short_name');\n    }\n\n    getStreet(): string {\n        return this._name;\n    }\n\n    getStreet2(): string {\n        return '';\n    }\n\n    getCity(): string {\n        return this._get('postal_town', 'long_name') ||\n            this._get('locality', 'long_name') ||\n            this._get('neighborhood', 'short_name');\n    }\n\n    getCountry(): string {\n        return this._get('country', 'short_name');\n    }\n\n    getPostCode(): string {\n        return this._get('postal_code', 'short_name');\n    }\n\n    protected _get(\n        type: GoogleAddressFieldType,\n        access: Exclude<keyof google.maps.GeocoderAddressComponent, 'types'>\n    ): string {\n        const element = this._address && this._address.find(field => field.types.indexOf(type) !== -1);\n\n        if (element) {\n            return element[access];\n        }\n\n        return '';\n    }\n}\n","import AddressSelector from './AddressSelector';\n\nexport default class AddressSelectorUK extends AddressSelector {\n    getState(): string {\n        return this._get('administrative_area_level_2', 'long_name');\n    }\n\n    getStreet2(): string {\n        return this._get('locality', 'long_name');\n    }\n}\n","import AddressSelector from './AddressSelector';\nimport AddressSelectorUK from './AddressSelectorUk';\n\nexport default class AddressSelectorFactory {\n    static create(autocompleteData: google.maps.places.PlaceResult): AddressSelector {\n        const addressSelector = new AddressSelector(autocompleteData);\n\n        switch (addressSelector.getCountry()) {\n        case 'GB':\n            return new AddressSelectorUK(autocompleteData);\n        }\n\n        return addressSelector;\n    }\n}\n","import React, { FunctionComponent } from 'react';\n\nimport './Popover.scss';\n\nexport interface PopoverProps {\n    children: React.ReactNode;\n}\n\nconst Popover: FunctionComponent<PopoverProps> = ({ children }) => {\n    return (\n        <div className=\"popover\">\n            { children }\n        </div>\n    );\n};\n\nexport default Popover;\n","import React, { memo, FunctionComponent } from 'react';\n\nimport './PopoverList.scss';\n\nexport interface PopoverListProps {\n    menuProps?: any;\n    highlightedIndex?: number;\n    getItemProps?: any;\n    items: PopoverListItem[];\n    testId?: string;\n}\n\nexport interface PopoverListItem {\n    id: string;\n    content: React.ReactChild[] | React.ReactChild;\n}\n\nconst PopoverList: FunctionComponent<PopoverListProps> = ({\n    highlightedIndex = -1,\n    testId,\n    getItemProps = (props: any) => props,\n    menuProps = {},\n    items,\n}) => {\n    if (!items || !items.length) {\n        return null;\n    }\n\n    return (\n        <ul\n            className=\"popoverList\"\n            data-test={ testId } { ...menuProps }\n        >\n            { items\n                .map((item, index) => (\n                    <li\n                        className={ getItemClassName(highlightedIndex, index) }\n                        data-test={ testId && `${testId}-item` }\n                        { ...getItemProps({\n                            key: item.id,\n                            index,\n                            item,\n                        }) }\n                        key={ index }\n                    >\n                        { item.content }\n                    </li>\n                )) }\n        </ul>\n    );\n};\n\nfunction getItemClassName(highlightedIndex: number, index: number): string {\n    const classes = ['popoverList-item'];\n\n    if (highlightedIndex === index) {\n        classes.push('is-active');\n    }\n\n    return classes.join(' ');\n}\n\nexport default memo(PopoverList);\n","import GoogleAutocompleteScriptLoader from './GoogleAutocompleteScriptLoader';\n\nlet instance: GoogleAutocompleteScriptLoader;\n\nexport default function getGoogleAutocompleteScriptLoader(): GoogleAutocompleteScriptLoader {\n    if (!instance) {\n        instance = new GoogleAutocompleteScriptLoader();\n    }\n\n    return instance;\n}\n","import Downshift, { DownshiftState, StateChangeOptions } from 'downshift';\nimport { isNumber, noop } from 'lodash';\nimport React, { Fragment, PureComponent, ReactChild, ReactNode } from 'react';\n\nimport { Popover, PopoverList, PopoverListItem } from '../popover';\n\nimport AutocompleteItem from './autocomplete-item';\n\nexport interface AutocompleteProps {\n    initialValue?: string;\n    initialHighlightedIndex?: number;\n    children?: ReactNode;\n    items: AutocompleteItem[];\n    inputProps?: any;\n    listTestId?: string;\n    onToggleOpen?(state: { inputValue: string; isOpen: boolean }): void;\n    onSelect?(item: AutocompleteItem): void;\n    onChange?(value: string, isOpen: boolean): void;\n}\n\nclass Autocomplete extends PureComponent<AutocompleteProps> {\n    render(): ReactNode {\n        const {\n            inputProps,\n            initialValue,\n            initialHighlightedIndex,\n            items,\n            children,\n            onSelect,\n            listTestId,\n        } = this.props;\n\n        return (\n            <Downshift\n                defaultHighlightedIndex={ 0 }\n                initialHighlightedIndex={ initialHighlightedIndex }\n                initialInputValue={ initialValue }\n                itemToString={ this.itemToString }\n                labelId={ inputProps && inputProps['aria-labelledby'] ? inputProps['aria-labelledby'] : null }\n                onChange={ onSelect }\n                onStateChange={ this.handleStateChange }\n                stateReducer={ this.stateReducer }\n            >\n                { ({\n                    isOpen,\n                    getInputProps,\n                    getMenuProps,\n                    getItemProps,\n                    highlightedIndex,\n                }) => (\n                    <div>\n                        <input\n                            { ...getInputProps() }\n                            { ...inputProps }\n                        />\n                        { isOpen && !!items.length &&\n                            <Popover>\n                                <PopoverList\n                                    getItemProps={ getItemProps }\n                                    highlightedIndex={ isNumber(highlightedIndex) ? highlightedIndex : -1 }\n                                    items={ items.map(item => this.toPopoverItem(item)) }\n                                    menuProps={ getMenuProps() }\n                                    testId={ listTestId }\n                                />\n                                { children }\n                            </Popover> }\n                    </div>\n                ) }\n            </Downshift>\n        );\n    }\n\n    private toPopoverItem(item: AutocompleteItem): PopoverListItem {\n        return {\n            ...item,\n            content: this.highlightItem(item),\n        };\n    }\n\n    private highlightItem(item: AutocompleteItem): ReactChild[] | ReactChild {\n        if (!item.highlightedSlices || !item.highlightedSlices.length) {\n            return item.label;\n        }\n\n        let lastIndex: number = 0;\n        let key = 0;\n\n        return item.highlightedSlices.reduce((node, slice, i) => {\n            const { label } = item;\n            const { offset, length } = slice;\n            const notHighlightedLength = offset - lastIndex;\n\n            if (notHighlightedLength) {\n                node.push(<Fragment key={ key }>\n                    { label.substr(lastIndex, notHighlightedLength) }\n                </Fragment>);\n                key += 1;\n            }\n\n            lastIndex  = offset + length;\n\n            node.push(<strong key={ key }>{ label.substr(offset, length) }</strong>);\n            key += 1;\n\n            if (i === (item.highlightedSlices || []).length - 1) {\n                node.push(<Fragment key={ key }>\n                    { label.substr(lastIndex) }\n                </Fragment>);\n                key += 1;\n            }\n\n            return node;\n        }, [] as ReactChild[]);\n    }\n\n    private itemToString(item?: AutocompleteItem): string {\n        return item && item.value || '';\n    }\n\n    private stateReducer: (\n        state: DownshiftState<AutocompleteItem>,\n        changes: StateChangeOptions<AutocompleteItem>\n    ) => Partial<StateChangeOptions<AutocompleteItem>> = (state, changes) => {\n        const { onChange } = this.props;\n\n        switch (changes.type) {\n        case Downshift.stateChangeTypes.blurInput:\n        case Downshift.stateChangeTypes.blurButton:\n        case Downshift.stateChangeTypes.mouseUp:\n        case Downshift.stateChangeTypes.touchEnd:\n            return {\n                ...changes,\n                inputValue: state.inputValue,\n            };\n\n        case Downshift.stateChangeTypes.changeInput:\n            if (changes.inputValue !== state.inputValue && onChange) {\n                onChange(changes.inputValue || '', state.isOpen);\n            }\n\n            return changes;\n\n        case Downshift.stateChangeTypes.keyDownEnter:\n            return changes;\n\n        default:\n            return changes;\n        }\n        };\n\n    private handleStateChange = ({ isOpen, inputValue }: StateChangeOptions<string>) => {\n        const { onToggleOpen = noop } = this.props;\n\n        if (isOpen !== undefined) {\n            onToggleOpen({ isOpen, inputValue: inputValue || '' });\n        }\n    };\n}\n\nexport default Autocomplete;\n","import { getScriptLoader, ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { GoogleAutocompleteWindow, GoogleMapsSdk } from './googleAutocompleteTypes';\n\nexport default class GoogleAutocompleteScriptLoader {\n    private _scriptLoader: ScriptLoader;\n    private _googleAutoComplete?: Promise<GoogleMapsSdk>;\n\n    constructor() {\n        this._scriptLoader = getScriptLoader();\n    }\n\n    loadMapsSdk(apiKey: string): Promise<GoogleMapsSdk> {\n        if (this._googleAutoComplete) {\n            return this._googleAutoComplete;\n        }\n\n        this._googleAutoComplete = new Promise((resolve, reject) => {\n            const callbackName = 'initAutoComplete';\n            const params = [\n                'language=en',\n                `key=${apiKey}`,\n                'libraries=places',\n                `callback=${callbackName}`,\n            ].join('&');\n\n            (window as GoogleCallbackWindow)[callbackName] = () => {\n                if (isAutocompleteWindow(window)) {\n                    resolve(window.google.maps);\n                }\n\n                reject();\n            };\n\n            this._scriptLoader.loadScript(`//maps.googleapis.com/maps/api/js?${params}`)\n                .catch(e => {\n                    this._googleAutoComplete = undefined;\n                    throw e;\n                });\n        });\n\n        return this._googleAutoComplete;\n    }\n}\n\nfunction isAutocompleteWindow(window: Window): window is GoogleAutocompleteWindow {\n    const autocompleteWindow = window as GoogleAutocompleteWindow;\n\n    return Boolean(autocompleteWindow.google &&\n        autocompleteWindow.google.maps &&\n        autocompleteWindow.google.maps.places);\n}\n\nexport interface GoogleCallbackWindow extends Window {\n    initAutoComplete?(): void;\n}\n","import getGoogleAutocompleteScriptLoader from './getGoogleAutocompleteScriptLoader';\nimport GoogleAutocompleteScriptLoader from './GoogleAutocompleteScriptLoader';\n\nexport default class GoogleAutocompleteService {\n    private _autocompletePromise?: Promise<google.maps.places.AutocompleteService>;\n    private _placesPromise?: Promise<google.maps.places.PlacesService>;\n\n    constructor(\n        private _apiKey: string,\n        private _scriptLoader: GoogleAutocompleteScriptLoader = getGoogleAutocompleteScriptLoader()\n    ) {}\n\n    getAutocompleteService(): Promise<google.maps.places.AutocompleteService> {\n        if (!this._autocompletePromise) {\n            this._autocompletePromise = this._scriptLoader.loadMapsSdk(this._apiKey)\n                .then(googleMapsSdk => {\n                    if (!googleMapsSdk.places.AutocompleteService) {\n                        throw new Error('`AutocompleteService` is undefined');\n                    }\n\n                    return new googleMapsSdk.places.AutocompleteService();\n                });\n        }\n\n        return this._autocompletePromise;\n    }\n\n    getPlacesServices(): Promise<google.maps.places.PlacesService> {\n        const node = document.createElement('div');\n\n        if (!this._placesPromise) {\n            this._placesPromise = this._scriptLoader.loadMapsSdk(this._apiKey)\n                .then(googleMapsSdk => {\n                    if (!googleMapsSdk.places.PlacesService) {\n                        throw new Error('`PlacesService` is undefined');\n                    }\n\n                    return new googleMapsSdk.places.PlacesService(node);\n                });\n        }\n\n        return this._placesPromise;\n    }\n}\n","import { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { Autocomplete, AutocompleteItem } from '../../ui/autocomplete';\n\nimport { GoogleAutocompleteOptionTypes } from './googleAutocompleteTypes';\nimport './GoogleAutocomplete.scss';\nimport GoogleAutocompleteService from './GoogleAutocompleteService';\n\ninterface GoogleAutocompleteProps {\n    initialValue?: string;\n    componentRestrictions?: google.maps.places.ComponentRestrictions;\n    fields?: string[];\n    apiKey: string;\n    nextElement?: HTMLElement;\n    inputProps?: any;\n    isAutocompleteEnabled?: boolean;\n    types?: GoogleAutocompleteOptionTypes[];\n    onSelect?(place: google.maps.places.PlaceResult, item: AutocompleteItem): void;\n    onToggleOpen?(state: { inputValue: string; isOpen: boolean }): void;\n    onChange?(value: string, isOpen: boolean): void;\n}\n\ninterface GoogleAutocompleteState {\n    items: AutocompleteItem[];\n    autoComplete: string;\n}\n\nclass GoogleAutocomplete extends PureComponent<GoogleAutocompleteProps, GoogleAutocompleteState> {\n    googleAutocompleteService: GoogleAutocompleteService;\n\n    constructor(props: GoogleAutocompleteProps) {\n        super(props);\n        this.googleAutocompleteService = new GoogleAutocompleteService(props.apiKey);\n        this.state = {\n            items: [],\n            autoComplete: 'off',\n        };\n    }\n\n    render(): ReactNode {\n        const {\n            initialValue,\n            onToggleOpen = noop,\n            inputProps = {},\n        } = this.props;\n\n        const {\n            autoComplete,\n            items,\n        } = this.state;\n\n        return (\n            <Autocomplete\n                initialHighlightedIndex={ 0 }\n                initialValue={ initialValue }\n                inputProps={ {\n                    ...inputProps,\n                    autoComplete,\n                } }\n                items={ items }\n                listTestId=\"address-autocomplete-suggestions\"\n                onChange={ this.onChange }\n                onSelect={ this.onSelect }\n                onToggleOpen={ onToggleOpen }\n            >\n                <div className=\"co-googleAutocomplete-footer\" />\n            </Autocomplete>\n        );\n    }\n\n    private onSelect: (item: AutocompleteItem) => void = item => {\n        const {\n            fields,\n            onSelect = noop,\n            nextElement,\n        } = this.props;\n\n        this.googleAutocompleteService.getPlacesServices().then(service => {\n            service.getDetails({\n                placeId: item.id,\n                fields: fields || ['address_components', 'name'],\n            }, result => {\n                if (nextElement) {\n                    nextElement.focus();\n                }\n\n                onSelect(result, item);\n            });\n        });\n    };\n\n    private onChange: (input: string) => void = input => {\n        const {\n            isAutocompleteEnabled,\n            onChange = noop,\n        } = this.props;\n\n        onChange(input, false);\n\n        if (!isAutocompleteEnabled) {\n            return this.resetAutocomplete();\n        }\n\n        this.setAutocomplete(input);\n        this.setItems(input);\n    };\n\n    private setItems(input: string): void {\n        if (!input) {\n            this.setState({ items: [] });\n\n            return;\n        }\n\n        const {\n            componentRestrictions,\n            types,\n        } = this.props;\n\n        this.googleAutocompleteService.getAutocompleteService().then(service => {\n            service.getPlacePredictions({\n                input,\n                types: types || ['geocode'],\n                componentRestrictions,\n            }, results =>\n                this.setState({ items: this.toAutocompleteItems(results) })\n            );\n        });\n    }\n\n    private resetAutocomplete(): void {\n        this.setState({\n            items: [],\n            autoComplete: 'off',\n        });\n    }\n\n    private setAutocomplete(input: string): void {\n        this.setState({\n            ...this.state,\n            autoComplete: input && input.length ? 'nope' : 'off',\n        });\n    }\n\n    private toAutocompleteItems(results?: google.maps.places.AutocompletePrediction[]): AutocompleteItem[] {\n        return (results || []).map(result => ({\n            label: result.description,\n            value: result.structured_formatting.main_text,\n            highlightedSlices: result.matched_substrings,\n            id: result.place_id,\n        }));\n    }\n}\n\nexport default GoogleAutocomplete;\n","import { FormField as FormFieldType } from '@bigcommerce/checkout-sdk';\nimport { FieldProps } from 'formik';\nimport React, { memo, useCallback, useMemo, FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../../locale';\nimport { AutocompleteItem } from '../../ui/autocomplete';\nimport { FormField, Label } from '../../ui/form';\nimport { getAddressFormFieldInputId, getAddressFormFieldLabelId } from '../getAddressFormFieldInputId';\n\nimport GoogleAutocomplete from './GoogleAutocomplete';\n\nexport interface GoogleAutocompleteFormFieldProps {\n    apiKey: string;\n    field: FormFieldType;\n    countryCode?: string;\n    supportedCountries: string[];\n    nextElement?: HTMLElement;\n    parentFieldName?: string;\n    onSelect(place: google.maps.places.PlaceResult, item: AutocompleteItem): void;\n    onToggleOpen?(state: { inputValue: string; isOpen: boolean }): void;\n    onChange(value: string, isOpen: boolean): void;\n}\n\nconst GoogleAutocompleteFormField: FunctionComponent<GoogleAutocompleteFormFieldProps>  = ({\n    field: {\n        default: placeholder,\n        name,\n    },\n    countryCode,\n    supportedCountries,\n    parentFieldName,\n    nextElement,\n    apiKey,\n    onSelect,\n    onChange,\n    onToggleOpen,\n}) => {\n    const fieldName = parentFieldName ? `${parentFieldName}.${name}` : name;\n\n    const labelContent = useMemo(() => (\n        <TranslatedString id=\"address.address_line_1_label\" />\n    ), []);\n\n    const labelId = getAddressFormFieldLabelId(name);\n\n    const inputProps = useMemo(() => ({\n        className: 'form-input optimizedCheckout-form-input',\n        id: getAddressFormFieldInputId(name),\n        'aria-labelledby': labelId,\n        placeholder,\n    }), [name, labelId, placeholder]);\n\n    const renderInput = useCallback(({ field }: FieldProps) => (\n        <GoogleAutocomplete\n            apiKey={ apiKey }\n            componentRestrictions={ countryCode ?\n                { country: countryCode } :\n                undefined }\n            initialValue={ field.value }\n            inputProps={ inputProps }\n            isAutocompleteEnabled={ countryCode ?\n                supportedCountries.indexOf(countryCode) > -1 :\n                false }\n            nextElement={ nextElement }\n            onChange={ onChange }\n            onSelect={ onSelect }\n            onToggleOpen={ onToggleOpen }\n        />\n    ), [\n        apiKey,\n        countryCode,\n        inputProps,\n        nextElement,\n        onChange,\n        onSelect,\n        onToggleOpen,\n        supportedCountries,\n    ]);\n\n    return (\n        <div className={ `dynamic-form-field dynamic-form-field--addressLineAutocomplete` }>\n            <FormField\n                input={ renderInput }\n                label={ <Label htmlFor={ inputProps.id } id={ labelId }>{ labelContent }</Label> }\n                name={ fieldName }\n            />\n        </div>\n    );\n};\n\nexport default memo(GoogleAutocompleteFormField);\n","import { Address, Country, FormField } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { forIn, noop } from 'lodash';\nimport React, { createRef, Component, ReactNode, RefObject } from 'react';\n\nimport { withLanguage, TranslatedString, WithLanguageProps } from '../locale';\nimport { AutocompleteItem } from '../ui/autocomplete';\nimport { CheckboxFormField, DynamicFormField, DynamicFormFieldType, Fieldset } from '../ui/form';\n\nimport { AddressKeyMap } from './address';\nimport { getAddressFormFieldInputId, getAddressFormFieldLegacyName } from './getAddressFormFieldInputId';\nimport { mapToAddress, GoogleAutocompleteFormField } from './googleAutocomplete';\nimport './AddressForm.scss';\n\nexport interface AddressFormProps {\n    fieldName?: string;\n    countryCode?: string;\n    countriesWithAutocomplete?: string[];\n    countries?: Country[];\n    formFields: FormField[];\n    googleMapsApiKey?: string;\n    shouldShowSaveAddress?: boolean;\n    onAutocompleteSelect?(address: Partial<Address>): void;\n    onAutocompleteToggle?(state: { inputValue: string; isOpen: boolean }): void;\n    onChange?(fieldName: string, value: string | string[]): void;\n    setFieldValue?(fieldName: string, value: string | string[]): void;\n}\n\nconst LABEL: AddressKeyMap = {\n    address1: 'address.address_line_1_label',\n    address2: 'address.address_line_2_label',\n    city: 'address.city_label',\n    company: 'address.company_name_label',\n    countryCode: 'address.country_label',\n    firstName: 'address.first_name_label',\n    lastName: 'address.last_name_label',\n    phone: 'address.phone_number_label',\n    postalCode: 'address.postal_code_label',\n    stateOrProvince: 'address.state_label',\n    stateOrProvinceCode: 'address.state_label',\n};\n\nconst AUTOCOMPLETE: AddressKeyMap = {\n    address1: 'address-line1',\n    address2: 'address-line2',\n    city: 'address-level2',\n    company: 'organization',\n    countryCode: 'country',\n    firstName: 'given-name',\n    lastName: 'family-name',\n    phone: 'tel',\n    postalCode: 'postal-code',\n    stateOrProvince: 'address-level1',\n    stateOrProvinceCode: 'address-level1',\n};\n\nconst PLACEHOLDER: AddressKeyMap = {\n    countryCode: 'address.select_country_action',\n    stateOrProvince: 'address.select_state_action',\n    stateOrProvinceCode: 'address.select_state_action',\n};\n\nconst AUTOCOMPLETE_FIELD_NAME = 'address1';\n\nclass AddressForm extends Component<AddressFormProps & WithLanguageProps> {\n    private containerRef: RefObject<HTMLElement> = createRef();\n    private nextElement?: HTMLElement | null;\n\n    private handleDynamicFormFieldChange: (name: string) => (value: string | string[]) => void = memoize(name => value => {\n        this.syncNonFormikValue(name, value);\n    });\n\n    componentDidMount(): void {\n        const { current } = this.containerRef;\n\n        if (current) {\n            this.nextElement = current.querySelector<HTMLElement>('[autocomplete=\"address-line2\"]');\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            formFields,\n            fieldName,\n            language,\n            countriesWithAutocomplete,\n            countryCode,\n            googleMapsApiKey,\n            onAutocompleteToggle,\n            shouldShowSaveAddress,\n        } = this.props;\n\n        return (<>\n            <Fieldset>\n                <div className=\"checkout-address\" ref={ this.containerRef as RefObject<HTMLDivElement> }>\n                    { formFields.map(field => {\n                        const addressFieldName = field.name;\n                        const translatedPlaceholderId = PLACEHOLDER[addressFieldName];\n\n                        if (addressFieldName === 'address1' && googleMapsApiKey && countriesWithAutocomplete) {\n                            return (\n                                <GoogleAutocompleteFormField\n                                    apiKey={ googleMapsApiKey }\n                                    countryCode={ countryCode }\n                                    field={ field }\n                                    key={ field.id }\n                                    nextElement={ this.nextElement || undefined }\n                                    onChange={ this.handleAutocompleteChange }\n                                    onSelect={ this.handleAutocompleteSelect }\n                                    onToggleOpen={ onAutocompleteToggle }\n                                    parentFieldName={ fieldName }\n                                    supportedCountries={ countriesWithAutocomplete }\n                                />\n                            );\n                        }\n\n                        return (\n                            <DynamicFormField\n                                autocomplete={ AUTOCOMPLETE[field.name] }\n                                extraClass={ `dynamic-form-field--${getAddressFormFieldLegacyName(addressFieldName)}` }\n                                field={ field }\n                                inputId={ getAddressFormFieldInputId(addressFieldName) }\n                                // stateOrProvince can sometimes be a dropdown or input, so relying on id is not sufficient\n                                key={ `${field.id}-${field.name}` }\n                                label={ field.custom ? field.label : <TranslatedString id={ LABEL[field.name] } /> }\n                                onChange={ this.handleDynamicFormFieldChange(addressFieldName) }\n                                parentFieldName={ field.custom ?\n                                    (fieldName ? `${fieldName}.customFields` : 'customFields') :\n                                    fieldName }\n                                placeholder={ field.default ? field.default : translatedPlaceholderId && language.translate(translatedPlaceholderId) }\n                            />\n                        );\n                    }) }\n                </div>\n            </Fieldset>\n            { shouldShowSaveAddress &&\n                <CheckboxFormField\n                    labelContent={ <TranslatedString id=\"address.save_in_addressbook\" /> }\n                    name={ fieldName ? `${fieldName}.shouldSaveAddress` : 'shouldSaveAddress' }\n                /> }\n        </>);\n    }\n\n    private handleAutocompleteChange: (value: string, isOpen: boolean) => void = (value, isOpen) => {\n        if (!isOpen) {\n            this.syncNonFormikValue(AUTOCOMPLETE_FIELD_NAME, value);\n        }\n    };\n\n    private handleAutocompleteSelect: (\n        place: google.maps.places.PlaceResult,\n        item: AutocompleteItem\n    ) => void = (place, { value: autocompleteValue }) => {\n        const {\n            countries,\n            setFieldValue = noop,\n            onChange = noop,\n        } = this.props;\n\n        const address = mapToAddress(place, countries);\n\n        forIn(address, (value, fieldName) => {\n            setFieldValue(fieldName, value as string);\n            onChange(fieldName, value as string);\n        });\n\n        if (autocompleteValue) {\n            this.syncNonFormikValue(AUTOCOMPLETE_FIELD_NAME, autocompleteValue);\n        }\n    };\n\n    // because autocomplete state is controlled by Downshift, we need to manually keep formik\n    // value in sync when autocomplete value changes\n    private syncNonFormikValue: (\n        fieldName: string,\n        value: string | string[]\n    ) => void = (fieldName, value) => {\n        const {\n            formFields,\n            setFieldValue = noop,\n            onChange = noop,\n        } = this.props;\n\n        const dateFormFieldNames = formFields\n            .filter(field => field.custom && field.fieldType === DynamicFormFieldType.date)\n            .map(field => field.name);\n\n        if (fieldName === AUTOCOMPLETE_FIELD_NAME || dateFormFieldNames.indexOf(fieldName) > -1) {\n            setFieldValue(fieldName, value);\n        }\n\n        onChange(fieldName, value);\n    };\n}\n\nexport default withLanguage(AddressForm);\n","import { Address, Country, Region } from '@bigcommerce/checkout-sdk';\n\nimport AddressSelectorFactory from './AddressSelectorFactory';\n\nexport default function mapToAddress(\n    autocompleteData: google.maps.places.PlaceResult,\n    countries: Country[] = []\n): Partial<Address> {\n    if (!autocompleteData || !autocompleteData.address_components) {\n        return {};\n    }\n\n    const accessor = AddressSelectorFactory.create(autocompleteData);\n    const state = accessor.getState();\n    const countryCode = accessor.getCountry();\n    const country = countries && countries.find(c => countryCode === c.code);\n    const street2 = accessor.getStreet2();\n\n    return {\n        address2: street2,\n        city: accessor.getCity(),\n        countryCode,\n        postalCode: accessor.getPostCode(),\n        ...state ? getState(state, country && country.subdivisions) : {},\n    };\n}\n\nfunction getState(\n    stateName: string,\n    states: Region[] = []\n): Partial<Address> {\n    const state = states.find(({ code, name }: Region) =>\n        code === stateName || name === stateName\n    );\n\n    if (!state) {\n        return {\n            stateOrProvince: !states.length ? stateName : '',\n            stateOrProvinceCode: '',\n        };\n    }\n\n    return {\n        stateOrProvince: state.name,\n        stateOrProvinceCode: state.code,\n    };\n}\n","import { FormFieldItem } from '@bigcommerce/checkout-sdk';\nimport { isDate, noop } from 'lodash';\nimport React, { memo, useCallback, FunctionComponent } from 'react';\nimport ReactDatePicker from 'react-datepicker';\n\nimport { withDate, WithDateProps } from '../../locale';\n\nimport CheckboxInput from './CheckboxInput';\nimport DynamicFormFieldType from './DynamicFormFieldType';\nimport { InputProps } from './Input';\nimport RadioInput from './RadioInput';\nimport TextArea from './TextArea';\nimport TextInput from './TextInput';\n\nexport interface DynamicInputProps extends InputProps {\n    id: string;\n    additionalClassName?: string;\n    value?: string | string[];\n    rows?: number;\n    fieldType?: DynamicFormFieldType;\n    options?: FormFieldItem[];\n}\n\nconst DynamicInput: FunctionComponent<DynamicInputProps & WithDateProps> = ({\n    additionalClassName,\n    date,\n    fieldType,\n    id,\n    name,\n    onChange = noop,\n    options,\n    placeholder,\n    value,\n    ...rest\n}) => {\n    const { inputFormat } = date;\n    const handleDateChange = useCallback((dateValue, event) => onChange({\n        ...event,\n        target: {\n            name,\n            value: dateValue,\n        },\n    }), [\n        onChange,\n        name,\n    ]);\n\n    switch (fieldType) {\n    case DynamicFormFieldType.dropdown:\n        return (\n            <select\n                { ...rest as any }\n                className=\"form-select optimizedCheckout-form-select\"\n                data-test={ `${id}-select` }\n                id={ id }\n                name={ name }\n                onChange={ onChange }\n                value={ value === null ? '' : value }\n            >\n                { placeholder &&\n                    <option value=\"\">\n                        { placeholder }\n                    </option> }\n                { options && options.map(({ label, value: optionValue }) =>\n                    <option\n                        key={ optionValue }\n                        value={ optionValue }\n                    >\n                        { label }\n                    </option>\n                ) }\n            </select>\n        );\n\n    case DynamicFormFieldType.radio:\n        if (!options || !options.length) {\n            return null;\n        }\n\n        return <>\n            { options.map(({ label, value: optionValue }) =>\n                <RadioInput\n                    { ...rest }\n                    checked={ optionValue === value }\n                    id={ `${id}-${optionValue}` }\n                    key={ optionValue }\n                    label={ label }\n                    name={ name }\n                    onChange={ onChange }\n                    testId={ `${id}-${optionValue}-radio` }\n                    value={ optionValue }\n                />) }\n        </>;\n\n    case DynamicFormFieldType.checkbox:\n        if (!options || !options.length) {\n            return null;\n        }\n\n        return <>\n            { options.map(({ label, value: optionValue }) =>\n                <CheckboxInput\n                    { ...rest }\n                    checked={ Array.isArray(value) ? value.includes(optionValue) : false }\n                    id={ `${id}-${optionValue}` }\n                    key={ optionValue }\n                    label={ label }\n                    name={ name }\n                    onChange={ onChange }\n                    testId={ `${id}-${optionValue}-checkbox` }\n                    value={ optionValue }\n                />) }\n        </>;\n\n    case DynamicFormFieldType.date:\n        return (\n            <ReactDatePicker\n                { ...rest as any }\n                autoComplete=\"off\"\n                // FIXME: we can avoid this by simply using onChangeRaw, but it's not being triggered properly\n                // https://github.com/Hacker0x01/react-datepicker/issues/1357\n                // onChangeRaw={ rest.onChange }\n                calendarClassName=\"optimizedCheckout-contentPrimary\"\n                className=\"form-input optimizedCheckout-form-input\"\n                dateFormat={ inputFormat }\n                maxDate={ rest.max ? new Date(`${rest.max}T00:00:00Z`) : undefined }\n                minDate={ rest.min ? new Date(`${rest.min}T00:00:00Z`) : undefined }\n                name={ name }\n                onChange={ handleDateChange }\n                placeholderText={ inputFormat.toUpperCase() }\n                popperClassName=\"optimizedCheckout-contentPrimary\"\n                selected={ isDate(value) ? value : undefined }\n            />\n        );\n\n    case DynamicFormFieldType.multiline:\n        return (\n            <TextArea\n                { ...rest as any }\n                id={ id }\n                name={ name }\n                onChange={ onChange }\n                testId={ `${id}-text` }\n                type={ fieldType }\n                value={ value }\n            />\n        );\n\n    default:\n        return (\n            <TextInput\n                { ...rest }\n                id={ id }\n                name={ name }\n                onChange={ onChange }\n                placeholder={ placeholder }\n                testId={ `${id}-${ fieldType === DynamicFormFieldType.password ?\n                    'password' :\n                    'text' }` }\n                type={ fieldType }\n                value={ value }\n            />\n        );\n    }\n};\n\nexport default memo(withDate(DynamicInput));\n","import React, { memo, useCallback, FunctionComponent, MouseEvent } from 'react';\n\nimport { TranslatedString } from '../../locale';\n\nimport './MultiCheckboxControl.scss';\n\nexport interface MultiCheckboxControlProps {\n    testId?: string;\n    onSelectedAll(): void;\n    onSelectedNone(): void;\n}\n\nconst MultiCheckboxControl: FunctionComponent<MultiCheckboxControlProps> = ({\n    testId,\n    onSelectedAll,\n    onSelectedNone,\n}) => {\n    const handleSelectAllClick = useCallback((event: MouseEvent) => {\n        event.preventDefault();\n        onSelectedAll();\n    }, [onSelectedAll]);\n\n    const handleSelectNoneClick = useCallback((event: MouseEvent) => {\n        event.preventDefault();\n        onSelectedNone();\n    }, [onSelectedNone]);\n\n    return <ul className=\"multiCheckbox--controls\">\n        <li className=\"multiCheckbox--control\">\n            <TranslatedString id=\"address.select\" />\n        </li>\n\n        <li className=\"multiCheckbox--control\">\n            <a\n                data-test={ `${testId}Checkbox-all-button` }\n                href=\"#\"\n                onClick={ handleSelectAllClick }\n            >\n                <TranslatedString id=\"address.select_all\" />\n            </a>\n        </li>\n\n        <li className=\"multiCheckbox--control\">\n            <a\n                data-test={ `${testId}Checkbox-none-button` }\n                href=\"#\"\n                onClick={ handleSelectNoneClick }\n            >\n                <TranslatedString id=\"address.select_none\" />\n            </a>\n        </li>\n    </ul>;\n};\n\nexport default memo(MultiCheckboxControl);\n","import { FormFieldItem } from '@bigcommerce/checkout-sdk';\nimport { getIn, FieldArray, FieldArrayRenderProps } from 'formik';\nimport { difference, kebabCase, noop, pick } from 'lodash';\nimport React, { memo, useCallback, ChangeEvent, FunctionComponent, ReactNode } from 'react';\n\nimport DynamicFormFieldType from './DynamicFormFieldType';\nimport DynamicInput from './DynamicInput';\nimport FormFieldContainer from './FormFieldContainer';\nimport FormFieldError from './FormFieldError';\nimport MultiCheckboxControl from './MultiCheckboxControl';\n\nexport interface CheckboxGroupFormFieldProps {\n    id: string;\n    label: ReactNode;\n    name: string;\n    options: FormFieldItem[];\n    onChange?(values: string[]): void;\n}\n\ntype MultiCheckboxFormFieldProps = (\n    CheckboxGroupFormFieldProps &\n    Pick<FieldArrayRenderProps, 'push' | 'remove' | 'pop' | 'form'>\n);\n\nconst MultiCheckboxFormField: FunctionComponent<MultiCheckboxFormFieldProps> = ({\n    form: { values, errors },\n    id,\n    label,\n    name,\n    onChange = noop,\n    options,\n    push,\n    remove,\n}) => {\n    const handleSelectAll = useCallback(() => {\n        const checkedValues: string[] = getIn(values, name) || [];\n\n        difference(options.map(({ value }) => value), checkedValues)\n            .forEach(val => push(val));\n\n        onChange(getIn(values, name));\n    }, [\n        name,\n        onChange,\n        options,\n        push,\n        values,\n    ]);\n\n    const handleSelectNone = useCallback(() => {\n        const checkedValues: string[] = getIn(values, name) || [];\n\n        checkedValues.forEach(() => remove(0));\n\n        onChange(getIn(values, name));\n    }, [\n        name,\n        onChange,\n        remove,\n        values,\n    ]);\n\n    const handleInputChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n        const checkedValues: string[] = getIn(values, name) || [];\n        const { value, checked } = event.target;\n\n        if (checked) {\n            push(value);\n        } else {\n            remove(checkedValues.indexOf(value));\n        }\n\n        onChange(getIn(values, name));\n    }, [\n        name,\n        onChange,\n        push,\n        remove,\n        values,\n    ]);\n\n    return <FormFieldContainer hasError={ getIn(errors, name) && getIn(errors, name).length }>\n        { label }\n\n        { options.length > 1 && <MultiCheckboxControl\n            onSelectedAll={ handleSelectAll }\n            onSelectedNone={ handleSelectNone }\n            testId={ id }\n        /> }\n\n        <DynamicInput\n            fieldType={ DynamicFormFieldType.checkbox }\n            id={ id }\n            name={ name }\n            onChange={ handleInputChange }\n            options={ options }\n            value={ getIn(values, name) || [] }\n        />\n\n        <FormFieldError\n            name={ name }\n            testId={ `${kebabCase(name)}-field-error-message` }\n        />\n    </FormFieldContainer>;\n};\n\nconst CheckboxGroupFormField: FunctionComponent<CheckboxGroupFormFieldProps> = ({\n    id,\n    label,\n    name,\n    onChange,\n    options,\n}) => {\n    const renderField = useCallback((renderProps: FieldArrayRenderProps) => (\n        <MultiCheckboxFormField\n            id={ id }\n            label={ label }\n            name={ name }\n            onChange={ onChange }\n            options={ options }\n            { ...pick(renderProps, [\n                'form',\n                'pop',\n                'push',\n                'remove',\n            ]) }\n        />\n    ), [\n        id,\n        label,\n        name,\n        onChange,\n        options,\n    ]);\n\n    return <FieldArray\n        name={ name }\n        render={ renderField }\n    />;\n};\n\nexport default memo(CheckboxGroupFormField);\n","import { FormField as FormFieldType } from '@bigcommerce/checkout-sdk';\nimport { FieldProps } from 'formik';\nimport React, { memo, useCallback, useMemo, FunctionComponent, ReactNode } from 'react';\n\nimport { TranslatedString } from '../../locale';\n\nimport CheckboxGroupFormField from './CheckboxGroupFormField';\nimport DynamicFormFieldType from './DynamicFormFieldType';\nimport DynamicInput from './DynamicInput';\nimport FormField from './FormField';\nimport Label from './Label';\n\nexport interface DynamicFormFieldOption {\n    code: string;\n    name: string;\n}\n\nexport interface DynamicFormFieldProps {\n    field: FormFieldType;\n    inputId?: string;\n    extraClass?: string;\n    autocomplete?: string;\n    parentFieldName?: string;\n    placeholder?: string;\n    label?: ReactNode;\n    onChange?(value: string | string[]): void;\n}\n\nconst DynamicFormField: FunctionComponent<DynamicFormFieldProps>  = ({\n    field: {\n        fieldType,\n        type,\n        secret,\n        name,\n        label: fieldLabel,\n        required,\n        options,\n        max,\n        min,\n        maxLength,\n    },\n    parentFieldName,\n    onChange,\n    placeholder,\n    inputId,\n    autocomplete,\n    label,\n    extraClass,\n}) => {\n    const fieldInputId = inputId || name;\n    const fieldName = parentFieldName ? `${parentFieldName}.${name}` : name;\n\n    const labelComponent = useMemo(() => (\n        <Label htmlFor={ fieldInputId }>\n            { label || fieldLabel }\n            { !required &&\n                <>\n                    { ' ' }\n                    <small className=\"optimizedCheckout-contentSecondary\">\n                        <TranslatedString id=\"common.optional_text\" />\n                    </small>\n                </> }\n        </Label>\n    ), [\n        fieldInputId,\n        fieldLabel,\n        required,\n        label,\n    ]);\n\n    const dynamicFormFieldType = useMemo((): DynamicFormFieldType => {\n        if (fieldType === 'text') {\n            if (type === 'integer') {\n                return DynamicFormFieldType.number;\n            }\n\n            return secret ?\n                DynamicFormFieldType.password :\n                DynamicFormFieldType.text;\n        }\n\n        return fieldType as DynamicFormFieldType;\n    }, [fieldType, type, secret]);\n\n    const renderInput = useCallback(({ field }: FieldProps<string>) => (\n        <DynamicInput\n            { ...field }\n            autoComplete={ autocomplete }\n            fieldType={ dynamicFormFieldType }\n            id={ fieldInputId }\n            max={ max }\n            maxLength={ maxLength || undefined }\n            min={ min }\n            options={ options && options.items }\n            placeholder={ placeholder || (options && options.helperLabel) }\n            rows={ options && (options as any).rows }\n        />\n    ), [\n        fieldInputId,\n        max,\n        maxLength,\n        min,\n        options,\n        placeholder,\n        dynamicFormFieldType,\n        autocomplete,\n    ]);\n\n    return (\n        <div className={ `dynamic-form-field ${extraClass}` }>\n            { fieldType === DynamicFormFieldType.checkbox ?\n                <CheckboxGroupFormField\n                    id={ fieldInputId }\n                    label={ labelComponent }\n                    name={ fieldName }\n                    onChange={ onChange }\n                    options={ (options && options.items) || [] }\n                /> :\n                <FormField\n                    input={ renderInput }\n                    label={ labelComponent }\n                    name={ fieldName }\n                    onChange={ onChange }\n                /> }\n        </div>\n    );\n};\n\nexport default memo(DynamicFormField);\n","import { Address } from '@bigcommerce/checkout-sdk';\n\nimport { mapCustomFormFieldsFromFormValues } from '../formFields';\n\nimport { AddressFormValues } from './mapAddressToFormValues';\n\nexport default function mapAddressFromFormValues(formValues: AddressFormValues): Address {\n    const { customFields, ...address } = formValues;\n    const shouldSaveAddress = formValues.shouldSaveAddress;\n\n    return {\n        ...address,\n        shouldSaveAddress,\n        customFields: mapCustomFormFieldsFromFormValues(customFields),\n    };\n}\n","import { Checkout, CheckoutPayment } from '@bigcommerce/checkout-sdk';\n\nimport { isGiftCertificatePayment } from '../giftCertificate';\n\nimport { isStoreCreditPayment } from './storeCredit';\n\nexport default function getPreselectedPayment(checkout: Checkout): CheckoutPayment | undefined {\n    const payments = checkout && checkout.payments ? checkout.payments : [];\n\n    return payments.find(payment =>\n        !isGiftCertificatePayment(payment)\n        && !isStoreCreditPayment(payment)\n        && !!payment.providerId\n    );\n}\n","import React, { FunctionComponent, MouseEventHandler } from 'react';\n\nimport { preventDefault } from '../common/dom';\nimport { parseAnchor } from '../common/utility';\n\nimport withLanguage, { WithLanguageProps } from './withLanguage';\nimport { TranslatedStringProps } from './TranslatedString';\n\nexport type TranslatedLinkProps = TranslatedStringProps & {\n    testId?: string;\n    onClick: MouseEventHandler;\n};\n\nconst TranslatedLink: FunctionComponent<TranslatedLinkProps & WithLanguageProps> = ({\n    data,\n    id,\n    language,\n    onClick,\n    testId,\n}) => {\n    const translatedString = language.translate(id, data);\n    const parsedString = parseAnchor(translatedString);\n\n    return parsedString.length ?\n        <>\n            { parsedString[0] }\n            <a\n                data-test={ testId }\n                href=\"#\"\n                onClick={ preventDefault(onClick) }\n            >\n                { parsedString[1] }\n            </a>\n            { parsedString[2] }\n        </> :\n        <>{ translatedString }</>;\n};\n\nexport default withLanguage(TranslatedLink);\n","import { connect } from 'formik';\nimport React, { memo, ComponentType, FunctionComponent } from 'react';\nimport shallowEqual from 'shallowequal';\n\nimport ConnectFormikProps from './ConnectFormikProps';\n\nexport default function connectFormik<\n    TProps extends ConnectFormikProps<TValues>,\n    TValues = any\n>(\n    OriginalComponent: ComponentType<TProps>\n): ComponentType<Omit<TProps, keyof ConnectFormikProps<TValues>>> {\n    const InnerComponent: FunctionComponent<TProps> = memo(\n        props => <OriginalComponent { ...props } />,\n        ({ formik: prevFormik, ...prevProps }, { formik: nextFormik, ...nextProps }) => (\n            shallowEqual(prevFormik, nextFormik) && shallowEqual(prevProps, nextProps)\n        )\n    );\n\n    const DecoratedComponent = connect<TProps, TValues>(InnerComponent) as ComponentType<Omit<TProps, keyof ConnectFormikProps<TValues>>>;\n\n    DecoratedComponent.displayName = `ConnectFormik(${OriginalComponent.displayName || OriginalComponent.name})`;\n\n    return DecoratedComponent;\n}\n","import classNames from 'classnames';\nimport React, { memo, useCallback, useContext, FunctionComponent, ReactNode } from 'react';\nimport { CSSTransition } from 'react-transition-group';\n\nimport AccordionContext from './AccordionContext';\n\nexport interface AccordionItemProps {\n    bodyClassName?: string;\n    children?: ReactNode;\n    className?: string;\n    classNameSelected?: string;\n    headerClassName?: string;\n    headerClassNameSelected?: string;\n    itemId: string;\n    headerContent(props: AccordionItemHeaderProps): ReactNode;\n}\n\nexport interface AccordionItemHeaderProps {\n    isSelected: boolean;\n    onToggle(id: string): void;\n}\n\nconst AccordionItem: FunctionComponent<AccordionItemProps> = ({\n    bodyClassName = 'accordion-item-body',\n    children,\n    className = 'accordion-item',\n    classNameSelected = 'accordion-item--selected',\n    headerClassName = 'accordion-item-header',\n    headerClassNameSelected = 'accordion-item-header--selected',\n    headerContent,\n    itemId,\n}) => {\n    const { onToggle, selectedItemId } = useContext(AccordionContext);\n    const isSelected = selectedItemId === itemId;\n\n    const transitionEndListener = useCallback((node, done) => {\n        node.addEventListener('transitionend', ({ target }: Event) => {\n            if (target === node) {\n                done();\n            }\n        });\n    }, []);\n\n    return (\n        <li className={ classNames(\n            className,\n            { [classNameSelected]: isSelected }\n        ) }\n        >\n            <div className={ classNames(\n                headerClassName,\n                { [headerClassNameSelected]: isSelected }\n            ) }\n            >\n                { headerContent({ isSelected, onToggle }) }\n            </div>\n\n            { children && <CSSTransition\n                addEndListener={ transitionEndListener }\n                classNames={ bodyClassName }\n                in={ isSelected }\n                mountOnEnter\n                timeout={ {} }\n                unmountOnExit\n            >\n                <div className={ bodyClassName }>\n                    { children }\n                </div>\n            </CSSTransition> }\n        </li>\n    );\n};\n\nexport default memo(AccordionItem);\n","import React, { FunctionComponent, InputHTMLAttributes } from 'react';\n\nimport Input from './Input';\nimport Label from './Label';\n\nexport interface ChecklistItemInputProps extends InputHTMLAttributes<HTMLInputElement> {\n    isSelected: boolean;\n}\n\nconst ChecklistItemInput: FunctionComponent<ChecklistItemInputProps> = ({\n    id,\n    isSelected,\n    children,\n    ...props\n}) => (\n    <>\n        <Input\n            { ...props }\n            checked={ isSelected }\n            className=\"form-checklist-checkbox optimizedCheckout-form-checklist-checkbox\"\n            id={ id }\n            type=\"radio\"\n        />\n\n        <Label htmlFor={ id }>\n            { children }\n        </Label>\n    </>\n);\n\nexport default ChecklistItemInput;\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { FieldProps } from 'formik';\nimport { kebabCase } from 'lodash';\nimport React, { memo, useCallback, useContext, FunctionComponent, ReactNode } from 'react';\n\nimport { AccordionItem, AccordionItemHeaderProps } from '../accordion';\n\nimport BasicFormField from './BasicFormField';\nimport { ChecklistContext } from './Checklist';\nimport ChecklistItemInput from './ChecklistItemInput';\n\nexport interface ChecklistItemProps {\n    content?: ReactNode;\n    htmlId?: string;\n    isDisabled?: boolean;\n    label: ReactNode | ((isSelected: boolean) => ReactNode);\n    value: string;\n}\n\nconst ChecklistItem: FunctionComponent<ChecklistItemProps> = ({\n    isDisabled,\n    value,\n    content,\n    htmlId = kebabCase(value),\n    label,\n    ...rest\n}) => {\n    const { name = '' } = useContext(ChecklistContext) || {};\n\n    const renderInput = useCallback(memoizeOne((isSelected: boolean) => ({ field }: FieldProps) => (\n        <ChecklistItemInput\n            { ...field }\n            disabled={ isDisabled }\n            id={ htmlId }\n            isSelected={ field.value === value }\n            value={ value }\n        >\n            { label instanceof Function ?\n                label(isSelected) :\n                label }\n        </ChecklistItemInput>\n    )), [\n        htmlId,\n        isDisabled,\n        label,\n        value,\n    ]);\n\n    const handleChange = useCallback(memoizeOne((onToggle: (id: string) => void) => (selectedValue: string) => {\n        if (value === selectedValue) {\n            onToggle(value);\n        }\n    }), []);\n\n    const renderHeaderContent = useCallback(({\n        isSelected,\n        onToggle,\n    }: AccordionItemHeaderProps) => (\n        <BasicFormField\n            className=\"form-checklist-option\"\n            name={ name }\n            onChange={ handleChange(onToggle) }\n            render={ renderInput(isSelected) }\n        />\n    ), [\n        handleChange,\n        name,\n        renderInput,\n    ]);\n\n    return (\n        <AccordionItem\n            { ...rest }\n            bodyClassName=\"form-checklist-body\"\n            className=\"form-checklist-item optimizedCheckout-form-checklist-item\"\n            classNameSelected=\"form-checklist-item--selected optimizedCheckout-form-checklist-item--selected\"\n            headerClassName=\"form-checklist-header\"\n            headerClassNameSelected=\"form-checklist-header--selected\"\n            headerContent={ renderHeaderContent }\n            itemId={ value }\n        >\n            { content }\n        </AccordionItem>\n    );\n};\n\nexport default memo(ChecklistItem);\n","import React, { createRef, FC, useEffect } from 'react'\nimport { debounce } from 'lodash'\nimport TextInput from '../../ui/form/TextInput'\n\nimport './styles.scss'\n\nimport withLanguage, { WithLanguageProps } from '../../locale/withLanguage';\n\nexport interface AddressFilterInputProps {\n  onChange: Function\n}\n\nconst AddressFilterInput:FC<AddressFilterInputProps & WithLanguageProps> = ({\n  onChange,\n  language\n}) => {\n  const ref = createRef<HTMLDivElement>();\n  const handleInputChange = debounce((val) => {\n    onChange && onChange(val)\n  }, 200)\n\n  useEffect(() => {\n    const { current } = ref\n    current && (current.onclick = (e) => {\n      e.stopPropagation()\n    })\n\n    return () => {}\n  })\n\n  return (\n    <div className=\"cc-address-search-container\" ref={ref}>\n      <TextInput \n        placeholder={language.translate(\"shipping.searchAddress_label\")}\n        onChange={(e) => {\n          handleInputChange(e.target.value)\n        }}\n      />\n    </div>\n  )\n}\n\nexport default withLanguage(AddressFilterInput)","import { Address, CustomerAddress } from '@bigcommerce/checkout-sdk';\nimport React, { memo, FunctionComponent, PureComponent, ReactNode, useState } from 'react';\n\nimport { preventDefault } from '../common/dom';\nimport { TranslatedString } from '../locale';\nimport { DropdownTrigger } from '../ui/dropdown';\nimport RadioInput from '../ui/form/RadioInput';\nimport { Fieldset, Form, Label, TextInput } from '../ui/form';\n\nimport isEqualAddress from './isEqualAddress';\nimport './AddressSelect.scss';\nimport StaticAddress from './StaticAddress';\n\nimport { AddressFilterInput } from '../coldChainCheckout';\n\nimport { storage } from '../coldChainCheckout/utils';\n\nexport interface AddressSelectProps {\n    addresses: CustomerAddress[];\n    selectedAddress?: Address;\n    onSelectAddress(address: Address): void;\n    onUseNewAddress(currentAddress?: Address): void;\n}\n\ninterface AddressSelectState {\n    shippingAddressMethod: string;\n    OTSAddress: any;\n}\n\nconst addrBase = {\n    address1: \"\",\n    address2: \"\",\n    city: \"\",\n    company: \"\",\n    country: \"USA\",\n    countryCode: \"US\",\n    customFields: [],\n    firstName: \"\",\n    id: \"\",\n    lastName: \"\",\n    phone: \"\",\n    postalCode: \"\",\n    stateOrProvince: \"\",\n    stateOrProvinceCode: \"\",    \n    type: \"residential\"\n}\n\nclass AddressSelect extends PureComponent<AddressSelectProps> {\n    state: AddressSelectState = {\n        shippingAddressMethod: (storage.CCShippingMethod.getValue())?storage.CCShippingMethod.getValue():\"buildIn\",\n        OTSAddress: (storage.CCOTSAddress.getValue()) ? JSON.parse(storage.CCOTSAddress.getValue()) : addrBase\n    };\n\n    handleShippingAddressMethodChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        storage.CCShippingMethod.setValue(e.target.value);\n        this.setState({ shippingAddressMethod: e.target.value });\n        console.log(\"after set, storage.CCShippingMethod value:\"+storage.CCShippingMethod.getValue());\n    }\n\n    render(): ReactNode {\n        const {\n            addresses,\n            selectedAddress,\n        } = this.props;\n\n        const {\n            shippingAddressMethod,\n            OTSAddress\n        } = this.state;\n\n        const formFields = [\n            { id: \"firstName\", name: \"firstName\", custom: false, label: \"Contact Name\", required: true },\n            { id: \"company\", name: \"company\", custom: false, label: \"Company Name\", required: true },\n            { id: \"address1\", name: \"address1\", custom: false, label: \"Address Line 1\", required: true },\n            { id: \"address2\", name: \"address2\", custom: false, label: \"Address Line 2\", required: false },\n            { id: \"city\", name: \"city\", custom: false, label: \"City\", required: true },\n            { id: \"stateOrProvince\", name: \"stateOrProvince\", custom: false, label: \"State\", required: true },\n            { id: \"postalCode\", name: \"postalCode\", custom: false, label: \"Zip Code\", required: true },\n            { id: \"phone\", name: \"phone\", custom: false, label: \"Phone Number\", required: false }\n        ]\n\n        const allowOTS = storage.CCAllowOTS.getValue();\n        console.log(\"allowOTS:\" + allowOTS);\n        var isOTSAddress = (selectedAddress && selectedAddress.customFields && selectedAddress.customFields.length == 0);\n\n        return (\n            <div className=\"form-field\">\n                <RadioInput\n                    checked={shippingAddressMethod == \"buildIn\"}\n                    id=\"addr-methohd-default\"\n                    key=\"buildIn\"\n                    label=\"Choose from the address book:\"\n                    name=\"shippingAddressMethod\"\n                    onChange={this.handleShippingAddressMethodChange}\n                    value=\"buildIn\"\n                />\n                {(shippingAddressMethod == \"buildIn\") ?<div className=\"dropdown--select\" role=\"combobox\">\n                    <DropdownTrigger\n                        dropdown={\n                            <AddressSelectMenu\n                                addresses={addresses}\n                                onSelectAddress={this.handleSelectAddress}\n                                onUseNewAddress={this.handleUseNewAddress}\n                                selectedAddress={(isOTSAddress)?undefined:selectedAddress}\n                            />\n                        }\n                    >\n                        <AddressSelectButton\n                            addresses={addresses}\n                            selectedAddress={selectedAddress}\n                        />\n                    </DropdownTrigger>\n                </div>:\"\"}\n                {(allowOTS == \"true\") ? <RadioInput\n                    checked={shippingAddressMethod == \"OTS\"}\n                    id=\"addr-method-ots\"\n                    key=\"OTS\"\n                    label=\"Specify a one-time shipping address (US only):\"\n                    name=\"shippingAddressMethod\"\n                    onChange={this.handleShippingAddressMethodChange}\n                    value=\"OTS\"\n                /> : \"\"}\n                {(allowOTS == \"true\" && shippingAddressMethod == \"OTS\") ? <Form\n                    className=\"checkout-form\"\n                    id=\"checkout-customer-returning\"\n                    testId=\"checkout-customer-returning\"\n                >\n                    <Fieldset>\n                        <div className=\"create-account-form\">\n                            {formFields.map(field => (\n                                <div className=\"dynamic-form-field\">\n                                    <div className=\"form-field\">\n                                        <Label htmlFor={field.id}>\n                                            {field.label}\n                                            {(field.required)? <>\n                                                    {' '}\n                                                    <small className=\"optimizedCheckout-contentSecondary\">\n                                                        (Required)\n                                                    </small>\n                                                </>:\n                                                <>\n                                                    {' '}\n                                                    <small className=\"optimizedCheckout-contentSecondary\">\n                                                        <TranslatedString id=\"common.optional_text\" />\n                                                    </small>\n                                                </>}\n                                        </Label>\n                                        <TextInput\n                                            id={field.id}\n                                            name={field.name}\n                                            onChange={this.handleFieldValueChange(field.name)}\n                                            value={OTSAddress[field.name]}\n                                        />\n                                    </div>\n                                </div>\n                            ))}\n                        </div>\n                    </Fieldset>\n                </Form> : \"\"}\n            </div>\n        );\n    }\n\n    private handleSelectAddress: (newAddress: Address) => void = (newAddress: Address) => {\n        const {\n            onSelectAddress,\n            selectedAddress,\n        } = this.props;\n\n        if (!isEqualAddress(selectedAddress, newAddress)) {\n            onSelectAddress(newAddress);\n        }\n    };\n\n    private handleUseNewAddress: () => void = () => {\n        const {\n            selectedAddress,\n            onUseNewAddress,\n        } = this.props;\n\n        onUseNewAddress(selectedAddress);\n    };\n\n    private handleFieldValueChange: (name: string) => (e: React.ChangeEvent<HTMLInputElement>) => void = name => e => {\n        this.state.OTSAddress[name] = e.target.value;\n        if (name == \"stateOrProvince\"){\n            this.state.OTSAddress[\"stateOrProvinceCode\"] = e.target.value;\n        }\n        if (name == \"firstName\"){\n            this.state.OTSAddress[\"lastName\"] = e.target.value;\n        }\n        this.setState({ OTSAddress: {...this.state.OTSAddress} });\n        //this.props.onSelectAddress(this.state.OTSAddress);\n        storage.CCOTSAddress.setValue(JSON.stringify(this.state.OTSAddress));\n    };\n}\n\nconst addressesFilterHandler = (q: string, addresses: CustomerAddress[]) => {\n    return addresses.filter(address => JSON\n        .stringify(address)\n        .trim()\n        .toLocaleLowerCase()\n        .includes(\n            q\n                .trim()\n                .toLocaleLowerCase()\n        )\n    )\n}\n\nconst AddressSelectMenu: FunctionComponent<AddressSelectProps> = ({\n    addresses,\n    onSelectAddress\n}) => {\n    const [disPlayAddress, setDisPlayAddress] = useState(addresses);\n\n    return (<ul\n        className=\"dropdown-menu instrumentSelect-dropdownMenu\"\n        id=\"addressDropdown\"\n    >\n        <AddressFilterInput\n            onChange={(q: string) => {\n                setDisPlayAddress(addressesFilterHandler(q, addresses))\n            }}\n        />\n        { disPlayAddress.map(address => (\n            <li\n                className=\"dropdown-menu-item dropdown-menu-item--select\"\n                key={address.id}\n            >\n                <a href=\"#\" onClick={preventDefault(() => onSelectAddress(address))}>\n                    <StaticAddress address={address} />\n                </a>\n            </li>\n        ))}\n    </ul>\n    );\n};\n\ntype AddressSelectButtonProps = Pick<AddressSelectProps, 'selectedAddress' | 'addresses'>;\n\nconst AddressSelectButton: FunctionComponent<AddressSelectButtonProps> = ({\n    selectedAddress,\n}) => (\n    <a\n        className=\"button dropdown-button dropdown-toggle--select\"\n        href=\"#\"\n        id=\"addressToggle\"\n        onClick={preventDefault()}\n    >\n        { selectedAddress ?\n            <StaticAddress address={selectedAddress} /> :\n            <TranslatedString id=\"address.enter_address_action\" />}\n    </a>\n);\n\nexport default memo(AddressSelect);\n","import { setPrototypeOf, CustomError } from '../../common/error';\nimport { getLanguageService } from '../../locale';\n\nexport default class UnassignItemError extends CustomError {\n    constructor(data: Error) {\n        super({\n            name: 'UNASSIGN_ITEM_FAILED',\n            message: getLanguageService().translate('shipping.unassign_item_error'),\n            data,\n        });\n\n        setPrototypeOf(this, UnassignItemError.prototype);\n    }\n}\n","import { Checkout } from '@bigcommerce/checkout-sdk';\n\nimport { getPreselectedPayment } from '../payment';\n\nexport default function getShippingMethodId(checkout: Checkout): string | undefined {\n    const SHIPPING_METHOD_IDS = ['amazon', 'amazonpay'];\n    const preselectedPayment = getPreselectedPayment(checkout);\n\n    return preselectedPayment && SHIPPING_METHOD_IDS.indexOf(preselectedPayment.providerId) > -1 ?\n        preselectedPayment.providerId :\n        undefined;\n}\n","import { Country, FormField } from '@bigcommerce/checkout-sdk';\nimport { withFormik, FormikProps } from 'formik';\nimport React, { FunctionComponent } from 'react';\nimport { lazy } from 'yup';\n\nimport { preventDefault } from '../common/dom';\nimport { withLanguage, TranslatedString, WithLanguageProps } from '../locale';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Form } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\nimport { Modal, ModalHeader } from '../ui/modal';\n\nimport getAddressFormFieldsValidationSchema from './getAddressFormFieldsValidationSchema';\nimport { AddressFormValues } from './mapAddressToFormValues';\nimport AddressForm from './AddressForm';\n\nexport interface AddressFormModalProps extends AddressFormProps {\n    isOpen: boolean;\n    onAfterOpen?(): void;\n}\n\nexport interface AddressFormProps {\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    shouldShowSaveAddress?: boolean;\n    defaultCountryCode?: string;\n    getFields(countryCode?: string): FormField[];\n    onSaveAddress(address: AddressFormValues): void;\n    onRequestClose?(): void;\n}\n\nconst SaveAddress: FunctionComponent<AddressFormProps & WithLanguageProps & FormikProps<AddressFormValues>> = ({\n    googleMapsApiKey,\n    getFields,\n    countriesWithAutocomplete,\n    countries,\n    values,\n    setFieldValue,\n    isLoading,\n    onRequestClose,\n}) => (\n    <Form autoComplete=\"on\">\n        <LoadingOverlay isLoading={ isLoading }>\n            <AddressForm\n                countries={ countries }\n                countriesWithAutocomplete={ countriesWithAutocomplete }\n                countryCode={ values.countryCode }\n                formFields={ getFields(values.countryCode) }\n                googleMapsApiKey={ googleMapsApiKey }\n                setFieldValue={ setFieldValue }\n                shouldShowSaveAddress={ false }\n            />\n            <div className=\"form-actions\">\n                <a\n                    className=\"button optimizedCheckout-buttonSecondary\"\n                    href=\"#\"\n                    onClick={ preventDefault(onRequestClose) }\n                >\n                    <TranslatedString id=\"common.cancel_action\" />\n                </a>\n\n                <Button\n                    disabled={ isLoading }\n                    id=\"checkout-save-address\"\n                    type=\"submit\"\n                    variant={ ButtonVariant.Primary }\n                >\n                    <TranslatedString id=\"address.save_address_action\" />\n                </Button>\n            </div>\n        </LoadingOverlay>\n    </Form>\n);\n\nconst SaveAddressForm = withLanguage(withFormik<AddressFormProps & WithLanguageProps, AddressFormValues>({\n    handleSubmit: (values, { props: { onSaveAddress } }) => {\n        onSaveAddress(values);\n    },\n    mapPropsToValues: ({ defaultCountryCode = '' }) => ({\n        firstName: '',\n        lastName: '',\n        address1: '',\n        address2: '',\n        customFields: {},\n        country: '',\n        countryCode: defaultCountryCode,\n        stateOrProvince: '',\n        stateOrProvinceCode: '',\n        postalCode: '',\n        phone: '',\n        city: '',\n        company: '',\n        shouldSaveAddress: false,\n    }),\n    validationSchema: ({\n        language,\n        getFields,\n    }: AddressFormProps & WithLanguageProps) => (\n        lazy<Partial<AddressFormValues>>(values => getAddressFormFieldsValidationSchema({\n            language,\n            formFields: getFields(values && values.countryCode),\n        }))\n    ),\n})(SaveAddress));\n\nconst AddressFormModal: FunctionComponent<AddressFormModalProps> = ({\n    isOpen,\n    onAfterOpen,\n    onRequestClose,\n    ...addressFormProps\n}) => (\n    <Modal\n        additionalModalClassName=\"modal--medium\"\n        header={\n            <ModalHeader>\n                <TranslatedString id=\"address.add_address_heading\" />\n            </ModalHeader>\n        }\n        isOpen={ isOpen }\n        onAfterOpen={ onAfterOpen }\n        onRequestClose={ onRequestClose }\n        shouldShowCloseButton={ true }\n    >\n        <SaveAddressForm\n            { ...addressFormProps }\n            onRequestClose={ onRequestClose }\n        />\n    </Modal>\n);\n\nexport default AddressFormModal;\n","import { setPrototypeOf, CustomError } from '../../common/error';\nimport { getLanguageService } from '../../locale';\n\nexport default class AssignItemInvalidAddressError extends CustomError {\n    constructor(data?: Error) {\n        super({\n            name: 'ASSIGN_ITEM_INVALID_ADDRESS',\n            message: getLanguageService().translate('shipping.assign_item_invalid_address_error'),\n            title: getLanguageService().translate('shipping.assign_item_invalid_address_error_heading'),\n            data,\n        });\n\n        setPrototypeOf(this, AssignItemInvalidAddressError.prototype);\n    }\n}\n","import { setPrototypeOf, CustomError } from '../../common/error';\nimport { getLanguageService } from '../../locale';\n\nexport default class AssignItemFailedError extends CustomError {\n    constructor(data: Error) {\n        super({\n            name: 'ASSIGN_ITEM_FAILED',\n            message: getLanguageService().translate('shipping.assign_item_error'),\n            data,\n        });\n\n        setPrototypeOf(this, AssignItemFailedError.prototype);\n    }\n}\n","import { Consignment } from '@bigcommerce/checkout-sdk';\nimport { find, includes } from 'lodash';\n\nexport default function findConsignment(\n    consignments: Consignment[],\n    itemId: string\n): Consignment | undefined {\n    return find(consignments, consignment => includes(consignment.lineItemIds, itemId));\n}\n","import { Cart, Consignment, PhysicalItem } from '@bigcommerce/checkout-sdk';\nimport { isNil, reduce } from 'lodash';\n\nimport findConsignment from './findConsignment';\nimport ShippableItem from './ShippableItem';\n\nexport default function getShippableLineItems(\n    cart: Cart,\n    consignments: Consignment[]\n): ShippableItem[] {\n    return reduce(\n        (cart && cart.lineItems.physicalItems) || [],\n        (result, item, i) => (\n            !item.addedByPromotion && isNil(item.parentId) ?\n                result.concat(...splitItem(item, consignments, i)) :\n                result\n        ),\n        [] as ShippableItem[]\n    );\n}\n\nfunction splitItem(\n    item: PhysicalItem,\n    consignments: Consignment[],\n    lineItemIndex: number\n): ShippableItem[] {\n    let splitItems: ShippableItem[] = [];\n    const consignment = findConsignment(consignments, item.id as string);\n\n    for (let i = 0; i < item.quantity; i++) {\n        splitItems = splitItems.concat({\n            ...item,\n            key: `${item.variantId}-${item.productId}-${lineItemIndex}-${i}`,\n            consignment,\n            quantity: 1,\n        });\n    }\n\n    return splitItems;\n}\n","import { Address, CustomerAddress } from '@bigcommerce/checkout-sdk';\nimport React, { memo, useCallback, FunctionComponent } from 'react';\n\nimport { AddressSelect } from '../address';\n\nimport ShippableItem from './ShippableItem';\n\nexport interface ItemAddressSelectProps {\n    item: ShippableItem;\n    addresses: CustomerAddress[];\n    onSelectAddress(address: Address, itemId: string, itemKey: string): void;\n    onUseNewAddress(address: Address | undefined, itemId: string, itemKey: string): void;\n}\n\nconst ItemAddressSelect: FunctionComponent<ItemAddressSelectProps> = ({\n    item: {\n        id,\n        key,\n        imageUrl,\n        quantity,\n        name,\n        options,\n        consignment,\n    },\n    addresses,\n    onSelectAddress,\n    onUseNewAddress,\n}) => {\n    const handleUseNewAddress = useCallback((address: Address) => {\n        onUseNewAddress(address, id as string, key);\n    }, [\n        id,\n        onUseNewAddress,\n        key,\n    ]);\n\n    const handleSelectAddress = useCallback((address: Address) => {\n        onSelectAddress(address, id as string, key);\n    }, [\n        id,\n        key,\n        onSelectAddress,\n    ]);\n\n    return <div className=\"consignment\">\n        <figure className=\"consignment-product-figure\">\n            { imageUrl &&\n                <img alt={ name } src={ imageUrl } /> }\n        </figure>\n\n        <div className=\"consignment-product-body\">\n            <h5 className=\"optimizedCheckout-contentPrimary\">\n                { `${quantity} x ${name}` }\n            </h5>\n\n            { (options || []).map(({ name: optionName, value, nameId }) =>\n                <ul\n                    className=\"product-options optimizedCheckout-contentSecondary\"\n                    data-test=\"consigment-item-product-options\"\n                    key={ nameId }\n                >\n                    <li className=\"product-option\">\n                        { `${optionName } ${value}` }\n                    </li>\n                </ul>\n            ) }\n\n            <AddressSelect\n                addresses={ addresses }\n                onSelectAddress={ handleSelectAddress }\n                onUseNewAddress={ handleUseNewAddress }\n                selectedAddress={ consignment && consignment.shippingAddress }\n            />\n        </div>\n    </div>;\n};\n\nexport default memo(ItemAddressSelect);\n","import React, { memo, useMemo, FunctionComponent } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faInfoCircle } from '@fortawesome/free-solid-svg-icons';\nimport ReactTooltip from \"react-tooltip\";\n\nimport { TranslatedString } from '../../locale';\nimport { CheckboxInput } from '../../ui/form';\nimport withLanguage, { WithLanguageProps } from '../../locale/withLanguage';\n\nexport interface OnlyShipWhenCompleteFieldProps {\n    onChange?(e: React.ChangeEvent<HTMLInputElement>): void;\n    value: string\n}\n\nconst OnlyShipWhenCompleteField: FunctionComponent<OnlyShipWhenCompleteFieldProps & WithLanguageProps> = ({\n    onChange,\n    value,\n    language\n}) => {\n    const labelContent = useMemo(() => (\n        <span>\n            <TranslatedString id=\"shipping.onlyShipWhenComplete_label\" />\n            <FontAwesomeIcon data-for=\"main\" data-tip={language.translate(\"shipping.onlyShipWhenComplete_help\")} icon={faInfoCircle} className=\"cc-info-icon cc-info-icon-label\"/>\n            <ReactTooltip\n                id=\"main\"\n                type=\"info\"\n                multiline={true}\n            />\n        </span>\n    ), []);\n\n    return <CheckboxInput\n        checked={(value === \"Y\")?true:false}\n        id=\"onlyShipWhenComplete\"\n        label={labelContent}\n        onChange={onChange}\n        value={value}\n    />\n};\n\nexport default memo(withLanguage(OnlyShipWhenCompleteField));\n","import React, { useMemo, FC, useState } from 'react';\nimport ReactDatePicker from 'react-datepicker';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faInfoCircle } from '@fortawesome/free-solid-svg-icons';\nimport ReactTooltip from \"react-tooltip\";\n\nimport { withDate, WithDateProps, TranslatedString } from '../../locale';\nimport { Fieldset, Legend, TextInput } from '../../ui/form';\n\nimport storage from '../utils/storage'\nimport OnlyShipWhenCompleteField from './OnlyShipWhenCompleteField'\n\nimport withLanguage, { WithLanguageProps } from '../../locale/withLanguage';\n\nimport { DropdownTrigger } from '../../ui/dropdown';\nimport { preventDefault } from '../../common/dom';\n\nconst ColdChainCOExtraFields: FC<WithDateProps & WithLanguageProps> = ({\n    date,\n    language\n}) => {\n    const shipViaOptions = JSON.parse(storage.CCShipViaOptions.getValue());\n\n    const findShipViaByValue = (value: string) =>{\n        return shipViaOptions.find((e:any) => e.value == value);\n    }\n\n    const [needBy, setNeedBy] = useState((storage.CCNeedBy.getValue()) ? new Date(storage.CCNeedBy.getValue()) : null);\n    const [shipWhenComplete, setShipWhenComplete] = useState(storage.CCShipWhenComplete.getValue() || '');\n    const [shippingReference, setShippingReference] = useState(storage.CCShippingPreference.getValue() || '');\n    const [referLine, setReferLine] = useState(storage.CCReferLine.getValue() || '');\n    const [shipVia, setShipVia] = useState(findShipViaByValue(storage.CCShipVia.getValue()) || { label: \"\", value: \"\"});\n\n    /*\n    const renderOnlyShipWhenCompleteLabel = useMemo(() => (\n        <TranslatedString id=\"shipping.onlyShipWhenComplete_label\" />\n    ), []);\n    */\n\n    const handleNeedByInputChange = (date: Date) => {\n        setNeedBy(date);\n        date ? storage.CCNeedBy.setValue(date.toString()) : storage.CCNeedBy.removeValue()\n    }\n\n    const handleOnlyShipWhenCompleteInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setShipWhenComplete((e.target.checked) ? \"Y\" : \"N\");\n        storage.CCShipWhenComplete.setValue((e.target.checked) ? \"Y\" : \"N\");\n    }\n\n    const handleShippingPreferenceInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const val = e.target.value\n        setShippingReference(val)\n        val ? storage.CCShippingPreference.setValue(val) : storage.CCShippingPreference.removeValue()\n    }\n\n    const handleReferLineInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const val = e.target.value\n        setReferLine(val)\n        val ? storage.CCReferLine.setValue(val) : storage.CCReferLine.removeValue()\n    }\n\n    const onSelectShipVia = (shipVia: any) => {\n        setShipVia(shipVia);\n        shipVia ? storage.CCShipVia.setValue(shipVia.value) : storage.CCShipVia.removeValue()\n    }\n\n    const needBylegend = useMemo(() => (\n        <Legend>\n            <TranslatedString id=\"shipping.needBy_label\" />\n            <FontAwesomeIcon data-for=\"main\" data-tip={language.translate(\"shipping.needBy_help\")} icon={faInfoCircle} className=\"cc-info-icon\" />\n        </Legend>\n    ), []);\n\n    const shippingPreferencelegend = useMemo(() => (\n        <Legend>\n            <TranslatedString id=\"shipping.shippingPreference_label\" />\n            <FontAwesomeIcon data-for=\"main\" data-tip={language.translate(\"shipping.shippingPreference_help\")} icon={faInfoCircle} className=\"cc-info-icon\" />\n        </Legend>\n    ), []);\n\n    const referLinelegend = useMemo(() => (\n        <Legend>\n            <TranslatedString id=\"shipping.referLine_label\" />\n            <FontAwesomeIcon data-for=\"main\" data-tip={language.translate(\"shipping.referLine_help\")} icon={faInfoCircle} className=\"cc-info-icon\" />\n        </Legend>\n    ), []);\n\n    const shipVialegend = useMemo(() => (\n        <Legend>\n            <TranslatedString id=\"shipping.shipVia_label\" />\n            <FontAwesomeIcon data-for=\"main\" data-tip={language.translate(\"shipping.shipVia_help\")} icon={faInfoCircle} className=\"cc-info-icon\" />\n        </Legend>\n    ), []);\n\n    return <div>\n        <Fieldset legend={referLinelegend} testId=\"checkout-shipping-referLine\">\n            <TextInput\n                name=\"referLine\"\n                autoComplete={'off'}\n                maxLength={2000}\n                onChange={handleReferLineInputChange}\n                value={referLine}\n            />\n        </Fieldset>\n        <Fieldset legend={needBylegend} testId=\"checkout-shipping-needBy\">\n            <ReactDatePicker\n                autoComplete=\"off\"\n                calendarClassName=\"optimizedCheckout-contentPrimary\"\n                className=\"form-input optimizedCheckout-form-input\"\n                dateFormat={date.inputFormat}\n                name=\"needBy\"\n                onChange={handleNeedByInputChange}\n                placeholderText={language.translate(\"shipping.needByPlaceHolder_label\")}\n                popperClassName=\"optimizedCheckout-contentPrimary\"\n                selected={needBy}\n            />\n            <p className=\"cc-needby-note\"><TranslatedString id=\"shipping.needBy_note\" /></p>\n        </Fieldset>\n        <Fieldset testId=\"checkout-shipping-onlyShipWhenComplete\">\n            <OnlyShipWhenCompleteField\n                onChange={handleOnlyShipWhenCompleteInputChange}\n                value={shipWhenComplete}\n            />\n        </Fieldset>\n        <Fieldset\n            id=\"checkout-shipping-via-options\"\n            legend={shipVialegend}\n        >\n            <div className=\"form-field\">\n                <div className=\"dropdown--select\" role=\"combobox\">\n                    <DropdownTrigger\n                        dropdown={\n                            <ul\n                                className=\"dropdown-menu instrumentSelect-dropdownMenu\"\n                                id=\"addressDropdown\"\n                            >\n                                {shipViaOptions.map((sv:any) => (\n                                    <li\n                                        className=\"dropdown-menu-item dropdown-menu-item--select\"\n                                        key={sv.id}\n                                    >\n                                        <a href=\"#\" onClick={preventDefault(() => onSelectShipVia(sv))}>\n                                            <span>{sv.label}</span>\n                                        </a>\n                                    </li>\n                                ))}\n                            </ul>\n                        }\n                    >\n                        <a\n                            className=\"button dropdown-button dropdown-toggle--select\"\n                            href=\"#\"\n                            id=\"shipViaToggle\"\n                            onClick={preventDefault()}\n                        >\n                            <span>{(shipVia)?shipVia.label:\"\"}</span>\n                        </a>\n                    </DropdownTrigger>\n                </div>\n            </div>\n        </Fieldset>\n        <Fieldset legend={shippingPreferencelegend} testId=\"checkout-shipping-shippingPreference\">\n            <TextInput\n                name=\"shippingPreference\"\n                autoComplete={'off'}\n                maxLength={2000}\n                onChange={handleShippingPreferenceInputChange}\n                value={shippingReference}\n            />\n        </Fieldset>\n        <ReactTooltip\n            id=\"main\"\n            type=\"info\"\n            multiline={true}\n        />\n    </div>;\n};\n\nexport default withLanguage(withDate(ColdChainCOExtraFields));\n","import { ShippingOption } from '@bigcommerce/checkout-sdk';\nimport React, { memo, useCallback, FunctionComponent } from 'react';\n\nimport { EMPTY_ARRAY } from '../../common/utility';\nimport { Checklist, ChecklistItem } from '../../ui/form';\nimport { LoadingOverlay } from '../../ui/loading';\n\nimport StaticShippingOption from './StaticShippingOption';\n\ninterface ShippingOptionListItemProps {\n    consignmentId: string;\n    shippingOption: ShippingOption;\n}\n\nconst ShippingOptionListItem: FunctionComponent<ShippingOptionListItemProps> = ({\n    consignmentId,\n    shippingOption,\n}) => {\n    const renderLabel = useCallback(() => (\n        <div className=\"shippingOptionLabel\">\n            <StaticShippingOption displayAdditionalInformation={ true } method={ shippingOption } />\n        </div>\n    ), [shippingOption]);\n\n    return <ChecklistItem\n        htmlId={ `shippingOptionRadio-${consignmentId}-${shippingOption.id}` }\n        label={ renderLabel }\n        value={ shippingOption.id }\n    />;\n};\n\nexport interface ShippingOptionListProps {\n    consignmentId: string;\n    inputName: string;\n    isLoading: boolean;\n    selectedShippingOptionId?: string;\n    shippingOptions?: ShippingOption[];\n    onSelectedOption(consignmentId: string, shippingOptionId: string): void;\n}\n\nconst ShippingOptionsList: FunctionComponent<ShippingOptionListProps> = ({\n    consignmentId,\n    inputName,\n    isLoading,\n    shippingOptions = EMPTY_ARRAY,\n    selectedShippingOptionId,\n    onSelectedOption,\n }) => {\n    const handleSelect = useCallback((value: string) => {\n        onSelectedOption(consignmentId, value);\n    }, [\n        consignmentId,\n        onSelectedOption,\n    ]);\n\n    if (!shippingOptions.length) {\n        return null;\n    }\n\n    return (\n        <LoadingOverlay isLoading={ isLoading }>\n            <Checklist\n                aria-live=\"polite\"\n                defaultSelectedItemId={ selectedShippingOptionId }\n                name={ inputName }\n                onSelect={ handleSelect }\n            >\n                { shippingOptions.map(shippingOption => (\n                    <ShippingOptionListItem\n                        consignmentId={ consignmentId }\n                        key={ shippingOption.id }\n                        shippingOption={ shippingOption }\n                    />\n                )) }\n            </Checklist>\n        </LoadingOverlay>\n    );\n};\n\nexport default memo(ShippingOptionsList);\n","import { CheckoutSelectors, Consignment } from '@bigcommerce/checkout-sdk';\nimport { withFormik, FormikProps } from 'formik';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { StaticAddress } from '../../address';\nimport { TranslatedString } from '../../locale';\nimport { LoadingOverlay } from '../../ui/loading';\nimport getRecommendedShippingOption from '../getRecommendedShippingOption';\nimport StaticConsignmentItemList from '../StaticConsignmentItemList';\n\nimport { ShippingOptionsProps, WithCheckoutShippingOptionsProps } from './ShippingOptions';\nimport './ShippingOptionsForm.scss';\nimport ShippingOptionsList from './ShippingOptionsList';\n\nexport type ShippingOptionsFormProps = ShippingOptionsProps & WithCheckoutShippingOptionsProps;\n\nclass ShippingOptionsForm extends PureComponent<ShippingOptionsFormProps & FormikProps<ShippingOptionsFormValues>> {\n    private unsubscribe?: () => void;\n\n    componentDidMount(): void {\n        const { subscribeToConsignments } = this.props;\n        this.unsubscribe = subscribeToConsignments(this.selectDefaultShippingOptions);\n    }\n\n    componentWillUnmount(): void {\n        if (this.unsubscribe) {\n            this.unsubscribe();\n            this.unsubscribe = undefined;\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            consignments,\n            isMultiShippingMode,\n            selectShippingOption,\n            isLoading,\n            shouldShowShippingOptions,\n            invalidShippingMessage,\n            methodId,\n        } = this.props;\n\n        if (!consignments ||\n            !consignments.length ||\n            !shouldShowShippingOptions\n        ) {\n            return (\n                <LoadingOverlay isLoading={isLoading()}>\n                    { this.renderNoShippingOptions(\n                        <TranslatedString\n                            id={methodId || isMultiShippingMode ?\n                                'shipping.select_shipping_address_text' :\n                                'shipping.enter_shipping_address_text'}\n                        />\n                    )}\n                </LoadingOverlay>\n            );\n        }\n\n        return <>\n            { consignments\n                .map(consignment => (\n                    <div className=\"shippingOptions-container form-fieldset\" key={consignment.id}>\n                        { isMultiShippingMode && this.renderConsignment(consignment)}\n\n                        <ShippingOptionsList\n                            consignmentId={consignment.id}\n                            inputName={getRadioInputName(consignment.id)}\n                            isLoading={isLoading(consignment.id)}\n                            onSelectedOption={selectShippingOption}\n                            selectedShippingOptionId={consignment.selectedShippingOption && consignment.selectedShippingOption.id}\n                            shippingOptions={consignment.availableShippingOptions}\n                        />\n\n                        { (!consignment.availableShippingOptions || !consignment.availableShippingOptions.length) && false &&\n                            <LoadingOverlay hideContentWhenLoading isLoading={isLoading(consignment.id)}>\n                                {this.renderNoShippingOptions(invalidShippingMessage)}\n                            </LoadingOverlay>}\n                    </div>\n                ))}\n        </>;\n    }\n\n    private selectDefaultShippingOptions: (state: CheckoutSelectors) => void = async ({ data }) => {\n        const { selectShippingOption, setFieldValue } = this.props;\n\n        const consignment = (data.getConsignments() || []).find(({\n            selectedShippingOption,\n            availableShippingOptions: shippingOptions,\n        }) => !selectedShippingOption && shippingOptions);\n\n        if (!consignment || !consignment.availableShippingOptions) {\n            return;\n        }\n\n        const { availableShippingOptions, id } = consignment;\n        const recommendedOption = getRecommendedShippingOption(availableShippingOptions);\n        const singleShippingOption = availableShippingOptions.length === 1 && availableShippingOptions[0];\n        const defaultShippingOption = recommendedOption || singleShippingOption;\n\n        if (!defaultShippingOption) {\n            return;\n        }\n\n        await selectShippingOption(id, defaultShippingOption.id);\n        setFieldValue(`shippingOptionIds.${id}`, defaultShippingOption.id);\n    };\n\n    private renderNoShippingOptions(message: ReactNode): ReactNode {\n        return (\n            <div className=\"shippingOptions-panel optimizedCheckout-overlay\">\n                <p className=\"shippingOptions-panel-message optimizedCheckout-primaryContent\">\n                    {message}\n                </p>\n            </div>\n        );\n    }\n\n    private renderConsignment(consignment: Consignment): ReactNode {\n        const { cart } = this.props;\n\n        return (\n            <div className=\"staticConsignment\">\n                <strong>\n                    <TranslatedString id=\"shipping.shipping_address_heading\" />\n                </strong>\n\n                <StaticAddress address={consignment.shippingAddress} />\n\n                <StaticConsignmentItemList\n                    cart={cart}\n                    consignment={consignment}\n                />\n            </div>\n        );\n    }\n}\n\nfunction getRadioInputName(consignmentId: string): string {\n    return `shippingOptionIds.${consignmentId}`;\n}\n\nexport interface ShippingOptionsFormValues {\n    shippingOptionIds: {\n        [shippingOptionIds: string]: string;\n    };\n}\n\nexport default withFormik<ShippingOptionsFormProps, ShippingOptionsFormValues>({\n    handleSubmit: noop,\n    mapPropsToValues({ consignments }) {\n        const shippingOptionIds: { [id: string]: string } = {};\n\n        (consignments || []).forEach(consignment => {\n            shippingOptionIds[consignment.id] = consignment.selectedShippingOption ?\n                consignment.selectedShippingOption.id :\n                '';\n        });\n\n        return { shippingOptionIds };\n    },\n})(ShippingOptionsForm);\n","import { ShippingOption } from '@bigcommerce/checkout-sdk';\n\nexport default function getRecommendedShippingOption(availableShippingOptions: ShippingOption[]): ShippingOption | undefined {\n    if (!availableShippingOptions) {\n        return;\n    }\n\n    return availableShippingOptions.find(({ isRecommended }: { isRecommended: any }) => isRecommended);\n}\n","import { Cart, CheckoutSelectors, Consignment } from '@bigcommerce/checkout-sdk';\nimport { map, sortBy, uniq } from 'lodash';\nimport { createSelector } from 'reselect';\n\nimport { withCheckout, CheckoutContextProps } from '../../checkout';\nimport getShippableLineItems from '../getShippableLineItems';\nimport getShippingMethodId from '../getShippingMethodId';\n\nimport ShippingOptionsForm from './ShippingOptionsForm';\n\nexport interface ShippingOptionsProps {\n    isMultiShippingMode: boolean;\n    isUpdatingAddress?: boolean;\n    shouldShowShippingOptions: boolean;\n}\n\nexport interface WithCheckoutShippingOptionsProps {\n    invalidShippingMessage: string;\n    methodId?: string;\n    consignments?: Consignment[];\n    cart: Cart;\n    isSelectingShippingOption(consignmentId?: string): boolean;\n    subscribeToConsignments(subscriber: (state: CheckoutSelectors) => void): () => void;\n    selectShippingOption(consignmentId: string, optionId: string): Promise<CheckoutSelectors>;\n    isLoading(consignmentId?: string): boolean;\n}\n\nconst subscribeToConsignmentsSelector = createSelector(\n    ({ checkoutService }: CheckoutContextProps) => checkoutService.subscribe,\n    subscribe => (subscriber: (state: CheckoutSelectors) => void) => {\n        return subscribe(subscriber, ({ data }) => data.getConsignments());\n    }\n);\n\nconst isLoadingSelector = createSelector(\n    (_: CheckoutSelectors, { isUpdatingAddress }: ShippingOptionsProps) => isUpdatingAddress,\n    ({ statuses }: CheckoutSelectors) => statuses.isLoadingShippingOptions,\n    ({ statuses }: CheckoutSelectors) => statuses.isSelectingShippingOption,\n    ({ statuses }: CheckoutSelectors) => statuses.isUpdatingConsignment,\n    ({ statuses }: CheckoutSelectors) => statuses.isCreatingConsignments,\n    (isUpdatingAddress, isLoadingShippingOptions, isSelectingShippingOption, isUpdatingConsignment, isCreatingConsignments) => {\n        return (consignmentId?: string) => {\n            return (\n                isUpdatingAddress ||\n                isLoadingShippingOptions() ||\n                isSelectingShippingOption(consignmentId) ||\n                isUpdatingConsignment(consignmentId) ||\n                isCreatingConsignments()\n            );\n        };\n    }\n);\n\nconst sortConsignments = (cart: Cart, unsortedConsignments: Consignment[]): Consignment[] => {\n    if (unsortedConsignments.length < 2) {\n        return unsortedConsignments;\n    }\n    const shippableItems = getShippableLineItems(cart, unsortedConsignments);\n    const consignmentsOrder = uniq(map(shippableItems, 'consignment.id'));\n\n    return sortBy(unsortedConsignments, consignment => consignmentsOrder.indexOf(consignment.id));\n};\n\nexport function mapToShippingOptions(\n    { checkoutService, checkoutState }: CheckoutContextProps,\n    props: ShippingOptionsProps\n): WithCheckoutShippingOptionsProps | null {\n    const {\n        data: {\n            getCart,\n            getConsignments,\n            getConfig,\n            getCustomer,\n            getCheckout,\n        },\n        statuses: {\n            isSelectingShippingOption,\n        },\n    } = checkoutState;\n\n    const customer = getCustomer();\n    const cart = getCart();\n    const config = getConfig();\n    const checkout = getCheckout();\n\n    if (!config || !checkout || !customer || !cart) {\n        return null;\n    }\n\n    const consignments = sortConsignments(cart, getConsignments() ||  []);\n    const methodId = getShippingMethodId(checkout);\n    const { shippingQuoteFailedMessage } = config.checkoutSettings;\n\n    return {\n        cart,\n        consignments,\n        invalidShippingMessage: shippingQuoteFailedMessage,\n        isLoading: isLoadingSelector(checkoutState, props),\n        isSelectingShippingOption,\n        methodId,\n        selectShippingOption: checkoutService.selectConsignmentShippingOption,\n        subscribeToConsignments: subscribeToConsignmentsSelector({ checkoutService, checkoutState }),\n    };\n}\n\nexport default withCheckout(mapToShippingOptions)(ShippingOptionsForm);\n","import React, { PureComponent, ReactNode } from 'react';\n\nimport { TranslatedString } from '../locale';\n//import { OrderComments } from '../orderComments';\nimport { ColdChainCOExtraFields } from '../coldChainCheckout';\nimport { Alert, AlertType } from '../ui/alert';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Fieldset, Legend } from '../ui/form';\n\nimport { ShippingOptions } from './shippingOption';\n\nexport interface ShippingFormFooterProps {\n    cartHasChanged: boolean;\n    isMultiShippingMode: boolean;\n    shouldShowOrderComments: boolean;\n    shouldShowShippingOptions?: boolean;\n    shouldDisableSubmit: boolean;\n    isLoading: boolean;\n    onContinueButton: React.MouseEventHandler<HTMLButtonElement>;\n}\n\nclass ShippingFormFooter extends PureComponent<ShippingFormFooterProps> {\n    render(): ReactNode {\n        const {\n            cartHasChanged,\n            isMultiShippingMode,\n            //shouldShowOrderComments,\n            shouldShowShippingOptions = true,\n            shouldDisableSubmit,\n            isLoading,\n            onContinueButton\n        } = this.props;\n\n        return <>\n            <Fieldset\n                id=\"checkout-shipping-options\"\n                legend={\n                    <>\n                        <Legend>\n                            <TranslatedString id=\"shipping.shipping_method_label\" />\n                        </Legend>\n\n                        { cartHasChanged &&\n                            <Alert type={ AlertType.Error }>\n                                <strong>\n                                    <TranslatedString id=\"shipping.cart_change_error\" />\n                                </strong>\n                            </Alert> }\n                    </>\n                }\n            >\n                <ShippingOptions\n                    isMultiShippingMode={ isMultiShippingMode }\n                    isUpdatingAddress={ isLoading }\n                    shouldShowShippingOptions={ shouldShowShippingOptions }\n                />\n            </Fieldset>\n\n            <ColdChainCOExtraFields />\n\n            <div className=\"form-actions\">\n                <Button\n                    disabled={ shouldDisableSubmit }\n                    id=\"checkout-shipping-continue\"\n                    isLoading={ isLoading }\n                    type=\"submit\"\n                    variant={ ButtonVariant.Primary }\n                    onClick={onContinueButton}\n                >\n                    <TranslatedString id=\"common.continue_action\" />\n                </Button>\n            </div>\n        </>;\n    }\n}\n\nexport default ShippingFormFooter;\n","import { Address, AddressRequestBody, Cart, CheckoutSelectors, CheckoutStoreSelector, Consignment, ConsignmentAssignmentRequestBody, Country, CustomerAddress, FormField } from '@bigcommerce/checkout-sdk';\nimport { withFormik, FormikProps } from 'formik';\nimport React, { Fragment, PureComponent, ReactNode } from 'react';\n\nimport { isValidAddress, mapAddressFromFormValues, AddressFormModal, AddressFormValues } from '../address';\nimport { preventDefault } from '../common/dom';\nimport { ErrorModal } from '../common/error';\nimport { withLanguage, TranslatedLink, TranslatedString, WithLanguageProps } from '../locale';\nimport { Form } from '../ui/form';\n\nimport { AssignItemFailedError, AssignItemInvalidAddressError } from './errors';\nimport getShippableItemsCount from './getShippableItemsCount';\nimport getShippableLineItems from './getShippableLineItems';\nimport hasSelectedShippingOptions from './hasSelectedShippingOptions';\nimport hasUnassignedLineItems from './hasUnassignedLineItems';\nimport updateShippableItems from './updateShippableItems';\nimport ItemAddressSelect from './ItemAddressSelect';\nimport ShippableItem from './ShippableItem';\nimport ShippingFormFooter from './ShippingFormFooter';\n\nexport interface MultiShippingFormProps {\n    addresses: CustomerAddress[];\n    cart: Cart;\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    customerMessage: string;\n    isGuest: boolean;\n    isLoading: boolean;\n    shouldShowOrderComments: boolean;\n    defaultCountryCode?: string;\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    googleMapsApiKey?: string;\n    shouldShowAddAddressInCheckout: boolean;\n    assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    onCreateAccount(): void;\n    createCustomerAddress(address: AddressRequestBody): void;\n    onSignIn(): void;\n    getFields(countryCode?: string): FormField[];\n    onSubmit(values: MultiShippingFormValues): void;\n    onUnhandledError(error: Error): void;\n    onUseNewAddress(address: Address, itemId: string): void;\n}\n\ninterface ShippableItemId {\n    key: string;\n    itemId: string;\n}\n\nexport interface MultiShippingFormState {\n    items: ShippableItem[];\n    itemAddingAddress?: ShippableItemId;\n    createCustomerAddressError?: Error;\n}\n\nclass MultiShippingForm extends PureComponent<MultiShippingFormProps & WithLanguageProps & FormikProps<MultiShippingFormValues>, MultiShippingFormState> {\n    static getDerivedStateFromProps(\n        { cart, consignments }: MultiShippingFormProps,\n        state: MultiShippingFormState\n    ) {\n        if (!state || !state.items || getShippableItemsCount(cart) !== state.items.length) {\n            return { items: getShippableLineItems(cart, consignments) };\n        }\n\n        return null;\n    }\n\n    state: MultiShippingFormState = { items: [] };\n\n    render(): ReactNode {\n        const {\n            addresses,\n            consignments,\n            cart,\n            isGuest,\n            onSignIn,\n            onCreateAccount,\n            cartHasChanged,\n            shouldShowOrderComments,\n            isLoading,\n            getFields,\n            defaultCountryCode,\n            countries,\n            countriesWithAutocomplete,\n            googleMapsApiKey,\n        } = this.props;\n\n        const { items, itemAddingAddress, createCustomerAddressError } = this.state;\n\n        if (isGuest) {\n            return (\n                <div className=\"checkout-step-info\">\n                    <TranslatedString id=\"shipping.multishipping_guest_intro\" />\n                    { ' ' }\n                    <a data-test=\"shipping-sign-in-link\" href=\"#\" onClick={ preventDefault(onSignIn) }>\n                        <TranslatedString id=\"shipping.multishipping_guest_sign_in\" />\n                    </a>\n                    { ' ' }\n                    <TranslatedLink\n                        id=\"shipping.multishipping_guest_create\"\n                        onClick={ onCreateAccount }\n                    />\n                </div>\n            );\n        }\n\n        return (\n            <Fragment>\n                <ErrorModal\n                    error={ createCustomerAddressError }\n                    message={\n                        <>\n                            <TranslatedString id=\"address.consignment_address_updated_text\" />\n                            { ' ' }\n                            <TranslatedString id=\"customer.create_address_error\" />\n                        </>\n                    }\n                    onClose={ this.handleCloseErrorModal }\n                    shouldShowErrorCode={ false }\n                />\n                { <AddressFormModal\n                    countries={ countries }\n                    countriesWithAutocomplete={ countriesWithAutocomplete }\n                    defaultCountryCode={ defaultCountryCode }\n                    getFields={ getFields }\n                    googleMapsApiKey={ googleMapsApiKey }\n                    isLoading={ isLoading }\n                    isOpen={ !!itemAddingAddress }\n                    onRequestClose={ this.handleCloseAddAddressForm }\n                    onSaveAddress={ this.handleSaveAddress }\n                /> }\n\n                <Form>\n                    <ul className=\"consignmentList\">\n                        { items.map(item => (\n                            <li key={ item.key }>\n                                <ItemAddressSelect\n                                    addresses={ addresses }\n                                    item={ item }\n                                    onSelectAddress={ this.handleSelectAddress }\n                                    onUseNewAddress={ this.handleUseNewAddress }\n                                />\n                            </li>\n                        )) }\n                    </ul>\n\n                    <ShippingFormFooter\n                        cartHasChanged={ cartHasChanged }\n                        isLoading={ isLoading }\n                        isMultiShippingMode={ true }\n                        shouldDisableSubmit={ this.shouldDisableSubmit() }\n                        shouldShowOrderComments={ shouldShowOrderComments }\n                        shouldShowShippingOptions={ !hasUnassignedLineItems(consignments, cart.lineItems) }\n                        onContinueButton={this.onContinueButton}\n                    />\n                </Form>\n            </Fragment>\n        );\n    }\n\n    private onContinueButton: React.MouseEventHandler<HTMLElement> = event => {\n        event;\n    }\n\n    private handleCloseErrorModal: () => void = () => {\n        this.setState({ createCustomerAddressError: undefined });\n    };\n\n    private handleSaveAddress: (address: AddressFormValues) => void = async address => {\n        const { createCustomerAddress } = this.props;\n        const { itemAddingAddress } = this.state;\n\n        if (!itemAddingAddress) {\n            return;\n        }\n\n        const shippingAddress = mapAddressFromFormValues(address);\n\n        await this.handleSelectAddress(shippingAddress, itemAddingAddress.itemId, itemAddingAddress.key);\n\n        try {\n            await createCustomerAddress(shippingAddress);\n        } catch (e) {\n            this.setState({ createCustomerAddressError: e });\n        }\n\n        this.setState({\n            itemAddingAddress: undefined,\n        });\n    };\n\n    private handleUseNewAddress: (address: Address, itemId: string, itemKey: string) => void = (address, itemId, itemKey) => {\n        const { onUseNewAddress, shouldShowAddAddressInCheckout } = this.props;\n\n        if (!shouldShowAddAddressInCheckout) {\n            onUseNewAddress(address, itemId);\n\n            return;\n        }\n\n        this.setState({\n            itemAddingAddress: {\n                key: itemKey,\n                itemId,\n            },\n        });\n    };\n\n    private handleCloseAddAddressForm: () => void = () => {\n        this.setState({\n            itemAddingAddress: undefined,\n        });\n    };\n\n    private handleSelectAddress: (address: Address, itemId: string, itemKey: string) => Promise<void> = async (address, itemId, itemKey) => {\n        const {\n            assignItem,\n            onUnhandledError,\n            getFields,\n        } = this.props;\n\n        if (!isValidAddress(address, getFields(address.countryCode))) {\n            return onUnhandledError(new AssignItemInvalidAddressError());\n        }\n\n        try {\n            const { data } = await assignItem({\n                shippingAddress: address,\n                lineItems: [{\n                    itemId,\n                    quantity: 1,\n                }],\n            });\n\n            this.syncItems(itemKey, address, data);\n        } catch (e) {\n            onUnhandledError(new AssignItemFailedError(e));\n        }\n    };\n\n    private shouldDisableSubmit: () => boolean = () => {\n        const { isLoading, consignments } = this.props;\n\n        return isLoading || !hasSelectedShippingOptions(consignments);\n    };\n\n    private syncItems: (\n        key: string,\n        address: Address,\n        data: CheckoutStoreSelector\n    ) => void = (key, address, data) => {\n        const { items: currentItems } = this.state;\n        const items = updateShippableItems(\n            currentItems,\n            {\n                updatedItemIndex: currentItems.findIndex(item => item.key === key),\n                address,\n            },\n            {\n                cart: data.getCart(),\n                consignments: data.getConsignments(),\n            }\n        );\n\n        if (items) {\n            this.setState({ items });\n        }\n    };\n}\n\nexport interface MultiShippingFormValues {\n    orderComment: string;\n}\n\nexport default withLanguage(withFormik<MultiShippingFormProps & WithLanguageProps, MultiShippingFormValues>({\n    handleSubmit: (values, { props: { onSubmit } }) => {\n        onSubmit(values);\n    },\n    mapPropsToValues: ({ customerMessage }) => ({\n        orderComment: customerMessage,\n    }),\n    enableReinitialize: true,\n})(MultiShippingForm));\n","import { Address, Cart, Consignment } from '@bigcommerce/checkout-sdk';\n\nimport { isEqualAddress } from '../address';\n\nimport findConsignment from './findConsignment';\nimport ShippableItem from './ShippableItem';\n\nexport interface UpdateItemParams {\n    updatedItemIndex: number;\n    address: Address;\n}\n\nexport default function updateShippableItems(\n    items: ShippableItem[],\n    { updatedItemIndex, address }: UpdateItemParams,\n    { cart, consignments }: { cart?: Cart; consignments?: Consignment[] }\n): ShippableItem[] | undefined {\n    if (updatedItemIndex < 0 || updatedItemIndex >= items.length || !cart) {\n        return;\n    }\n\n    const cartItemIds = cart.lineItems.physicalItems.map(({ id }) => id);\n\n    const updatedConsignment = (consignments || []).find(consignment =>\n        isEqualAddress(consignment.shippingAddress, address)\n    );\n\n    const newId = findNewItemId(items[updatedItemIndex], cart, updatedConsignment);\n\n    return items.map((item, i) => {\n        if (newId && !cartItemIds.includes(item.id) || i === updatedItemIndex) {\n            const itemId = newId ?? item.id;\n\n            return {\n                ...item,\n                id: itemId,\n                consignment: findConsignment(consignments || [], itemId as string),\n            };\n        } else {\n            return item;\n        }\n    });\n}\n\nfunction findNewItemId(item: ShippableItem, cart?: Cart, consignment?: Consignment): string | undefined {\n    if (!cart || !consignment) {\n        return;\n    }\n\n    const { physicalItems } = cart.lineItems;\n    const matchingCartItems = physicalItems.filter(\n        ({ productId, variantId }) => productId === item.productId && variantId === item.variantId\n    );\n\n    const matchingCartItemIds = matchingCartItems.map(({ id }) => id);\n\n    return consignment.lineItemIds.find(id => matchingCartItemIds.includes(id));\n}\n","import { CheckoutSelectors, FormField, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { DynamicFormField, Fieldset } from '../ui/form';\n\nexport interface RemoteShippingAddressProps {\n    containerId: string;\n    methodId: string;\n    formFields: FormField[];\n    deinitialize(options?: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options?: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onUnhandledError?(error: Error): void;\n    onFieldChange(fieldName: string, value: string): void;\n}\n\nclass RemoteShippingAddress extends PureComponent<RemoteShippingAddressProps> {\n    async componentDidMount(): Promise<void> {\n        const {\n            initialize,\n            methodId,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await initialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const {\n            deinitialize,\n            methodId,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await deinitialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            containerId,\n            formFields,\n            methodId,\n        } = this.props;\n\n        return (\n            <>\n                <div\n                    className={ `widget address-widget widget--${methodId}` }\n                    id={ containerId }\n                    tabIndex={ -1 }\n                />\n                <Fieldset>\n                {\n                    formFields.filter(({ custom }) => custom).map(field => (\n                        <DynamicFormField\n                            field={ field }\n                            key={ `${field.id}-${field.name}` }\n                            onChange={ this.handleFieldValueChange(field.name) }\n                            parentFieldName=\"shippingAddress.customFields\"\n                        />\n                    ))\n                }\n                </Fieldset>\n            </>\n        );\n    }\n\n    private handleFieldValueChange: (name: string) => (value: string) => void = name => value => {\n        const { onFieldChange } = this.props;\n        onFieldChange(name, value);\n    };\n}\n\nexport default RemoteShippingAddress;\n","import { Address, Consignment, Country, CustomerAddress, FormField } from '@bigcommerce/checkout-sdk';\nimport React, { Component, ReactNode } from 'react';\n\nimport { AddressForm, AddressSelect } from '../address';\nimport { connectFormik, ConnectFormikProps } from '../common/form';\nimport { Fieldset } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\n\nimport { SingleShippingFormValues } from './SingleShippingForm';\nimport { TranslatedString} from '../locale';\n\nexport interface ShippingAddressFormProps {\n    addresses: CustomerAddress[];\n    address?: Address;\n    consignments: Consignment[];\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    formFields: FormField[];\n    shouldShowSaveAddress?: boolean;\n    onUseNewAddress(): void;\n    onFieldChange(fieldName: string, value: string): void;\n    onAddressSelect(address: Address): void;\n}\n\nconst addressFieldName = 'shippingAddress';\n\nclass ShippingAddressForm extends Component<ShippingAddressFormProps & ConnectFormikProps<SingleShippingFormValues>> {\n    render(): ReactNode {\n        const {\n            addresses,\n            address: shippingAddress,\n            onAddressSelect,\n            onUseNewAddress,\n            shouldShowSaveAddress,\n            countries,\n            countriesWithAutocomplete,\n            formFields,\n            isLoading,\n            googleMapsApiKey,\n            formik: {\n                values: {\n                    shippingAddress: formAddress,\n                },\n            },\n        } = this.props;\n\n        const hasAddresses = addresses && addresses.length > 0;\n        //const hasValidCustomerAddress = isValidCustomerAddress(shippingAddress, addresses, formFields);\n        const hasValidCustomerAddress = true;\n\n        return (\n            <Fieldset id=\"checkoutShippingAddress\">\n                { hasAddresses &&\n                    <Fieldset id=\"shippingAddresses\">\n                        <LoadingOverlay isLoading={isLoading}>\n                            <AddressSelect\n                                addresses={addresses}\n                                onSelectAddress={onAddressSelect}\n                                onUseNewAddress={onUseNewAddress}\n                                selectedAddress={hasValidCustomerAddress ? shippingAddress : undefined}\n                            />\n                        </LoadingOverlay>\n                    </Fieldset>}\n\n                { !hasValidCustomerAddress &&\n\n                    <div className=\"shippingOptions-panel optimizedCheckout-overlay\">\n                        <p className=\"shippingOptions-panel-message optimizedCheckout-primaryContent\">\n                            <TranslatedString id=\"shipping.noAddress_label\" />\n                        </p>\n                    </div>\n                    &&\n                    <LoadingOverlay isLoading={isLoading} unmountContentWhenLoading>\n                        <AddressForm\n                            countries={countries}\n                            countriesWithAutocomplete={countriesWithAutocomplete}\n                            countryCode={formAddress && formAddress.countryCode}\n                            fieldName={addressFieldName}\n                            formFields={formFields}\n                            googleMapsApiKey={googleMapsApiKey}\n                            onAutocompleteToggle={this.handleAutocompleteToggle}\n                            onChange={this.handleChange}\n                            setFieldValue={this.setFieldValue}\n                            shouldShowSaveAddress={shouldShowSaveAddress}\n                        />\n                    </LoadingOverlay>}\n            </Fieldset>\n        );\n    }\n\n    private setFieldValue: (fieldName: string, fieldValue: string) => void = (fieldName, fieldValue) => {\n        const {\n            formik: { setFieldValue },\n            formFields,\n        } = this.props;\n\n        const customFormFieldNames = formFields\n            .filter(field => field.custom)\n            .map(field => field.name);\n\n        const formFieldName = customFormFieldNames.includes(fieldName) ?\n            `customFields.${fieldName}` :\n            fieldName;\n\n        setFieldValue(`${addressFieldName}.${formFieldName}`, fieldValue);\n    };\n\n    private handleChange: (fieldName: string, value: string) => void = (fieldName, value) => {\n        const {\n            onFieldChange,\n        } = this.props;\n\n        onFieldChange(fieldName, value);\n    };\n\n    private handleAutocompleteToggle: (state: { inputValue: string; isOpen: boolean }) => void = ({ isOpen, inputValue }) => {\n        const { onFieldChange } = this.props;\n\n        if (!isOpen) {\n            onFieldChange('address1', inputValue);\n        }\n    };\n}\n\nexport default connectFormik(ShippingAddressForm);\n","import { Address, CheckoutSelectors, FormField, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { StaticAddress } from '../address/';\nimport { preventDefault } from '../common/dom';\nimport { TranslatedString } from '../locale';\nimport { Button, ButtonSize, ButtonVariant } from '../ui/button';\nimport { DynamicFormField, Fieldset } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\n\nimport './StaticAddressEditable.scss';\n\nexport interface StaticAddressEditableProps {\n    address: Address;\n    buttonId: string;\n    formFields: FormField[];\n    isLoading: boolean;\n    methodId?: string;\n    deinitialize(options?: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options?: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onFieldChange(fieldName: string, value: string): void;\n    onUnhandledError?(error: Error): void;\n}\n\nclass StaticAddressEditable extends PureComponent<StaticAddressEditableProps> {\n    async componentDidMount(): Promise<void> {\n        const {\n            initialize,\n            methodId,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await initialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const {\n            deinitialize,\n            methodId,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await deinitialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            address,\n            buttonId,\n            formFields,\n            isLoading,\n        } = this.props;\n\n        const customFormFields = formFields.filter(({ custom }) => custom);\n        const shouldShowCustomFormFields = customFormFields.length > 0;\n\n        return (\n            <LoadingOverlay isLoading={ isLoading }>\n                <div className=\"stepHeader\" style={ { padding: 0 } }>\n                    <div className=\"stepHeader-body subheader\">\n                        <StaticAddress\n                            address={ address }\n                        />\n                    </div>\n\n                    <div className=\"stepHeader-actions subheader\">\n                        <Button\n                            id={ buttonId }\n                            onClick={ preventDefault() }\n                            size={ ButtonSize.Tiny }\n                            testId=\"step-edit-button\"\n                            variant={ ButtonVariant.Secondary }\n                        >\n                            <TranslatedString id=\"common.edit_action\" />\n                        </Button>\n                    </div>\n                </div>\n\n                { shouldShowCustomFormFields && <Fieldset id=\"customFieldset\">\n                    {\n                        customFormFields.map(field => (\n                            <DynamicFormField\n                                field={ field }\n                                key={ `${field.id}-${field.name}` }\n                                onChange={ this.handleFieldValueChange(field.name) }\n                                parentFieldName=\"shippingAddress.customFields\"\n                            />\n                        ))\n                    }\n                </Fieldset> }\n            </LoadingOverlay>\n        );\n    }\n\n    private handleFieldValueChange: (name: string) => (value: string) => void = name => value => {\n        const { onFieldChange } = this.props;\n        onFieldChange(name, value);\n    };\n}\n\nexport default StaticAddressEditable;\n","import { Address, CheckoutSelectors, Consignment, Country, CustomerAddress, FormField, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport { noop } from 'lodash';\nimport React, { memo, useCallback, useContext, FunctionComponent } from 'react';\n\nimport { FormContext } from '../ui/form';\n\nimport RemoteShippingAddress from './RemoteShippingAddress';\nimport ShippingAddressForm from './ShippingAddressForm';\nimport StaticAddressEditable from './StaticAddressEditable';\n\nexport interface ShippingAddressProps {\n    addresses: CustomerAddress[];\n    consignments: Consignment[];\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    formFields: FormField[];\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowSaveAddress?: boolean;\n    hasRequestedShippingOptions: boolean;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onAddressSelect(address: Address): void;\n    onFieldChange(name: string, value: string): void;\n    onUnhandledError?(error: Error): void;\n    onUseNewAddress(): void;\n}\n\nconst ShippingAddress: FunctionComponent<ShippingAddressProps> = props => {\n    const {\n        methodId,\n        formFields,\n        countries,\n        countriesWithAutocomplete,\n        consignments,\n        googleMapsApiKey,\n        onAddressSelect,\n        onFieldChange,\n        onUseNewAddress,\n        initialize,\n        deinitialize,\n        isLoading,\n        shippingAddress,\n        hasRequestedShippingOptions,\n        addresses,\n        shouldShowSaveAddress,\n        onUnhandledError = noop,\n        isShippingStepPending,\n    } = props;\n\n    const { setSubmitted } = useContext(FormContext);\n\n    const initializeShipping = useCallback(memoizeOne((defaultOptions: ShippingInitializeOptions) => (\n        (options?: ShippingInitializeOptions) => initialize({\n            ...defaultOptions,\n            ...options,\n        })\n    )), []);\n\n    const handleFieldChange: (fieldName: string, value: string) => void = (fieldName, value) => {\n        if (hasRequestedShippingOptions) {\n            setSubmitted(true);\n        }\n\n        onFieldChange(fieldName, value);\n    };\n\n    if (methodId) {\n        const containerId = 'addressWidget';\n        let options: ShippingInitializeOptions = {};\n\n        if (methodId === 'amazon') {\n            options = {\n                amazon: {\n                    container: containerId,\n                    onError: onUnhandledError,\n                },\n            };\n\n            return (\n                <RemoteShippingAddress\n                    containerId={ containerId }\n                    deinitialize={ deinitialize }\n                    formFields={ formFields }\n                    initialize={ initializeShipping(options) }\n                    methodId={ methodId }\n                    onFieldChange={ onFieldChange }\n                />\n            );\n        }\n\n        if (methodId === 'amazonpay' && shippingAddress) {\n            const editAddressButtonId = 'edit-ship-button';\n\n            options = {\n                amazonpay: {\n                    editAddressButtonId,\n                },\n            };\n\n            return (\n                <StaticAddressEditable\n                    address={ shippingAddress }\n                    buttonId={ editAddressButtonId }\n                    deinitialize={ deinitialize }\n                    formFields={ formFields }\n                    initialize={ initializeShipping(options) }\n                    isLoading={ isShippingStepPending }\n                    methodId={ methodId }\n                    onFieldChange={ onFieldChange }\n                />\n            );\n        }\n    }\n\n    return (\n        <ShippingAddressForm\n            address={ shippingAddress }\n            addresses={ addresses }\n            consignments={ consignments }\n            countries={ countries }\n            countriesWithAutocomplete={ countriesWithAutocomplete }\n            formFields={ formFields }\n            googleMapsApiKey={ googleMapsApiKey }\n            isLoading={ isLoading }\n            onAddressSelect={ onAddressSelect }\n            onFieldChange={ handleFieldChange }\n            onUseNewAddress={ onUseNewAddress }\n            shouldShowSaveAddress={ shouldShowSaveAddress }\n        />\n    );\n};\n\nexport default memo(ShippingAddress);\n","export const SHIPPING_ADDRESS_FIELDS = [\n    'address1',\n    'postalCode',\n    'countryCode',\n    'city',\n    'stateOrProvince',\n    'stateOrProvinceCode',\n];\n","import { Address, CheckoutParams, CheckoutSelectors, Consignment, Country, CustomerAddress, CustomerRequestOptions, FormField, RequestOptions, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport { withFormik, FormikProps } from 'formik';\nimport { debounce, noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\nimport { lazy, object } from 'yup';\n\nimport { getAddressFormFieldsValidationSchema, getTranslateAddressError, isEqualAddress, mapAddressFromFormValues, mapAddressToFormValues, AddressFormValues } from '../address';\nimport { getCustomFormFieldsValidationSchema } from '../formFields';\nimport { withLanguage, WithLanguageProps } from '../locale';\nimport { Fieldset, Form, FormContext } from '../ui/form';\n\nimport hasSelectedShippingOptions from './hasSelectedShippingOptions';\n//import BillingSameAsShippingField from './BillingSameAsShippingField';\nimport ShippingAddress from './ShippingAddress';\nimport { SHIPPING_ADDRESS_FIELDS } from './ShippingAddressFields';\nimport ShippingFormFooter from './ShippingFormFooter';\n\nimport { storage } from '../coldChainCheckout/utils';\n\nexport interface SingleShippingFormProps {\n    addresses: CustomerAddress[];\n    isBillingSameAsShipping: boolean;\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customerMessage: string;\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    isMultiShippingMode: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowSaveAddress?: boolean;\n    shouldShowOrderComments: boolean;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    deleteConsignments(): Promise<Address | undefined>;\n    getFields(countryCode?: string): FormField[];\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onSubmit(values: SingleShippingFormValues): void;\n    onUnhandledError?(error: Error): void;\n    signOut(options?: CustomerRequestOptions): void;\n    updateAddress(address: Partial<Address>, options?: RequestOptions<CheckoutParams>): Promise<CheckoutSelectors>;\n}\n\nexport interface SingleShippingFormValues {\n    billingSameAsShipping: boolean;\n    shippingAddress?: AddressFormValues;\n    orderComment: string;\n}\n\ninterface SingleShippingFormState {\n    isResettingAddress: boolean;\n    isUpdatingShippingData: boolean;\n    hasRequestedShippingOptions: boolean;\n}\n\nexport const SHIPPING_AUTOSAVE_DELAY = 1700;\n\n/*\nconst setDefaultShippingOption = (props:any) =>{\n    var defaultShippingOption = {\n        \"additionalDescription\": \"\",\n        \"cost\": 0,\n        \"description\": \"Free Shipping\",\n        \"id\": \"4dcbf24f457dd67d5f89bcf374e0bc9b\",\n        \"imageUrl\": \"\",\n        \"isRecommended\": true,\n        \"transitTime\": \"\",\n        \"type\": \"freeshipping\"\n    };\n    if (props.consignments && props.consignments.length > 0) {\n        if (!props.consignments[0].availableShippingOptions) {\n            props.consignments[0].availableShippingOptions = [];\n        }\n        if (props.consignments[0].availableShippingOptions?.length == 0) {\n            props.consignments[0].availableShippingOptions.push(defaultShippingOption);\n        }\n        props.consignments[0].selectedShippingOption = props.consignments[0].availableShippingOptions[0];\n    }\n}\n*/\n\nclass SingleShippingForm extends PureComponent<SingleShippingFormProps & WithLanguageProps & FormikProps<SingleShippingFormValues>> {\n    static contextType = FormContext;\n\n    state: SingleShippingFormState = {\n        isResettingAddress: false,\n        isUpdatingShippingData: false,\n        hasRequestedShippingOptions: false,\n    };\n\n    private debouncedUpdateAddress: any;\n\n    constructor(props: SingleShippingFormProps & WithLanguageProps & FormikProps<SingleShippingFormValues>) {\n        super(props);\n\n        const { updateAddress } = this.props;\n        \n        this.debouncedUpdateAddress = debounce(async (address: Address, includeShippingOptions: boolean) => {\n            try {\n                await updateAddress(address, {\n                    params: {\n                        include: {\n                            'consignments.availableShippingOptions': includeShippingOptions,\n                        },\n                    },\n                });\n                if (includeShippingOptions) {\n                    this.setState({ hasRequestedShippingOptions: true });\n                }\n            } finally {\n                this.setState({ isUpdatingShippingData: false });\n            }\n        }, SHIPPING_AUTOSAVE_DELAY);\n    }\n\n    render(): ReactNode {\n        const {\n            addresses,\n            cartHasChanged,\n            isLoading,\n            onUnhandledError,\n            methodId,\n            shouldShowSaveAddress,\n            countries,\n            countriesWithAutocomplete,\n            googleMapsApiKey,\n            shippingAddress,\n            consignments,\n            shouldShowOrderComments,\n            initialize,\n            isValid,\n            deinitialize,\n            values: { shippingAddress: addressForm },\n            isShippingStepPending,\n        } = this.props;\n\n        const {\n            isResettingAddress,\n            isUpdatingShippingData,\n            hasRequestedShippingOptions,\n        } = this.state;\n\n        //const PAYMENT_METHOD_VALID = ['amazon', 'amazonpay'];\n        //const shouldShowBillingSameAsShipping = !PAYMENT_METHOD_VALID.some(method => method === methodId);\n\n        //setDefaultShippingOption(this.props);\n\n        return (\n            <Form autoComplete=\"on\">\n                <Fieldset>\n                    <ShippingAddress\n                        addresses={addresses}\n                        consignments={consignments}\n                        countries={countries}\n                        countriesWithAutocomplete={countriesWithAutocomplete}\n                        deinitialize={deinitialize}\n                        formFields={this.getFields(addressForm && addressForm.countryCode)}\n                        googleMapsApiKey={googleMapsApiKey}\n                        hasRequestedShippingOptions={hasRequestedShippingOptions}\n                        initialize={initialize}\n                        isLoading={isResettingAddress}\n                        isShippingStepPending={isShippingStepPending}\n                        methodId={methodId}\n                        onAddressSelect={this.handleAddressSelect}\n                        onFieldChange={this.handleFieldChange}\n                        onUnhandledError={onUnhandledError}\n                        onUseNewAddress={this.onUseNewAddress}\n                        shippingAddress={shippingAddress}\n                        shouldShowSaveAddress={shouldShowSaveAddress}\n                    />\n                    {\n                    //    shouldShowBillingSameAsShipping && <div className=\"form-body\">\n                    //        <BillingSameAsShippingField />\n                    //    </div>\n                    }\n                </Fieldset>\n\n                <ShippingFormFooter\n                    cartHasChanged={cartHasChanged}\n                    isLoading={isLoading || isUpdatingShippingData}\n                    isMultiShippingMode={false}\n                    shouldDisableSubmit={this.shouldDisableSubmit()}\n                    shouldShowOrderComments={shouldShowOrderComments}\n                    shouldShowShippingOptions={isValid}\n                    onContinueButton={this.onContinueButton}\n                />\n            </Form>\n        );\n    }\n\n    private shouldDisableSubmit: () => boolean = () => {\n        const {\n            isLoading,\n            consignments,\n            isValid,\n        } = this.props;\n\n        const {\n            isUpdatingShippingData,\n        } = this.state;\n\n        if (!isValid) {\n            return false;\n        }\n\n        return isLoading || isUpdatingShippingData || !hasSelectedShippingOptions(consignments);\n    };\n\n    private handleFieldChange: (name: string) => void = async name => {\n        const {\n            setFieldValue,\n        } = this.props;\n\n        if (name === 'countryCode') {\n            setFieldValue('shippingAddress.stateOrProvince', '');\n            setFieldValue('shippingAddress.stateOrProvinceCode', '');\n        }\n\n        // Enqueue the following code to run after Formik has run validation\n        await new Promise(resolve => setTimeout(resolve));\n\n        const isShippingField = SHIPPING_ADDRESS_FIELDS.includes(name);\n\n        const { hasRequestedShippingOptions } = this.state;\n\n        const { isValid } = this.props;\n\n        if (!isValid) {\n            return;\n        }\n\n        this.updateAddressWithFormData(isShippingField || !hasRequestedShippingOptions);\n    };\n\n    private updateAddressWithFormData(includeShippingOptions: boolean) {\n        const {\n            shippingAddress,\n            values: { shippingAddress: addressForm },\n        } = this.props;\n\n        const updatedShippingAddress = addressForm && mapAddressFromFormValues(addressForm);\n\n        if (!updatedShippingAddress || isEqualAddress(updatedShippingAddress, shippingAddress)) {\n            return;\n        }\n\n        this.setState({ isUpdatingShippingData: true });\n        this.debouncedUpdateAddress(updatedShippingAddress, includeShippingOptions);\n    }\n\n    private handleAddressSelect: (\n        address: Address | any\n    ) => void = async address => {\n        const {\n            updateAddress,\n            onUnhandledError = noop,\n            values,\n            setValues,\n        } = this.props;\n\n        storage.CCSelectShippingAddressId.setValue((address.id) ? address.id : \"\");\n        storage.CCSelectedAddress.setValue(JSON.stringify(address));\n\n        this.setState({ isResettingAddress: true });\n\n        try {\n            await updateAddress(address);\n\n            setValues({\n                ...values,\n                shippingAddress: mapAddressToFormValues(\n                    this.getFields(address.countryCode),\n                    address\n                ),\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        } finally {\n            this.setState({ isResettingAddress: false });\n        }\n    };\n\n\n    private onContinueButton: React.MouseEventHandler<HTMLElement> = async event => {\n        const {\n            onSubmit,\n            onUnhandledError = noop\n        } = this.props;\n        event;\n        var address;\n        var shippingMethod = storage.CCShippingMethod.getValue();\n        console.log(\"in continue, storage.CCShippingMethod value:\"+storage.CCShippingMethod.getValue());\n        console.log(\"in continue, storage.CCSelectedAddress value:\"+storage.CCSelectedAddress.getValue());\n        if (shippingMethod == \"OTS\"){\n            address = JSON.parse(storage.CCOTSAddress.getValue());\n            await this.handleAddressSelect(address);\n        }else{\n            address = JSON.parse(storage.CCSelectedAddress.getValue());\n        }\n        var addrValue = {\n            billingSameAsShipping: true,\n            shippingAddress: mapAddressToFormValues(\n                this.getFields(address.countryCode),\n                address\n            ),\n            orderComment: \"\"\n        };\n        try{\n            onSubmit(addrValue);\n        }catch(err){\n            onUnhandledError(err);\n        }\n    }\n\n    private onUseNewAddress: () => void = async () => {\n        const {\n            deleteConsignments,\n            onUnhandledError = noop,\n            setValues,\n            values,\n        } = this.props;\n\n        this.setState({ isResettingAddress: true });\n\n        try {\n            const address = await deleteConsignments();\n            setValues({\n                ...values,\n                shippingAddress: mapAddressToFormValues(\n                    this.getFields(address && address.countryCode),\n                    address\n                ),\n            });\n        } catch (e) {\n            onUnhandledError(e);\n        } finally {\n            this.setState({ isResettingAddress: false });\n        }\n    };\n\n    private getFields(countryCode: string | undefined): FormField[] {\n        const {\n            getFields,\n        } = this.props;\n\n        return getFields(countryCode);\n    }\n}\n\nexport default withLanguage(withFormik<SingleShippingFormProps & WithLanguageProps, SingleShippingFormValues>({\n    handleSubmit: (values, { props: { onSubmit} }) => {\n        onSubmit(values);\n    },\n    mapPropsToValues: ({ getFields, shippingAddress, isBillingSameAsShipping, customerMessage }) => ({\n        billingSameAsShipping: isBillingSameAsShipping,\n        orderComment: customerMessage,\n        shippingAddress: mapAddressToFormValues(\n            getFields(shippingAddress && shippingAddress.countryCode),\n            shippingAddress\n        ),\n    }),\n    isInitialValid: ({\n        shippingAddress,\n        getFields,\n        language,\n    }) => (\n        !!shippingAddress && getAddressFormFieldsValidationSchema({\n            language,\n            formFields: getFields(shippingAddress.countryCode),\n        }).isValidSync(shippingAddress)\n    ),\n    validationSchema: ({\n        language,\n        getFields,\n        methodId,\n    }: SingleShippingFormProps & WithLanguageProps) => methodId ?\n            object({\n                shippingAddress: lazy<Partial<AddressFormValues>>(formValues =>\n                    getCustomFormFieldsValidationSchema({\n                        translate: getTranslateAddressError(language),\n                        formFields: getFields(formValues && formValues.countryCode),\n                    })\n                ),\n            }) :\n            object({\n                shippingAddress: lazy<Partial<AddressFormValues>>(formValues =>\n                    getAddressFormFieldsValidationSchema({\n                        language,\n                        formFields: getFields(formValues && formValues.countryCode),\n                    })\n                ),\n            }),\n    enableReinitialize: false,\n})(SingleShippingForm));\n","import { Address, AddressRequestBody, Cart, CheckoutParams, CheckoutSelectors, Consignment, ConsignmentAssignmentRequestBody, Country, CustomerAddress, CustomerRequestOptions, FormField, RequestOptions, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport React, { Component, ReactNode } from 'react';\n\nimport { withLanguage, WithLanguageProps } from '../locale';\n\nimport MultiShippingForm, { MultiShippingFormValues } from './MultiShippingForm';\nimport SingleShippingForm, { SingleShippingFormValues } from './SingleShippingForm';\n\nexport interface ShippingFormProps {\n    addresses: CustomerAddress[];\n    cart: Cart;\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customerMessage: string;\n    googleMapsApiKey?: string;\n    isBillingSameAsShipping: boolean;\n    isGuest: boolean;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    isMultiShippingMode: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowSaveAddress?: boolean;\n    shouldShowOrderComments: boolean;\n    shouldShowAddAddressInCheckout: boolean;\n    assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    deleteConsignments(): Promise<Address | undefined>;\n    getFields(countryCode?: string): FormField[];\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onCreateAccount(): void;\n    createCustomerAddress(address: AddressRequestBody): Promise<CheckoutSelectors>;\n    onMultiShippingSubmit(values: MultiShippingFormValues): void;\n    onSignIn(): void;\n    onSingleShippingSubmit(values: SingleShippingFormValues): void;\n    onUnhandledError(error: Error): void;\n    onUseNewAddress(address: Address, itemId: string): void;\n    signOut(options?: CustomerRequestOptions): void;\n    updateAddress(address: Partial<Address>, options: RequestOptions<CheckoutParams>): Promise<CheckoutSelectors>;\n}\n\nclass ShippingForm extends Component<ShippingFormProps & WithLanguageProps> {\n    render(): ReactNode {\n        const {\n            addresses,\n            assignItem,\n            cart,\n            cartHasChanged,\n            createCustomerAddress,\n            consignments,\n            countries,\n            countriesWithAutocomplete,\n            onCreateAccount,\n            customerMessage,\n            deinitialize,\n            deleteConsignments,\n            getFields,\n            googleMapsApiKey,\n            initialize,\n            isBillingSameAsShipping,\n            isGuest,\n            isLoading,\n            isMultiShippingMode,\n            methodId,\n            onMultiShippingSubmit,\n            onSignIn,\n            onSingleShippingSubmit,\n            onUnhandledError,\n            onUseNewAddress,\n            shippingAddress,\n            shouldShowOrderComments,\n            shouldShowSaveAddress,\n            shouldShowAddAddressInCheckout,\n            signOut,\n            updateAddress,\n            isShippingStepPending,\n        } = this.props;\n\n        return isMultiShippingMode ?\n            <MultiShippingForm\n                addresses={ addresses }\n                assignItem={ assignItem }\n                cart={ cart }\n                cartHasChanged={ cartHasChanged }\n                consignments={ consignments }\n                countries={ countries }\n                countriesWithAutocomplete={ countriesWithAutocomplete }\n                createCustomerAddress={ createCustomerAddress }\n                customerMessage={ customerMessage }\n                defaultCountryCode={ shippingAddress?.countryCode }\n                getFields={ getFields }\n                googleMapsApiKey={ googleMapsApiKey }\n                isGuest={ isGuest }\n                isLoading={ isLoading }\n                onCreateAccount={ onCreateAccount }\n                onSignIn={ onSignIn }\n                onSubmit={ onMultiShippingSubmit }\n                onUnhandledError={ onUnhandledError }\n                onUseNewAddress={ onUseNewAddress }\n                shouldShowAddAddressInCheckout={ shouldShowAddAddressInCheckout }\n                shouldShowOrderComments={ shouldShowOrderComments }\n            /> :\n            <SingleShippingForm\n                addresses={ addresses }\n                cartHasChanged={ cartHasChanged }\n                consignments={ consignments }\n                countries={ countries }\n                countriesWithAutocomplete={ countriesWithAutocomplete }\n                customerMessage={ customerMessage }\n                deinitialize={ deinitialize }\n                deleteConsignments={ deleteConsignments }\n                getFields={ getFields }\n                googleMapsApiKey={ googleMapsApiKey }\n                initialize={ initialize }\n                isBillingSameAsShipping={ isBillingSameAsShipping }\n                isLoading={ isLoading }\n                isMultiShippingMode={ isMultiShippingMode }\n                isShippingStepPending={ isShippingStepPending }\n                methodId={ methodId }\n                onSubmit={ onSingleShippingSubmit }\n                onUnhandledError={ onUnhandledError }\n                shippingAddress={ shippingAddress }\n                shouldShowOrderComments={ shouldShowOrderComments }\n                shouldShowSaveAddress={ shouldShowSaveAddress }\n                signOut={ signOut }\n                updateAddress={ updateAddress }\n            />;\n    }\n}\n\nexport default withLanguage(ShippingForm);\n","import React, { memo, FunctionComponent } from 'react';\n\nimport { preventDefault } from '../common/dom';\nimport { TranslatedString } from '../locale';\nimport { Legend } from '../ui/form';\n\ninterface ShippingHeaderProps {\n    isMultiShippingMode: boolean;\n    isGuest: boolean;\n    shouldShowMultiShipping: boolean;\n    onMultiShippingChange(): void;\n}\n\nconst ShippingHeader: FunctionComponent<ShippingHeaderProps> = ({\n    isMultiShippingMode,\n    isGuest,\n    onMultiShippingChange,\n    shouldShowMultiShipping,\n}) => (\n    <div className=\"form-legend-container\">\n        <Legend testId=\"shipping-address-heading\">\n            <TranslatedString\n                id={ isMultiShippingMode ?\n                    (isGuest ?\n                        'shipping.multishipping_address_heading_guest' :\n                        'shipping.multishipping_address_heading') :\n                    'shipping.shipping_address_heading' }\n            />\n        </Legend>\n\n        { shouldShowMultiShipping &&\n            <a\n                data-test=\"shipping-mode-toggle\"\n                href=\"#\"\n                onClick={ preventDefault(onMultiShippingChange) }\n            >\n                <TranslatedString id={ isMultiShippingMode ?\n                    'shipping.ship_to_single' :\n                    'shipping.ship_to_multi' }\n                />\n            </a> }\n    </div>\n);\n\nexport default memo(ShippingHeader);\n","import { Address, AddressRequestBody, Cart, CheckoutRequestBody, CheckoutSelectors, Consignment, ConsignmentAssignmentRequestBody, Country, Customer, CustomerRequestOptions, FormField, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\nimport { createSelector } from 'reselect';\n\nimport { isEqualAddress, mapAddressFromFormValues } from '../address';\nimport { withCheckout, CheckoutContextProps } from '../checkout';\nimport { EMPTY_ARRAY } from '../common/utility';\nimport { LoadingOverlay } from '../ui/loading';\n\nimport { UnassignItemError } from './errors';\nimport getShippableItemsCount from './getShippableItemsCount';\nimport getShippingMethodId from './getShippingMethodId';\nimport { MultiShippingFormValues } from './MultiShippingForm';\nimport ShippingForm from './ShippingForm';\nimport ShippingHeader from './ShippingHeader';\nimport { SingleShippingFormValues } from './SingleShippingForm';\n\nimport { storage } from '../coldChainCheckout/utils';\nvar _ = require('underscore');\n\nexport interface ShippingProps {\n    isBillingSameAsShipping: boolean;\n    cartHasChanged: boolean;\n    isMultiShippingMode: boolean;\n    onCreateAccount(): void;\n    onToggleMultiShipping(): void;\n    onReady?(): void;\n    onUnhandledError(error: Error): void;\n    onSignIn(): void;\n    navigateNextStep(isBillingSameAsShipping: boolean): void;\n    shippingAddress?: Address | any;\n}\n\nexport interface WithCheckoutShippingProps {\n    billingAddress?: Address;\n    cart: Cart;\n    consignments: Consignment[];\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customer: Customer;\n    customerMessage: string;\n    googleMapsApiKey: string;\n    isGuest: boolean;\n    isInitializing: boolean;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    methodId?: string;\n    //shippingAddress?: Address | any;\n    shouldShowAddAddressInCheckout: boolean;\n    shouldShowMultiShipping: boolean;\n    shouldShowOrderComments: boolean;\n    assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    deinitializeShippingMethod(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    deleteConsignments(): Promise<Address | undefined>;\n    getFields(countryCode?: string): FormField[];\n    initializeShippingMethod(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    loadShippingAddressFields(): Promise<CheckoutSelectors>;\n    loadShippingOptions(): Promise<CheckoutSelectors>;\n    signOut(options?: CustomerRequestOptions): void;\n    createCustomerAddress(address: AddressRequestBody): Promise<CheckoutSelectors>;\n    unassignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    updateBillingAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n    updateCheckout(payload: CheckoutRequestBody): Promise<CheckoutSelectors>;\n    updateShippingAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n}\n\ninterface ShippingState {\n    isInitializing: boolean;\n    ccAddress: Array<any>;\n    myShippingAddress?: Address | undefined;\n}\n\nclass Shipping extends Component<ShippingProps & WithCheckoutShippingProps, ShippingState> {\n    constructor(props: ShippingProps & WithCheckoutShippingProps) {\n        super(props);\n\n        this.state = {\n            isInitializing: true,\n            ccAddress: [],\n            myShippingAddress: props.shippingAddress\n        };\n    }\n\n    async componentDidMount(): Promise<void> {\n        const {\n            loadShippingAddressFields,\n            loadShippingOptions,\n            onReady = noop,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await Promise.all([\n                loadShippingAddressFields(),\n                loadShippingOptions(),\n            ]);\n\n            var address = JSON.parse(storage.CCAddresses.getValue());\n\n            if (address) {\n                this.setState({\n                    ccAddress: _.values(address.addresses)\n                })\n\n                this.props.customer.addresses = _.values(address.addresses);\n                //if (!this.props.shippingAddress || this.props.shippingAddress.customFields.length == 0){\n                //    this.setState({\n                //        shippingAddress: address.addresses[address.defaultShippingId]\n                //    })\n                //}\n            }\n\n            onReady();\n        } catch (error) {\n            onUnhandledError(error);\n        } finally {\n            this.setState({ isInitializing: false });\n        }\n    }\n\n    async componentWillReceiveProps(nextProps:any): Promise<void> {\n        //if (!isEqualAddress(this.props.shippingAddress, nextProps.shippingAddress)) {\n            this.setState({\n                myShippingAddress: nextProps.shippingAddress\n            })\n        //}\n    }\n\n    render(): ReactNode {\n        const {\n            isBillingSameAsShipping,\n            isGuest,\n            shouldShowMultiShipping,\n            customer,\n            unassignItem,\n            updateShippingAddress,\n            initializeShippingMethod,\n            deinitializeShippingMethod,\n            isMultiShippingMode,\n            onToggleMultiShipping,\n            shippingAddress,\n            ...shippingFormProps\n        } = this.props;\n\n        const {\n            isInitializing,\n            ccAddress,\n            myShippingAddress\n        } = this.state;\n\n        return (\n            <div className=\"checkout-form\">\n                <ShippingHeader\n                    isGuest={isGuest}\n                    isMultiShippingMode={isMultiShippingMode}\n                    onMultiShippingChange={this.handleMultiShippingModeSwitch}\n                    shouldShowMultiShipping={shouldShowMultiShipping}\n                />\n\n                <LoadingOverlay\n                    isLoading={isInitializing}\n                    unmountContentWhenLoading\n                >\n                    <ShippingForm\n                        {...shippingFormProps}\n                        addresses={ccAddress}\n                        deinitialize={deinitializeShippingMethod}\n                        initialize={initializeShippingMethod}\n                        isBillingSameAsShipping={isBillingSameAsShipping}\n                        isGuest={isGuest}\n                        isMultiShippingMode={isMultiShippingMode}\n                        onMultiShippingSubmit={this.handleMultiShippingSubmit}\n                        onSingleShippingSubmit={this.handleSingleShippingSubmit}\n                        onUseNewAddress={this.handleUseNewAddress}\n                        shouldShowSaveAddress={!isGuest}\n                        updateAddress={updateShippingAddress}\n                        shippingAddress={myShippingAddress}\n                    />\n                </LoadingOverlay>\n            </div>\n        );\n    }\n\n    private handleMultiShippingModeSwitch: () => void = async () => {\n        const {\n            consignments,\n            isMultiShippingMode,\n            onToggleMultiShipping = noop,\n            onUnhandledError = noop,\n            updateShippingAddress,\n        } = this.props;\n\n        if (isMultiShippingMode && consignments.length > 1) {\n            this.setState({ isInitializing: true });\n\n            try {\n                // Collapse all consignments into one\n                await updateShippingAddress(consignments[0].shippingAddress);\n            } catch (error) {\n                onUnhandledError(error);\n            } finally {\n                this.setState({ isInitializing: false });\n            }\n        }\n\n        onToggleMultiShipping();\n    };\n\n    private handleSingleShippingSubmit: (values: SingleShippingFormValues) => void = async ({\n        //billingSameAsShipping,\n        shippingAddress: addressValues,\n        orderComment,\n    }) => {\n        const {\n            customerMessage,\n            updateCheckout,\n            updateShippingAddress,\n            updateBillingAddress,\n            navigateNextStep,\n            onUnhandledError,\n            shippingAddress,\n            billingAddress,\n            methodId,\n        } = this.props;\n\n        const localBillingSameAsShipping = false;\n\n        const updatedShippingAddress = addressValues && mapAddressFromFormValues(addressValues);\n        const promises: Array<Promise<CheckoutSelectors>> = [];\n        const hasRemoteBilling = this.hasRemoteBilling(methodId);\n\n        if (!isEqualAddress(updatedShippingAddress, shippingAddress)) {\n            promises.push(updateShippingAddress(updatedShippingAddress || {}));\n        }\n\n        if (localBillingSameAsShipping &&\n            updatedShippingAddress &&\n            !isEqualAddress(updatedShippingAddress, billingAddress) &&\n            !hasRemoteBilling\n        ) {\n            promises.push(updateBillingAddress(updatedShippingAddress));\n        }\n\n        if (customerMessage !== orderComment) {\n            promises.push(updateCheckout({ customerMessage: orderComment }));\n        }\n\n        try {\n            await Promise.all(promises);\n\n            navigateNextStep(localBillingSameAsShipping);\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    };\n\n    private hasRemoteBilling: (methodId?: string) => boolean = methodId => {\n        const PAYMENT_METHOD_VALID = ['amazonpay'];\n\n        return PAYMENT_METHOD_VALID.some(method => method === methodId);\n    };\n\n    private handleUseNewAddress: (address: Address, itemId: string) => void = async (address, itemId) => {\n        const { unassignItem, onUnhandledError } = this.props;\n\n        try {\n            await unassignItem({\n                shippingAddress: address,\n                lineItems: [{\n                    quantity: 1,\n                    itemId,\n                }],\n            });\n\n            location.href = '/account.php?action=add_shipping_address&from=checkout';\n        } catch (e) {\n            onUnhandledError(new UnassignItemError(e));\n        }\n    };\n\n    private handleMultiShippingSubmit: (values: MultiShippingFormValues) => void = async ({ orderComment }) => {\n        const {\n            customerMessage,\n            updateCheckout,\n            navigateNextStep,\n            onUnhandledError,\n        } = this.props;\n\n        try {\n            if (customerMessage !== orderComment) {\n                await updateCheckout({ customerMessage: orderComment });\n            }\n\n            navigateNextStep(false);\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    };\n}\n\nconst deleteConsignmentsSelector = createSelector(\n    ({ checkoutService: { deleteConsignment } }: CheckoutContextProps) => deleteConsignment,\n    ({ checkoutState: { data } }: CheckoutContextProps) => data.getConsignments(),\n    (deleteConsignment, consignments) => async () => {\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        const [{ data }] = await Promise.all(consignments.map(({ id }) =>\n            deleteConsignment(id)\n        ));\n\n        return data.getShippingAddress();\n    }\n);\n\nexport function mapToShippingProps({\n    checkoutService,\n    checkoutState,\n}: CheckoutContextProps): WithCheckoutShippingProps | null {\n    const {\n        data: {\n            getCart,\n            getCheckout,\n            getConfig,\n            getCustomer,\n            getConsignments,\n            //getShippingAddress,\n            getBillingAddress,\n            getShippingAddressFields,\n            getShippingCountries,\n        },\n        statuses: {\n            isShippingStepPending,\n            isSelectingShippingOption,\n            isLoadingShippingOptions,\n            isUpdatingConsignment,\n            isCreatingConsignments,\n            isCreatingCustomerAddress,\n            isLoadingShippingCountries,\n            isUpdatingBillingAddress,\n            isUpdatingCheckout,\n        },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const config = getConfig();\n    const consignments = getConsignments() || [];\n    const customer = getCustomer();\n    const cart = getCart();\n\n    if (!checkout || !config || !customer || !cart) {\n        return null;\n    }\n\n    const {\n        checkoutSettings: {\n            enableOrderComments,\n            features,\n            hasMultiShippingEnabled,\n            googleMapsApiKey,\n        },\n    } = config;\n\n    const methodId = getShippingMethodId(checkout);\n    const shippableItemsCount = getShippableItemsCount(cart);\n    const isLoading = (\n        isLoadingShippingOptions() ||\n        isSelectingShippingOption() ||\n        isUpdatingConsignment() ||\n        isCreatingConsignments() ||\n        isUpdatingBillingAddress() ||\n        isUpdatingCheckout() ||\n        isCreatingCustomerAddress()\n    );\n    const shouldShowMultiShipping = (\n        hasMultiShippingEnabled &&\n        !methodId &&\n        shippableItemsCount > 1 &&\n        shippableItemsCount < 50\n    );\n    const countriesWithAutocomplete = ['US', 'CA', 'AU', 'NZ'];\n\n    if (features['CHECKOUT-4183.checkout_google_address_autocomplete_uk']) {\n        countriesWithAutocomplete.push('GB');\n    }\n\n    //const shippingAddress = !shouldShowMultiShipping && consignments.length > 1 ? undefined : getShippingAddress();\n\n    return {\n        assignItem: checkoutService.assignItemsToAddress,\n        billingAddress: getBillingAddress(),\n        cart,\n        consignments,\n        countries: getShippingCountries() || EMPTY_ARRAY,\n        countriesWithAutocomplete,\n        customer,\n        customerMessage: checkout.customerMessage,\n        createCustomerAddress: checkoutService.createCustomerAddress,\n        deinitializeShippingMethod: checkoutService.deinitializeShipping,\n        deleteConsignments: deleteConsignmentsSelector({ checkoutService, checkoutState }),\n        getFields: getShippingAddressFields,\n        googleMapsApiKey,\n        initializeShippingMethod: checkoutService.initializeShipping,\n        isGuest: customer.isGuest,\n        isInitializing: isLoadingShippingCountries() || isLoadingShippingOptions(),\n        isLoading,\n        isShippingStepPending: isShippingStepPending(),\n        loadShippingAddressFields: checkoutService.loadShippingAddressFields,\n        loadShippingOptions: checkoutService.loadShippingOptions,\n        methodId,\n        //shippingAddress,\n        shouldShowMultiShipping,\n        shouldShowAddAddressInCheckout: features['CHECKOUT-4726.add_address_in_multishipping_checkout'],\n        shouldShowOrderComments: enableOrderComments,\n        signOut: checkoutService.signOutCustomer,\n        unassignItem: checkoutService.unassignItemsToAddress,\n        updateBillingAddress: checkoutService.updateBillingAddress,\n        updateCheckout: checkoutService.updateCheckout,\n        updateShippingAddress: checkoutService.updateShippingAddress,\n    };\n}\n\nexport default withCheckout(mapToShippingProps)(Shipping);\n"],"sourceRoot":""}