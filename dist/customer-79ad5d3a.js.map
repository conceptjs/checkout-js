{"version":3,"sources":["webpack://checkout/./src/app/ui/form/CheckboxInput.tsx","webpack://checkout/./src/app/ui/form/RadioInput.tsx","webpack://checkout/./src/app/ui/form/TextArea.tsx","webpack://checkout/./src/app/ui/form/CheckboxFormField.tsx","webpack://checkout/./src/app/formFields/mapCustomFormFieldsFromFormValues.ts","webpack://checkout/./src/app/locale/withDate.tsx","webpack://checkout/./src/app/common/utility/parseAnchor.ts","webpack://checkout/./src/app/ui/form/DynamicInput.tsx","webpack://checkout/./src/app/ui/form/MultiCheckboxControl.tsx","webpack://checkout/./src/app/ui/form/CheckboxGroupFormField.tsx","webpack://checkout/./src/app/ui/form/DynamicFormField.tsx","webpack://checkout/./src/app/locale/TranslatedLink.tsx","webpack://checkout/./src/app/customer/mapCreateAccountFromFormValues.ts","webpack://checkout/./src/app/customer/validationPatterns.ts","webpack://checkout/./src/app/customer/getEmailValidationSchema.ts","webpack://checkout/./src/app/customer/getCreateCustomerValidationSchema.ts","webpack://checkout/./src/app/customer/CreateAccountForm.tsx","webpack://checkout/./src/app/customer/EmailField.tsx","webpack://checkout/./src/app/customer/EmailLoginForm.tsx","webpack://checkout/./src/app/privacyPolicy/PrivacyPolicyField.tsx","webpack://checkout/./src/app/customer/SubscribeField.tsx","webpack://checkout/./src/app/customer/GuestForm.tsx","webpack://checkout/./src/app/privacyPolicy/getPrivacyPolicyValidationSchema.ts","webpack://checkout/./src/app/ui/icon/IconEye.tsx","webpack://checkout/./src/app/ui/icon/IconEyeSlash.tsx","webpack://checkout/./src/app/customer/PasswordField.tsx","webpack://checkout/./src/app/customer/LoginForm.tsx","webpack://checkout/./src/app/customer/mapErrorMessage.ts","webpack://checkout/./src/app/customer/Customer.tsx"],"names":["CheckboxInput","ref","additionalClassName","label","id","rest","className","type","htmlFor","RadioInput","value","checked","TextArea","testId","disabled","labelContent","onChange","name","renderField","field","render","mapCustomFormFieldsFromFormValues","customFieldsObject","customFields","key","fieldValue","padMonth","getMonth","toString","padDay","getDate","getFullYear","push","fieldId","withDate","displayNamePrefix","pickProps","parseAnchor","text","div","document","createElement","innerHTML","anchor","querySelector","anchorSiblings","split","outerHTML","date","fieldType","options","placeholder","inputFormat","handleDateChange","dateValue","event","target","DynamicFormFieldType","dropdown","map","optionValue","radio","length","checkbox","Array","isArray","includes","autoComplete","calendarClassName","dateFormat","maxDate","max","Date","undefined","minDate","min","placeholderText","toUpperCase","popperClassName","selected","multiline","TextInput","password","onSelectedAll","onSelectedNone","handleSelectAllClick","preventDefault","handleSelectNoneClick","TranslatedString","href","onClick","MultiCheckboxFormField","form","values","errors","remove","handleSelectAll","checkedValues","forEach","val","handleSelectNone","handleInputChange","indexOf","FormFieldContainer","hasError","FormFieldError","renderProps","secret","fieldLabel","required","maxLength","parentFieldName","inputId","autocomplete","extraClass","fieldInputId","fieldName","labelComponent","Label","dynamicFormFieldType","number","renderInput","items","helperLabel","rows","FormField","input","data","language","translatedString","translate","parsedString","mapCreateAccountFromFormValues","acceptsMarketingEmails","EMAIL_REGEXP","getEmailValidationSchema","email","matches","getTranslateCreateCustomerError","formFields","passwordRequirements","description","numeric","alpha","minLength","firstName","lastName","concat","getCustomFormFieldsValidationSchema","withLanguage","handleSubmit","onSubmit","mapPropsToValues","validationSchema","find","requirements","Error","getPasswordRequirements","createAccountError","isCreatingAccount","onCancel","createAccountErrorMessage","isRequestError","status","splitMessage","message","trim","Form","Fieldset","Alert","DynamicFormField","custom","Button","variant","Primary","props","onSendLoginEmail","isOpen","isSendingEmail","emailHasBeenRequested","onRequestClose","sentEmailError","sentEmail","submitForm","formEmail","modalHeaderStringId","okButton","footer","LoadingSpinner","isLoading","sent_email","TranslatedLink","error","expiry","TranslatedHtml","minutes","Math","round","Modal","additionalBodyClassName","additionalModalClassName","header","ModalHeader","shouldShowCloseButton","PrivacyPolicyCheckboxFieldLink","url","CheckboxFormField","requiresMarketingConsent","Input","defaultShouldSubscribe","shouldSubscribe","privacyPolicy","onContinueAsGuest","privacyPolicyUrl","baseSchema","isRequired","schemaFields","oneOf","getPrivacyPolicyValidationSchema","canSubscribe","checkoutButtons","continueAsGuestButtonLabelId","onChangeEmail","onShowLogin","fieldProps","legend","Legend","hidden","BasicFormField","PrivacyPolicyField","withIconContainer","viewBox","xmlns","d","forgotPasswordUrl","Toggle","openByDefault","toggle","rel","onSignIn","canCancel","isSignInEmailEnabled","isSigningIn","onCreateAccount","signInError","shouldShowCreateAccountLink","viewType","CustomerViewType","Login","changeEmailLink","body","mapErrorMessage","SuggestedLogin","Info","CancellableEnforcedLogin","EnforcedLogin","state","isEmailLoginFormOpen","isReady","hasRequestedLoginEmail","closeEmailLoginFormForm","setState","handleEmailLoginClicked","this","draftEmail","handleSendLoginEmail","sendLoginEmail","handleContinueAsGuest","formValues","continueAsGuest","onChangeViewType","onContinueAsGuestError","acceptsMarketingNewsletter","acceptsAbandonedCartEmails","customer","getCustomer","shouldEncourageSignIn","isGuest","executePaymentMethodCheckoutOrContinue","handleSignIn","credentials","signIn","onSignInError","handleCreateAccount","createAccount","onAccountCreated","showCreateAccount","CreateAccount","handleCancelCreateAccount","clearError","handleCancelSignIn","Guest","handleChangeEmail","handleShowLogin","executePaymentMethodCheckout","providerWithCustomCheckout","methodId","continueWithCheckoutCallback","componentDidMount","initializeCustomer","onReady","onUnhandledError","componentWillUnmount","deinitializeCustomer","shouldRenderGuestForm","shouldRenderCreateAccountForm","shouldRenderLoginForm","LoadingOverlay","unmountContentWhenLoading","renderEmailLoginLinkForm","renderLoginForm","renderGuestForm","renderCreateAccountForm","checkEmbeddedSupport","checkoutButtonIds","isContinuingAsGuest","isExecutingPaymentMethodCheckout","isInitializing","CheckoutButtonList","deinitialize","initialize","methodIds","onError","isSendingSignInEmail","signInEmailError","signInEmail","customerAccountFields","isEmbedded","isGuestEnabled","isAccountCreationEnabled","mapToWithCheckoutCustomerProps","checkoutService","checkoutState","getBillingAddress","getCustomerAccountFields","getCheckout","getSignInEmail","getConfig","getSignInError","getSignInEmailError","getCreateCustomerAccountError","isInitializingCustomer","isCreatingCustomerAccount","billingAddress","checkout","config","shopperConfig","showNewsletterSignup","checkoutSettings","remoteCheckoutProviders","createCustomerAccount","sendSignInEmail","defaultNewsletterSignup","links","forgotPasswordLink","guestCheckoutEnabled","signInCustomer","withCheckout"],"mappings":"yKAaMA,EAAgB,sBAAW,SAC7B,EAMAC,GALI,IAAAC,EAAmB,sBACnBC,EAAK,QACLC,EAAE,KACCC,EAAI,mBAJX,sCAOC,OACD,oCACI,kBAAC,IAAK,sBACGA,EAAI,CACTC,UAAY,IACR,gBACA,kCACAJ,GAEJE,GAAKA,EACLH,IAAMA,EACNM,KAAK,cAET,kBAAC,IAAK,CAACC,QAAUJ,GACXD,OAKC,O,gGC3BTM,EAAa,sBAAW,SAC1B,EAQAR,GAPI,IAAAC,EAAmB,sBACnBC,EAAK,QACLO,EAAK,QACLC,EAAO,UACPP,EAAE,KACCC,EAAI,mBANX,wDASC,OACD,oCACI,kBAAC,IAAK,sBACGA,EAAI,CACTM,QAAUA,EACVL,UAAY,IACR,aACA,+BACAJ,GAEJE,GAAKA,EACLH,IAAMA,EACNM,KAAK,QACLG,MAAQA,KAEZ,kBAAC,IAAK,CAACF,QAAUJ,GACXD,OAKC,O,8ECpCTS,EAAW,sBAAW,SACxB,EACAX,GADE,IAAAC,EAAmB,sBAAEW,EAAM,SAAEP,EAAS,YAAKD,EAAI,mBAAjD,8CAEC,OACD,mDACSA,EAAI,CACTC,UAAYA,GAAa,IACrB,aACA,+BACAJ,GACH,YACWW,EACZZ,IAAMA,QAIC,O,wHC+BA,oBAtCsD,SAAC,G,IAClEC,EAAmB,sBACnB,IAAAY,gBAAQ,IAAG,GAAK,EAChBC,EAAY,eACZC,EAAQ,WACRC,EAAI,OACJb,EAAE,KAEIc,EAAc,uBAAY,SAAC,G,IAAEC,EAAK,QAAmB,OACvD,kBAAC,WAAQ,KACH,kBAAC,IAAa,sBACPA,EAAK,CACVR,UAAYQ,EAAMT,MAClBI,SAAWA,EACXV,GAAKA,GAAMe,EAAMF,KACjBd,MAAQY,KAGZ,kBAAC,IAAc,CACXE,KAAOA,EACPJ,OAAY,oBAAUI,GAAK,4BAGpC,CACCH,EACAV,EACAW,EACAE,IAGJ,OAAO,kBAAC,IAAc,CAClBf,oBAAsBA,EACtBe,KAAOA,EACPD,SAAWA,EACXI,OAASF,Q,kCCnDjB,8CAEe,SAASG,EACpBC,GAEA,IAAMC,EAA6D,GAkBnE,OAjBA,gBAAMD,GAAoB,SAACZ,EAAOc,GAC9B,IAAIC,EAEJ,GAAI,iBAAOf,GAAQ,CACf,IAAMgB,EAAW,oBAAUhB,EAAMiB,WAAa,GAAGC,WAAY,EAAG,KAC1DC,EAAS,mBAAUnB,EAAMoB,UAAWF,WAAY,EAAG,KACzDH,EAAgBf,EAAMqB,cAAa,IAAIL,EAAQ,IAAIG,OAEnDJ,EAAaf,EAGjBa,EAAaS,KAAK,CACdC,QAAST,EACTC,WAAU,OAIXF,I,kCCvBX,uBAUMW,EAAqC,YAAgB,IAAe,CACtEC,kBAAmB,WACnBC,UAAW,SAAC1B,EAAOc,GAAQ,MAAQ,SAARA,KAAoBd,KAGpC,O,kCCfA,SAAS2B,EAAYC,GAChC,IAAMC,EAAMC,SAASC,cAAc,OACnCF,EAAIG,UAAYJ,EAEhB,IAAMK,EAASJ,EAAIK,cAAc,KAEjC,IAAKD,EACD,MAAO,GAGX,IAAME,EAAiBN,EAAIG,UAAUI,MAAMH,EAAOI,WAElD,MAAO,CAAEF,EAAe,GAAIF,EAAOL,KAAMO,EAAe,IAZ5D,mC,qKCsKe,iBAAK,OAAAX,EAAA,IA/IuD,SAAC,GACrD,sBAAnB,IACAc,EAAI,OACJC,EAAS,YACT7C,EAAE,KACFa,EAAI,OACJ,IAAAD,gBAAQ,IAAG,SAAI,EACfkC,EAAO,UACPC,EAAW,cACXzC,EAAK,QACFL,EAAI,mBAViE,mGAYhE+C,EAAgBJ,EAAI,YACtBK,EAAmB,uBAAY,SAACC,EAAWC,GAAU,OAAAvC,EAAS,yCAC7DuC,GAAK,CACRC,OAAQ,CACJvC,KAAI,EACJP,MAAO4C,QAEX,CACAtC,EACAC,IAGJ,OAAQgC,GACR,KAAKQ,EAAA,EAAqBC,SACtB,OACI,iDACSrD,EAAW,CAChBC,UAAU,4CAA2C,YACtCF,EAAE,UACjBA,GAAKA,EACLa,KAAOA,EACPD,SAAWA,EACXN,MAAkB,OAAVA,EAAiB,GAAKA,IAE5ByC,GACE,4BAAQzC,MAAM,IACRyC,GAERD,GAAWA,EAAQS,KAAI,SAAC,G,IAAExD,EAAK,QAASyD,EAAW,QACjD,mCACIpC,IAAMoC,EACNlD,MAAQkD,GAENzD,OAMtB,KAAKsD,EAAA,EAAqBI,MACtB,OAAKX,GAAYA,EAAQY,OAIlB,oCACDZ,EAAQS,KAAI,SAAC,G,IAAExD,EAAK,QAASyD,EAAW,QACtC,yBAACnD,EAAA,EAAU,sBACFJ,EAAI,CACTM,QAAUiD,IAAgBlD,EAC1BN,GAAQA,EAAE,IAAIwD,EACdpC,IAAMoC,EACNzD,MAAQA,EACRc,KAAOA,EACPD,SAAWA,EACXH,OAAYT,EAAE,IAAIwD,EAAW,SAC7BlD,MAAQkD,SAdT,KAkBf,KAAKH,EAAA,EAAqBM,SACtB,OAAKb,GAAYA,EAAQY,OAIlB,oCACDZ,EAAQS,KAAI,SAAC,G,IAAExD,EAAK,QAASyD,EAAW,QACtC,yBAAC5D,EAAA,EAAa,sBACLK,EAAI,CACTM,UAAUqD,MAAMC,QAAQvD,IAASA,EAAMwD,SAASN,GAChDxD,GAAQA,EAAE,IAAIwD,EACdpC,IAAMoC,EACNzD,MAAQA,EACRc,KAAOA,EACPD,SAAWA,EACXH,OAAYT,EAAE,IAAIwD,EAAW,YAC7BlD,MAAQkD,SAdT,KAkBf,KAAKH,EAAA,EAAqBT,KACtB,OACI,kBAAC,IAAe,sBACP3C,EAAW,CAChB8D,aAAa,MAIbC,kBAAkB,mCAClB9D,UAAU,0CACV+D,WAAajB,EACbkB,QAAUjE,EAAKkE,IAAM,IAAIC,KAAQnE,EAAKkE,IAAG,mBAAgBE,EACzDC,QAAUrE,EAAKsE,IAAM,IAAIH,KAAQnE,EAAKsE,IAAG,mBAAgBF,EACzDxD,KAAOA,EACPD,SAAWqC,EACXuB,gBAAkBxB,EAAYyB,cAC9BC,gBAAgB,mCAChBC,SAAW,iBAAOrE,GAASA,OAAQ+D,KAI/C,KAAKhB,EAAA,EAAqBuB,UACtB,OACI,kBAACpE,EAAA,EAAQ,sBACAP,EAAW,CAChBD,GAAKA,EACLa,KAAOA,EACPD,SAAWA,EACXH,OAAYT,EAAE,QACdG,KAAO0C,EACPvC,MAAQA,KAIpB,QACI,OACI,kBAACuE,EAAA,EAAS,sBACD5E,EAAI,CACTD,GAAKA,EACLa,KAAOA,EACPD,SAAWA,EACXmC,YAAcA,EACdtC,OAAYT,EAAE,KAAK6C,IAAcQ,EAAA,EAAqByB,SAClD,WACA,QACJ3E,KAAO0C,EACPvC,MAAQA,U,kBC1GT,G,QAAA,gBA1C4D,SAAC,G,IACxEG,EAAM,SACNsE,EAAa,gBACbC,EAAc,iBAERC,EAAuB,uBAAY,SAAC9B,GACtCA,EAAM+B,iBACNH,MACD,CAACA,IAEEI,EAAwB,uBAAY,SAAChC,GACvCA,EAAM+B,iBACNF,MACD,CAACA,IAEJ,OAAO,wBAAI9E,UAAU,2BACjB,wBAAIA,UAAU,0BACV,kBAACkF,EAAA,EAAgB,CAACpF,GAAG,oBAGzB,wBAAIE,UAAU,0BACV,mCACmBO,EAAM,sBACrB4E,KAAK,IACLC,QAAUL,GAEV,kBAACG,EAAA,EAAgB,CAACpF,GAAG,yBAI7B,wBAAIE,UAAU,0BACV,mCACmBO,EAAM,uBACrB4E,KAAK,IACLC,QAAUH,GAEV,kBAACC,EAAA,EAAgB,CAACpF,GAAG,+BCxB/BuF,EAAyE,SAAC,G,IAC5E,IAAAC,KAAQC,EAAM,SAAEC,EAAM,SACtB1F,EAAE,KACFD,EAAK,QACLc,EAAI,OACJ,IAAAD,gBAAQ,IAAG,SAAI,EACfkC,EAAO,UACPlB,EAAI,OACJ+D,EAAM,SAEAC,EAAkB,uBAAY,WAChC,IAAMC,EAA0B,gBAAMJ,EAAQ5E,IAAS,GAEvD,qBAAWiC,EAAQS,KAAI,SAAC,GAAc,OAAP,WAAesC,GACzCC,SAAQ,SAAAC,GAAO,OAAAnE,EAAKmE,MAEzBnF,EAAS,gBAAM6E,EAAQ5E,MACxB,CACCA,EACAD,EACAkC,EACAlB,EACA6D,IAGEO,EAAmB,uBAAY,YACD,gBAAMP,EAAQ5E,IAAS,IAEzCiF,SAAQ,WAAM,OAAAH,EAAO,MAEnC/E,EAAS,gBAAM6E,EAAQ5E,MACxB,CACCA,EACAD,EACA+E,EACAF,IAGEQ,EAAoB,uBAAY,SAAC9C,GACnC,IAAM0C,EAA0B,gBAAMJ,EAAQ5E,IAAS,GACjD,EAAqBsC,EAAMC,OAAzB9C,EAAK,QAAS,UAGlBsB,EAAKtB,GAELqF,EAAOE,EAAcK,QAAQ5F,IAGjCM,EAAS,gBAAM6E,EAAQ5E,MACxB,CACCA,EACAD,EACAgB,EACA+D,EACAF,IAGJ,OAAO,kBAACU,EAAA,EAAkB,CAACC,SAAW,gBAAMV,EAAQ7E,IAAS,gBAAM6E,EAAQ7E,GAAM6C,QAC3E3D,EAEA+C,EAAQY,OAAS,GAAK,kBAAC,EAAoB,CACzCqB,cAAgBa,EAChBZ,eAAiBgB,EACjBvF,OAAST,IAGb,kBAAC,EAAY,CACT6C,UAAYQ,EAAA,EAAqBM,SACjC3D,GAAKA,EACLa,KAAOA,EACPD,SAAWqF,EACXnD,QAAUA,EACVxC,MAAQ,gBAAMmF,EAAQ5E,IAAS,KAGnC,kBAACwF,EAAA,EAAc,CACXxF,KAAOA,EACPJ,OAAY,oBAAUI,GAAK,2BAwCxB,kBAnCgE,SAAC,G,IAC5Eb,EAAE,KACFD,EAAK,QACLc,EAAI,OACJD,EAAQ,WACRkC,EAAO,UAEDhC,EAAc,uBAAY,SAACwF,GAAuC,OACpE,kBAACf,EAAsB,oBACnBvF,GAAKA,EACLD,MAAQA,EACRc,KAAOA,EACPD,SAAWA,EACXkC,QAAUA,GACL,eAAKwD,EAAa,CACnB,OACA,MACA,OACA,eAGT,CACCtG,EACAD,EACAc,EACAD,EACAkC,IAGJ,OAAO,kBAAC,aAAU,CACdjC,KAAOA,EACPG,OAASF,O,mBCTF,oBApGqD,SAAC,G,IACjE,IAAAC,MACI8B,EAAS,YACT1C,EAAI,OACJoG,EAAM,SACN1F,EAAI,OACG2F,EAAU,QACjBC,EAAQ,WACR3D,EAAO,UACPqB,EAAG,MACHI,EAAG,MACHmC,EAAS,YAEbC,EAAe,kBACf/F,EAAQ,WACRmC,EAAW,cACX6D,EAAO,UACPC,EAAY,eACZ9G,EAAK,QACL+G,EAAU,aAEJC,EAAeH,GAAW/F,EAC1BmG,EAAYL,EAAqBA,EAAe,IAAI9F,EAASA,EAE7DoG,EAAiB,mBAAQ,WAAM,OACjC,kBAACC,EAAA,EAAK,CAAC9G,QAAU2G,GACXhH,GAASyG,GACRC,GACC,oCACM,IACF,2BAAOvG,UAAU,sCACb,kBAACkF,EAAA,EAAgB,CAACpF,GAAG,8BAItC,CACC+G,EACAP,EACAC,EACA1G,IAGEoH,EAAuB,mBAAQ,WACjC,MAAkB,SAAdtE,EACa,YAAT1C,EACOkD,EAAA,EAAqB+D,OAGzBb,EACHlD,EAAA,EAAqByB,SACrBzB,EAAA,EAAqBnB,KAGtBW,IACR,CAACA,EAAW1C,EAAMoG,IAEfc,EAAc,uBAAY,SAAC,G,IAAEtG,EAAK,QAA2B,OAC/D,kBAAC,EAAY,sBACJA,EAAK,CACVgD,aAAe8C,EACfhE,UAAYsE,EACZnH,GAAK+G,EACL5C,IAAMA,EACNuC,UAAYA,QAAarC,EACzBE,IAAMA,EACNzB,QAAUA,GAAWA,EAAQwE,MAC7BvE,YAAcA,GAAgBD,GAAWA,EAAQyE,YACjDC,KAAO1E,GAAYA,EAAgB0E,UAExC,CACCT,EACA5C,EACAuC,EACAnC,EACAzB,EACAC,EACAoE,EACAN,IAGJ,OACI,yBAAK3G,UAAY,sBAAsB4G,GACjCjE,IAAcQ,EAAA,EAAqBM,SACjC,kBAAC,EAAsB,CACnB3D,GAAK+G,EACLhH,MAAQkH,EACRpG,KAAOmG,EACPpG,SAAWA,EACXkC,QAAWA,GAAWA,EAAQwE,OAAU,KAE5C,kBAACG,EAAA,EAAS,CACNC,MAAQL,EACRtH,MAAQkH,EACRpG,KAAOmG,EACPpG,SAAWA,S,kCC1H/B,iDAsCe,iBAzBoE,SAAC,G,IAChF+G,EAAI,OACJ3H,EAAE,KACF4H,EAAQ,WACRtC,EAAO,UACP7E,EAAM,SAEAoH,EAAmBD,EAASE,UAAU9H,EAAI2H,GAC1CI,EAAe,YAAYF,GAEjC,OAAOE,EAAarE,OAChB,oCACMqE,EAAa,GACf,mCACgBtH,EACZ4E,KAAK,IACLC,QAAU,YAAeA,IAEvByC,EAAa,IAEjBA,EAAa,IAEnB,oCAAIF,O,gMC7BG,SAASG,EACpB,GAAE,IAAAC,EAAsB,yBAAE9G,EAAY,eAAKsE,EAAM,mBAAjD,2CAEA,OAAO,yCACAA,GAAM,CACTwC,uBAAwBA,GAA0BA,EAAuBvE,OAAS,EAClFvC,aAAc,OAAAF,EAAA,GAAkCE,K,sICV3C+G,EAAe,oGCOb,SAASC,EAAyB,G,IAC7CP,EAAQ,WAER,OAAO,iBAAO,CACVQ,MAAO,mBACFjE,IAAI,KACJkE,QAAQH,EAAcN,EAASE,UAAU,iCACzCrB,SAASmB,EAASE,UAAU,oCCQzC,SAASQ,EAAgCV,GACrC,OAAO,SAACzH,EAAM,G,IAAEJ,EAAK,QAAEwE,EAAG,MAAEJ,EAAG,MAC3B,GAAKyD,EAIL,MAAa,aAATzH,EACOyH,EAASE,UAAU,0BAA2B,CAAE/H,MAAK,IAGnD,QAATI,GAAkBgE,EACXyD,EAASE,UAAU,qBAAsB,CAAE/H,MAAK,EAAEoE,IAAG,IAGnD,QAAThE,GAAkBoE,EACXqD,EAASE,UAAU,qBAAsB,CAAE/H,MAAK,EAAEwE,IAAG,IAGnD,YAATpE,EACOyH,EAASE,UAAU,oCAAqC,CAAE/H,MAAK,SAD1E,GAQO,yBAAQ,SAA2C,G,IAC9DwI,EAAU,aACVX,EAAQ,WACR,IAAAY,qBAAwBC,EAAW,cAAEC,EAAO,UAAEC,EAAK,QAAEC,EAAS,YAE9D,OAAO,iBAAO,CACNC,UAAW,mBAASpC,SAASmB,EAASE,UAAU,sCAChDgB,SAAU,mBAASrC,SAASmB,EAASE,UAAU,qCAC/ChD,SAAU,mBACL2B,SAASgC,GAAeb,EAASE,UAAU,qCAC3CO,QAAQK,EAASD,GAAeb,EAASE,UAAU,4CACnDO,QAAQM,EAAOF,GAAeb,EAASE,UAAU,4CACjDvD,IAAIqE,EAAWH,GAAeb,EAASE,UAAU,iDACjD3D,IAAI,IAAKyD,EAASE,UAAU,kDAEpCiB,OAAOZ,EAAyB,CAAEP,SAAQ,KAC1CmB,OAAO,OAAAC,EAAA,GAAoC,CACxCT,WAAU,EACVT,UAAWQ,EAAgCV,S,UCkCxC,G,QAAA,OAAAqB,EAAA,GAAa,qBAAgF,CACxGC,aAAc,SAACzD,EAAQ,G,IAAW,UAAA0D,eAAQ,IAAG,SAAI,GACpC1D,IAEb2D,iBAAkB,SAAC,GAA+B,OAC9CP,UAAW,GACXC,SAAU,GACVV,MAAO,GACPtD,SAAU,GACV3D,aAAc,GACd8G,uBANwC,2BAMW,GAAK,CAAC,OAE7DoB,iBAAkB,SAAC,G,MACfzB,EAAQ,WACRW,EAAU,aAEJC,EAA0E,QAAtD,EAAGD,EAAWe,MAAK,SAAC,GAAqB,OAAP,yBAAoB,eAAEC,aAElF,IAAKf,EACD,MAAM,IAAIgB,MAAM,iCASpB,OANe,EAAkC,CAC7C5B,SAAQ,EACRW,WAAU,EACVC,qBAAsB,OAAAiB,EAAA,GAAwBjB,OAzB9B,EA7EoG,SAAC,G,IAC7HD,EAAU,aACVmB,EAAkB,qBAClBC,EAAiB,oBACjBC,EAAQ,WAEFC,EAA4B,mBAAQ,WACtC,GAAKH,EAAL,CAIA,GAAI,OAAAI,EAAA,GAAeJ,IAAqD,MAA9BA,EAAmBK,OAAgB,CACzE,IAAMC,EAAeN,EAAmBO,QAAQvH,MAAM,KAEtD,OAAIsH,EAAatG,OAAS,EACf,kBAAC0B,EAAA,EAAgB,CACpBuC,KAAO,CAAES,MAAQ4B,EAAa,GAAGE,QACjClK,GAAG,+BAIJ,kBAACoF,EAAA,EAAgB,CAACpF,GAAG,uCAGhC,OAAO0J,EAAmBO,WAC3B,CAACP,IAEJ,OAAQ,oCACJ,kBAACS,EAAA,EAAI,CACDjK,UAAU,gBACVF,GAAG,8BACHS,OAAO,+BAEP,kBAAC2J,EAAA,EAAQ,KACHP,GAA6B,kBAACQ,EAAA,EAAK,CACjClK,KAAOkK,EAAA,EAAUb,OAEfK,GAEN,yBAAK3J,UAAU,uBACTqI,EAAWhF,KAAI,SAAAxC,GAAS,OACtB,kBAACuJ,EAAA,EAAgB,CACbzD,aAAe9F,EAAMF,KACrBiG,WAAa,uBAAuB/F,EAAMF,KAC1CE,MAAQA,EACRK,IAAML,EAAMf,GACZ2G,gBAAkB5F,EAAMwJ,OAAS,oBAAkBlG,SAMpE,yBAAKnE,UAAU,gBACV,kBAACsK,EAAA,EAAM,CACH9J,SAAWiJ,EACX3J,GAAG,2BACHS,OAAO,2BACPN,KAAK,SACLsK,QAAUD,EAAA,EAAcE,SAExB,kBAACtF,EAAA,EAAgB,CAACpF,GAAG,oCAGzB,uBACIE,UAAU,2CAA0C,YAC1C,yBACVmF,KAAK,IACLrF,GAAG,2BACHsF,QAAU,OAAAJ,EAAA,GAAe0E,IAEzB,kBAACxE,EAAA,EAAgB,CAACpF,GAAG,kC,+EC7D1B,kBAxByC,SAAC,G,IACrDY,EAAQ,WAEFyG,EAAc,uBAAY,SAACsD,GAAsB,OACnD,kBAAC9F,EAAA,EAAS,sBACD8F,EAAM5J,MAAK,CAChBgD,aAAe4G,EAAM5J,MAAMF,KAC3Bb,GAAK2K,EAAM5J,MAAMF,KACjBV,KAAK,aAEV,IAEGQ,EAAe,mBAAQ,WAAM,OAC/B,kBAACyE,EAAA,EAAgB,CAACpF,GAAG,2BACtB,IAEH,OAAO,kBAACyH,EAAA,EAAS,CACbC,MAAQL,EACR1G,aAAeA,EACfE,KAAK,QACLD,SAAWA,OCyKJ,SAAAqI,EAAA,GAAa,qBAA0E,CAClGG,iBAAkB,SAAC,G,IACf,IAAAhB,MACE,OACFA,WAFK,IAAG,KAAE,IAIdc,aAAc,SAACzD,EAAQ,G,IAAW,UAAAmF,uBAAgB,IAAG,SAAI,GACpCnF,IAErB4D,iBAAkB,SAAC,GAAoC,OAAAlB,EAAyB,CAAEP,SAArD,eATL,CAUzB,gBAnLoH,SAAC,G,IACpHQ,EAAK,QACLyC,EAAM,SACN,IAAAC,sBAAc,IAAG,GAAK,EACtBC,EAAqB,wBACrB,IAAAC,sBAAc,IAAG,SAAI,EACrBC,EAAc,iBACdC,EAAS,YACTC,EAAU,aAECC,EAAS,eAGdC,EAAsB,mBAAQ,WAChC,OAAIN,EACIE,EACO,uBAGJ,0BAGP7C,EACO,gCAGJ,uBACR,CAAC2C,EAAuBE,EAAgB7C,IAErCkD,EAAW,mBAAQ,WAAM,OAC3B,yBAAKpL,UAAU,gBACX,kBAACsK,EAAA,EAAM,CAAClF,QAAU0F,GACd,kBAAC5F,EAAA,EAAgB,CAACpF,GAAG,yBAG9B,CAACgL,IAEEO,EAAS,mBAAQ,WACnB,OAAIN,GAA4C,MAA1BA,EAAelB,OAC1BuB,EAGPP,IAA0BE,EACtBH,EACO,kBAACU,EAAA,EAAc,CAACC,WAAS,IAGhCP,GAAsC,mBAAzBA,EAAUQ,WAChBJ,EAIP,2BACI,kBAACK,EAAA,EAAc,CACX3L,GAAG,0BACHsF,QAAU6F,IAEd,kBAACQ,EAAA,EAAc,CACX3L,GAAG,gCACHsF,QAAU0F,KAOtB,yBAAK9K,UAAU,gBACX,kBAACsK,EAAA,EAAM,CACHtK,UAAU,oCACVoF,QAAU0F,EACV7K,KAAK,UAEL,kBAACiF,EAAA,EAAgB,CAACpF,GAAG,oBAEzB,kBAACwK,EAAA,EAAM,CACHiB,UAAYX,EACZ3K,KAAK,SACLsK,QAAUD,EAAA,EAAcE,SAExB,kBAACtF,EAAA,EAAgB,CAACpF,GAAG,yBAIlC,CACCiL,EACAF,EACAO,EACAH,EACAL,EACAE,EACAE,IAGEU,EAAQ,mBAAQ,WAClB,IAAKX,EACD,OAAO,KAGH,IAAAlB,EAAWkB,EAAc,OAEjC,OACI,kBAACZ,EAAA,EAAK,CAAClK,KAAOkK,EAAA,EAAUb,OACP,MAAXO,EACE,kBAAC3E,EAAA,EAAgB,CAACpF,GAAG,yCACrB,kBAACoF,EAAA,EAAgB,CAACpF,GAAgB,MAAX+J,EACnB,8BACA,gCAIjB,CAACkB,IAEEzF,EAAO,mBAAQ,WACjB,GAAIyF,GAA4C,MAA1BA,EAAelB,OACjC,OAAO,KAGX,GAAIgB,GAAyBG,IAAcD,EAAgB,CAC/C,IAAAY,EAAuBX,EAAS,OAAxBQ,EAAeR,EAAS,WAExC,OACI,2BACI,kBAACY,EAAA,EAAc,CACXnE,KAAO,CACHS,MAAOgD,EACPW,QAASC,KAAKC,MAAMJ,EAAS,KAEjC7L,GAAoB,YAAf0L,EACD,wBACA,gDAMpB,OAAIX,IAA0BG,EACnB,kBAAC,EAAU,MAGd,oCACJ,2BACI,kBAAC9F,EAAA,EAAgB,CAACpF,GAAG,sBAEzB,kBAAC,EAAU,SAEhB,CAACiL,EAAgBF,EAAuBG,EAAWE,IAEtD,OACI,kBAACc,EAAA,EAAK,CACFC,wBAAwB,kBACxBC,yBAAyB,gBACzBC,OACI,kBAACC,EAAA,EAAW,KACR,kBAAClH,EAAA,EAAgB,CAACpF,GAAKqL,KAG/BR,OAASA,EACTG,eAAiBA,EACjBuB,uBAAwB,GAExB,kBAACpC,EAAA,EAAI,KACD,kBAACqB,EAAA,EAAc,CAACC,UAAYX,IAAmB1C,IAC7CwD,EACApG,EACA+F,S,UC7LZiB,EAAqE,SAAC,G,IACxEC,EAAG,MACD,OACF,kBAACC,EAAA,EAAiB,CACd/L,aAAe,kBAACmL,EAAA,EAAc,CAACnE,KAAO,CAAE8E,IAAG,GAAKzM,GAAG,yBACnDa,KAAK,mBAYE,kBARmD,SAAC,G,IAC/D4L,EAAG,MACD,OACF,kBAACrC,EAAA,EAAQ,CAACtK,oBAAoB,2BAC1B,kBAAC0M,EAA8B,CAACC,IAAMA,Q,yCCW/B,kBAnBgD,SAAC,G,IAAE1L,EAAK,QAAE4L,EAAwB,2BAAO,OACpG,kBAAC,WAAQ,KACL,kBAACC,EAAA,EAAK,sBACG7L,EAAK,CACVR,QAAUQ,EAAMT,MAChBJ,UAAU,gBACVF,GAAKe,EAAMF,KACXV,KAAK,cAGT,kBAAC+G,EAAA,EAAK,CAAC9G,QAAUW,EAAMF,MACnB,kBAACuE,EAAA,EAAgB,CAACpF,GAAK2M,EACnB,mCACA,qDC4FD,SAAA1D,EAAA,GAAa,qBAAgE,CACxFG,iBAAkB,SAAC,G,IACf,IAAAhB,aAAK,IAAG,KAAE,EACV,IAAAyE,8BAAsB,IAAG,GAAK,EAE5B,OACFzE,MAAK,EACL0E,iBAHwB,4BAG4BD,EACpDE,eAAe,IAEnB7D,aAAc,SAACzD,EAAQ,IACnBuH,EAD+C,2BAC7BvH,IAEtB4D,iBAAkB,SAAC,G,IAAEzB,EAAQ,WAAEqF,EAAgB,mBACrC7E,EAAQ,mBACTA,MAAMR,EAASE,UAAU,iCACzB3D,IAAI,KACJsC,SAASmB,EAASE,UAAU,kCAE3BoF,EAAa,iBAAO,CAAE9E,MAAK,IAEjC,OAAI6E,EACOC,EAAWnE,OCjIf,SAA0C,G,IACrDoE,EAAU,aACVvF,EAAQ,WAEFwF,EAEF,GAOJ,OALID,IACAC,EAAaL,cAAgB,oBACxBM,MAAM,EAAC,GAAOzF,EAASE,UAAU,mCAGnC,iBAAOsF,GDoHmBE,CAAiC,CACtDH,aAAcF,EACdrF,SAAQ,KAITsF,IA5Ba,CA8BzB,gBAlHqG,SAAC,G,IACrGK,EAAY,eACZC,EAAe,kBACfC,EAA4B,+BAC5BhC,EAAS,YACTiC,EAAa,gBACbC,EAAW,cACXV,EAAgB,mBAChBN,EAAwB,2BAElB7L,EAAc,uBAAY,SAAC8M,GAAoC,OACjE,kBAAC,EAAc,sBACNA,EAAU,CACfjB,yBAA2BA,OAEhC,CACCA,IAGJ,OACI,kBAACxC,EAAA,EAAI,CACDjK,UAAU,gBACVF,GAAG,0BACHS,OAAO,2BAEP,kBAAC2J,EAAA,EAAQ,CACLyD,OACI,kBAACC,EAAA,EAAM,CAACC,QAAM,GACV,kBAAC3I,EAAA,EAAgB,CAACpF,GAAG,mCAI7B,2BACI,kBAAC8L,EAAA,EAAc,CAAC9L,GAAG,qCAGvB,yBAAKE,UAAU,2BACX,yBAAKA,UAAU,sBACX,kBAAC,EAAU,CAACU,SAAW8M,KAEpBH,GAAgBZ,IAA6B,kBAACqB,EAAA,EAAc,CAC3DnN,KAAK,kBACLG,OAASF,IAGXmM,GAAoB,kBAACgB,EAAkB,CACrCxB,IAAMQ,KAId,yBAAK/M,UAAU,qCACX,kBAACsK,EAAA,EAAM,CACHtK,UAAU,uBACVF,GAAG,6BACHyL,UAAYA,EACZhL,OAAO,oCACPN,KAAK,SACLsK,QAAUD,EAAA,EAAcE,SAExB,kBAACtF,EAAA,EAAgB,CAACpF,GAAKyN,QAM9BhC,GAAa,2BACV,kBAACrG,EAAA,EAAgB,CAACpF,GAAG,wBACnB,IACF,mCACc,2BACVA,GAAG,0BACHsF,QAAUqI,GAEV,kBAACvI,EAAA,EAAgB,CAACpF,GAAG,4BAK/BwN,S,YEhGH,SAAAU,EAAA,IAToB,WAAM,OACrC,yBACIC,QAAQ,cACRC,MAAM,8BAEN,0BAAMC,EAAE,sbCID,SAAAH,EAAA,IATyB,WAAM,OAC1C,yBACIC,QAAQ,cACRC,MAAM,8BAEN,0BAAMC,EAAE,yxB,UCmDD,mBAhD8C,SAAC,G,IAC1DC,EAAiB,oBAEXjH,EAAc,uBAAY,SAACsD,GAAsB,OACnD,kBAAC4D,EAAA,EAAM,CAACC,eAAgB,IAClB,SAAC,G,IAAE3D,EAAM,SAAE4D,EAAM,SAAO,OACtB,yBAAKvO,UAAU,uBACX,kBAAC2E,EAAA,EAAS,sBACD8F,EAAM5J,MAAK,CAChBjB,oBAAoB,uBACpBE,GAAK2K,EAAM5J,MAAMF,KACjBV,KAAO0K,EAAS,OAAS,cAE7B,uBAAG3K,UAAU,uCAAuCmF,KAAK,IAAIC,QAAUmJ,GACjE5D,EAAS,kBAAC,EAAO,MAAM,kBAAC,EAAY,aAKvD,IAEGlK,EAAe,mBAAQ,WAAM,OAC/B,kBAACyE,EAAA,EAAgB,CAACpF,GAAK,8BACxB,IAEGuL,EAAS,mBAAQ,WACnB,OAAK+C,EAIE,mCACO,uBACVjJ,KAAOiJ,EACPI,IAAI,sBACJtL,OAAO,UAEP,kBAACgC,EAAA,EAAgB,CAACpF,GAAG,qCATd,OAWZ,CAACsO,IAEJ,OAAO,kBAAC7G,EAAA,EAAS,CACb8D,OAASA,EACT7D,MAAQL,EACR1G,aAAeA,EACfE,KAAK,gBC+HE,UAAAoI,EAAA,GAAa,qBAAgE,CACxFG,iBAAkB,SAAC,G,IACf,IAAAhB,MACE,OACFA,WAFK,IAAG,KAAE,EAGVtD,SAAU,KAEdoE,aAAc,SAACzD,EAAQ,IACnBkJ,EADsC,kBAC7BlJ,IAEb4D,iBAAkB,SAAC,G,IAAEzB,EAAQ,WACzB,OAAAO,EAAyB,CAAEP,SAAQ,IAAImB,OAAO,iBAAO,CACjDjE,SAAU,mBACL2B,SAASmB,EAASE,UAAU,0CAbjB,CAezB,gBA3JqG,SAAC,G,IACrG8G,EAAS,YACTnB,EAA4B,+BAC5Ba,EAAiB,oBACjBlG,EAAK,QACLyG,EAAoB,uBACpBC,EAAW,cACXlH,EAAQ,WACR,IAAAgC,gBAAQ,IAAG,SAAI,EACf8D,EAAa,gBACbV,EAAiB,oBACjB,IAAA+B,uBAAe,IAAG,SAAI,EACtB,IAAAnE,wBAAgB,IAAG,SAAI,EACvBoE,EAAW,cACXC,EAA2B,8BAC3B,IAAAC,gBAAQ,IAAG,EAAAC,EAAA,EAAiBC,MAAK,EAE3BC,EAAkB,uBAAY,WAChC,OAAKjH,EAKD,uBAAGlI,UAAU,sCACT,kBAACyL,EAAA,EAAc,CACXhE,KAAO,CAAES,MAAK,GACdpI,GAAG,0CACHsF,QAAUsE,EACVnJ,OAAO,kBATR,OAaZ,CAAC2H,EAAOwB,IAEX,OACI,kBAACO,EAAA,EAAI,CACDjK,UAAU,gBACVF,GAAG,8BACHS,OAAO,+BAEP,kBAAC2J,EAAA,EAAQ,CAACyD,OACN,kBAACC,EAAA,EAAM,CAACC,QAAM,GACV,kBAAC3I,EAAA,EAAgB,CAACpF,GAAG,uCAIvBgP,GAAe,kBAAC3E,EAAA,EAAK,CACnB5J,OAAO,+BACPN,KAAOkK,EAAA,EAAUb,OC3FtB,SACXoC,EACA9D,GAIA,OAFa8D,EAAM0D,MAAQ1D,EAAM0D,KAAKnP,MAGtC,IAAK,kBACD,OAAO2H,EAAU,oCAErB,IAAK,8BACD,OAAOA,EAAU,8CAErB,QACI,OAAOA,EAAU,2BD+EHyH,CAAgBP,GAAa,SAAA5N,GAAO,OAAAwG,EAASE,UAAU1G,OAG3D8N,IAAaC,EAAA,EAAiBK,gBAC5B,kBAACnF,EAAA,EAAK,CAAClK,KAAOkK,EAAA,EAAUoF,MACpB,kBAAC3D,EAAA,EAAc,CACXnE,KAAO,CAAES,MAAK,GACdpI,GAAG,gCAIbkP,IAAaC,EAAA,EAAiBC,OAASH,GAA+B,2BACpE,kBAACtD,EAAA,EAAc,CACX3L,GAAG,2CACHsF,QAAUyJ,KAIhBG,IAAaC,EAAA,EAAiBO,0BAC5B,kBAACrF,EAAA,EAAK,CAAClK,KAAOkK,EAAA,EAAUoF,MACpB,kBAAC3D,EAAA,EAAc,CACXnE,KAAO,CAAES,MAAK,GACdpI,GAAG,+BAIbkP,IAAaC,EAAA,EAAiBQ,eAC5B,kBAACtF,EAAA,EAAK,CAAClK,KAAOkK,EAAA,EAAUb,OACpB,kBAACmC,EAAA,EAAc,CACX3L,GAAG,oCACHsF,QAAUyJ,MAInBG,IAAaC,EAAA,EAAiBC,OAASF,IAAaC,EAAA,EAAiBQ,gBACpE,kBAAC,EAAU,CAAC/O,SAAW8M,IAE3B,kBAAC,GAAa,CAACY,kBAAoBO,OAAuBxK,EAAYiK,IAEpEO,GAAwB,2BACtB,kBAAClD,EAAA,EAAc,CACX3L,GAAG,mBACHsF,QAAUsF,EACVnK,OAAO,0BAIf,yBAAKP,UAAU,gBACX,kBAACsK,EAAA,EAAM,CACH9J,SAAWoO,EACX9O,GAAG,6BACHS,OAAO,2BACPN,KAAK,SACLsK,QAAUD,EAAA,EAAcE,SAExB,kBAACtF,EAAA,EAAgB,CAACpF,GAAG,6BAGvBkP,IAAaC,EAAA,EAAiBK,gBAAkB,uBAC9CtP,UAAU,2CAA0C,YAC1C,0BACVmF,KAAK,IACLrF,GAAG,0BACHsF,QAAU,OAAAJ,EAAA,GAAe8H,IAEzB,kBAAC5H,EAAA,EAAgB,CAACpF,GAAKyN,KAGzBmB,GACEM,IAAaC,EAAA,EAAiBQ,eAC9BT,IAAaC,EAAA,EAAiBK,gBAC9B,uBACItP,UAAU,2CAA0C,YAC1C,yBACVmF,KAAK,IACLrF,GAAG,2BACHsF,QAAU,OAAAJ,EAAA,GAAe0E,IAEzB,kBAACxE,EAAA,EAAgB,CAACpF,GAAKkP,IAAaC,EAAA,EAAiBO,yBACjD,gCACA,2BAKdR,IAAaC,EAAA,EAAiBK,gBAAkBH,WE5GlE,0E,OACI,EAAAO,MAAuB,CACnBC,sBAAsB,EACtBC,SAAS,EACTC,wBAAwB,GAmIpB,EAAAC,wBAAsC,WAC1C,EAAKC,SAAS,CACVJ,sBAAsB,EACtBE,wBAAwB,KA6DxB,EAAAG,wBAAsC,kE,4EAClChB,EAAaiB,KAAKxF,MAAK,S,8CAGvBuE,IAAaC,EAAA,EAAiBC,OAASe,KAAKC,WAC5C,GAAMD,KAAKE,qBAAqB,CAAEjI,MAAO+H,KAAKC,cAD9C,M,OACA,S,2CAGJD,KAAKF,SAAS,CACVJ,sBAAsB,I,6BAK1B,EAAAQ,qBAAwE,SAAM5K,GAAM,uD,4EAEpF6K,EACAH,KAAKxF,MAAK,e,iBAGV,O,sBAAA,GAAM2F,EAAe7K,I,cAArB,S,oBAEA0K,KAAKF,SAAS,CACVF,wBAAwB,I,6BAK5B,EAAAQ,sBAAwE,SAAMC,GAAU,uD,oGACtF,EAMFL,KAAKxF,MALL4C,EAAY,eACZkD,EAAe,kBACf,IAAAC,wBAAgB,IAAG,SAAI,EACvB,IAAA1D,yBAAiB,IAAG,SAAI,EACxB,IAAA2D,8BAAsB,IAAG,SAAI,EAG3BvI,EAAQoI,EAAWpI,MAAM8B,O,iBAEV,O,sBAAA,GAAMuG,EAAgB,CACnCrI,MAAK,EACLwI,8BAA4BrD,IAAgBiD,EAAW1D,uBAAyBzI,EAChFwM,6BAA4BL,EAAW1D,sBAAyBzI,K,OAKpE,OARQsD,EAAS,SAIf,MAEImJ,EAAWnJ,EAAKoJ,gBAEND,EAASE,uBAAyBF,EAASG,QACjD,CAAP,EAAOP,EAAiBvB,EAAA,EAAiBK,iBAG5C,GAAMW,KAAKe,0C,cAAX,SAEAf,KAAKC,gBAAa/L,E,aAQlB,MANmB,0B,YAATlE,MAAkD,kCAAf,EAAMA,OAC/CgQ,KAAKC,gBAAa/L,EAElB2I,KAGiB,MAAjB,EAAMjD,OACC,CAAP,EAAO2G,EAAiBvB,EAAA,EAAiBQ,gBAGxB,MAAjB,EAAM5F,OACC,CAAP,EAAO2G,EAAiBvB,EAAA,EAAiBO,4BAG7CiB,EAAuB,G,gCAIvB,EAAAQ,aAAoE,SAAMC,GAAW,uD,wFACnF,EAIFjB,KAAKxF,MAHL0G,EAAM,SACN,IAAA1C,gBAAQ,IAAG,SAAI,EACf,IAAA2C,qBAAa,IAAG,SAAI,E,iBAIpB,O,sBAAA,GAAMD,EAAOD,I,cAAb,SACAzC,IAEAwB,KAAKC,gBAAa/L,E,+BAElBiN,EAAc,G,+BAId,EAAAC,oBAAiE,SAAM9L,GAAM,uD,oFAMjF,OALM,EAGF0K,KAAKxF,MAFL,IAAA6G,qBAAa,IAAG,SAAI,EACpB,IAAAC,wBAAgB,IAAG,SAAI,EAG3B,GAAMD,EAAcxJ,EAA+BvC,K,cAAnD,SAEAgM,I,YAGI,EAAAC,kBAAgC,WAEhC,MACA,EAAK/G,MAAK,uBADM,IAAG,SAAI,GAGVwE,EAAA,EAAiBwC,gBAG9B,EAAAC,0BAAwC,WACtC,MAIF,EAAKjH,MAHLkH,EAAU,aACV,IAAAnB,wBAAgB,IAAG,SAAI,EACvBhH,EAAkB,qBAGlBA,GACAmI,EAAWnI,GAGfgH,EAAiBvB,EAAA,EAAiBC,QAG9B,EAAA0C,mBAAiC,WAC/B,MAIF,EAAKnH,MAHLkH,EAAU,aACV,IAAAnB,wBAAgB,IAAG,SAAI,EACvB1B,EAAW,cAGXA,GACA6C,EAAW7C,GAGf0B,EAAiBvB,EAAA,EAAiB4C,QAG9B,EAAAC,kBAA6C,SAAA5J,GACjD,EAAKgI,WAAahI,GAGd,EAAA6J,gBAA8B,WAC1B,MAA4B,EAAKtH,MAAK,uBAAtB,IAAG,SAAI,GAEdwE,EAAA,EAAiBC,QAG9B,EAAA8B,uCAAqD,kE,2FACnD,EAIFf,KAAKxF,MAHLuH,EAA4B,+BAC5B,IAAAlF,yBAAiB,IAAG,SAAI,GACxBmF,EAA0B,8BAI1B,GAAMD,EAA6B,CAAEE,SAAUD,EAA4BE,6BAA8BrF,KADzG,M,cACA,S,aAEAA,I,qCAGZ,OAvWuB,yBASb,YAAAsF,kBAAN,W,sJACU,EAMFnC,KAAKxF,MALL4H,EAAkB,qBAClBnK,EAAK,QACL,IAAAoK,eAAO,IAAG,SAAI,EACd,IAAAC,wBAAgB,IAAG,SAAI,EACvBN,EAA0B,6BAG9BhC,KAAKC,WAAahI,E,iBAGd,O,sBAAA,GAAMmK,EAAmB,CAAEH,SAAUD,K,cAArC,S,+BAEAM,EAAiB,G,oBAGrBtC,KAAKF,SAAS,CAAEH,SAAS,IAEzB0C,I,YAGE,YAAAE,qBAAN,W,kJACU,EAIFvC,KAAKxF,MAHL,IAAAgI,4BAAoB,IAAG,SAAI,EAC3BR,EAA0B,6BAC1B,IAAAM,wBAAgB,IAAG,SAAI,E,iBAIvB,O,sBAAA,GAAME,EAAqB,CAAEP,SAAUD,K,cAAvC,S,+BAEAM,EAAiB,G,+BAIzB,YAAAzR,OAAA,WACY,IAAAkO,EAAaiB,KAAKxF,MAAK,SACzB,EAAoCwF,KAAKP,MAAvCC,EAAoB,uBAAEC,EAAO,UAC/B8C,EAAwB1D,IAAaC,EAAA,EAAiB4C,MACtDc,EAAgC3D,IAAaC,EAAA,EAAiBwC,cAC9DmB,GAAyBF,IAA0BC,EAEzD,OACI,kBAACE,EAAA,EAAc,CACXtH,WAAaqE,EACbkD,2BAAyB,GAEvBnD,GAAwBM,KAAK8C,2BAC7BH,GAAyB3C,KAAK+C,kBAC9BN,GAAyBzC,KAAKgD,kBAC9BN,GAAiC1C,KAAKiD,4BAK5C,YAAAD,gBAAR,WACU,MAeFhD,KAAKxF,MAdL4C,EAAY,eACZ8F,EAAoB,uBACpBC,EAAiB,oBACjBzG,EAAsB,yBACtB8F,EAAoB,uBACpBvK,EAAK,QACLmK,EAAkB,qBAClB,IAAAgB,2BAAmB,IAAG,GAAK,EAC3B,IAAAC,wCAAgC,IAAG,GAAK,EACxC,IAAAC,sBAAc,IAAG,GAAK,EACtBxG,EAAgB,mBAChBkF,EAA0B,6BAC1BxF,EAAwB,2BACxB,IAAA8F,wBAAgB,IAAG,SAAI,EAG3B,OACI,kBAAC,EAAS,CACNlF,aAAeA,EACfC,gBACI,kBAACkG,EAAA,EAAkB,CACfL,qBAAuBA,EACvBM,aAAehB,EACfiB,WAAarB,EACbkB,eAAiBA,EACjBI,UAAYP,EACZQ,QAAUrB,IAGlBhF,6BAAiC0E,EAA6B,oBAAsB,oCACpFtF,uBAAyBA,EACzBzE,MAAQ+H,KAAKC,YAAchI,EAC3BqD,UAAY8H,GAAuBE,GAAkBD,EACrD9F,cAAgByC,KAAK6B,kBACrBhF,kBAAoBmD,KAAKI,sBACzB5C,YAAcwC,KAAK8B,gBACnBhF,iBAAmBA,EACnBN,yBAA2BA,KAK/B,YAAAsG,yBAAR,WACU,MAGF9C,KAAKP,MAFLC,EAAoB,uBACpBE,EAAsB,yBAGpB,EAIFI,KAAKxF,MAHLoJ,EAAoB,uBACpBC,EAAgB,mBAChBC,EAAW,cAGf,OACI,kBAAC,EAAc,CACX7L,MAAQ+H,KAAKC,WACbrF,sBAAwBgF,EACxBlF,OAASgF,EACT/E,eAAiBiJ,EACjB/I,eAAiBmF,KAAKH,wBACtBpF,iBAAmBuF,KAAKE,qBACxBnF,UAAY+I,EACZhJ,eAAiB+I,KAYrB,YAAAZ,wBAAR,WACU,MAKFjD,KAAKxF,MAJLuJ,EAAqB,wBACrBvK,EAAiB,oBACjBD,EAAkB,qBAClBiD,EAAwB,2BAG5B,OACI,kBAAC,EAAiB,CACdjD,mBAAqBA,EACrBnB,WAAa2L,EACbvK,kBAAoBA,EACpBC,SAAWuG,KAAKyB,0BAChBzI,SAAWgH,KAAKoB,oBAChB5E,yBAA2BA,KAK/B,YAAAuG,gBAAR,WACU,MAYF/C,KAAKxF,MAXLwJ,EAAU,aACV/L,EAAK,QACLkG,EAAiB,oBACjBO,EAAoB,uBACpBuF,EAAc,iBACdL,EAAoB,uBACpBjF,EAAW,cACXuF,EAAwB,2BACxBlC,EAA0B,6BAC1BnD,EAAW,cACXE,EAAQ,WAGZ,OACI,kBAAC,GAAS,CACNN,UAAYwF,EACZ3G,6BAAiC0E,EAA6B,oBAAsB,oCACpF/J,MAAQ+H,KAAKC,YAAchI,EAC3BkG,kBAAoBA,EACpByF,qBAAuBA,EACvBlF,qBAAuBA,IAAyBsF,EAChDrF,YAAcA,EACdlF,SAAWuG,KAAK2B,mBAChBpE,cAAgByC,KAAK6B,kBACrBhF,kBAAoBmD,KAAKe,uCACzBnC,gBAAkBoB,KAAKuB,kBACvB9G,iBAAmBuF,KAAKD,wBACxBvB,SAAWwB,KAAKgB,aAChBlC,4BAA8BoF,EAC9BrF,YAAcA,EACdE,SAAWA,KAqK3B,EAvWA,CAAuB,aAyWhB,SAASoF,GACZ,G,IAAEC,EAAe,kBAAEC,EAAa,gBAG5B,EAGAA,EAAa,KAHLC,EAAiB,oBAAEC,EAAwB,2BAAEC,EAAW,cAAE5D,EAAW,cAAE6D,EAAc,iBAAEC,EAAS,YACxG,EAEAL,EAAa,OAFHM,EAAc,iBAAEC,EAAmB,sBAAEC,EAA6B,gCAC5E,EACAR,EAAa,SADDjB,EAAmB,sBAAEC,EAAgC,mCAAEyB,EAAsB,yBAAEnG,EAAW,cAAEiF,EAAoB,uBAAEmB,EAAyB,4BAGrJC,EAAiBV,IACjBW,EAAWT,IACX7D,EAAWC,IACXkD,EAAcW,IACdS,EAASR,IAEf,IAAKO,IAAaC,EACd,OAAO,KAIP,MAMAA,EAAmF,iBAL/EpI,EAAgB,mBAChBN,EAAwB,2BACxBkC,EAAoB,uBACpBwF,EAAwB,2BAIhC,MAAO,CACHH,sBAAuBQ,IACvBnH,aAAc8H,EAAOC,cAAcC,qBACnCjC,kBAAmB+B,EAAOG,iBAAiBC,wBAC3C5D,WAAY0C,EAAgB1C,WAC5BL,cAAe+C,EAAgBmB,sBAC/BjF,gBAAiB8D,EAAgB9D,gBACjCH,eAAgBiE,EAAgBoB,gBAChC9I,uBAAwBwI,EAAOC,cAAcM,wBAC7CjD,qBAAsB4B,EAAgB5B,qBACtCT,6BAA8BqC,EAAgBrC,6BAC9C9J,OAAO+M,aAAc,EAAdA,EAAgB/M,SAAS0I,aAAQ,EAARA,EAAU1I,OAC1CS,UAAWiI,aAAQ,EAARA,EAAUjI,UACrByF,kBAAmB+G,EAAOQ,MAAMC,mBAChCvD,mBAAoBgC,EAAgBhC,mBACpC5I,kBAAmBuL,IACnBxL,mBAAoBsL,IACpBzB,oBAAqBA,IACrBC,iCAAkCA,IAClCC,eAAiBwB,IACjBpG,qBAAoB,EACpBwF,yBAAwB,EACxBD,eAAgBiB,EAAOG,iBAAiBO,qBACxCjH,YAAaA,IACbiF,qBAAsBA,IACtBE,YAAW,EACXD,iBAAkBe,IAClB9H,iBAAgB,EAChBkF,2BAA4BkD,EAAOG,iBAAiBrD,iCAA8B9N,EAClFsI,yBAAwB,EACxB0E,OAAQkD,EAAgByB,eACxBhH,YAAa8F,KAIN,iBAAAmB,EAAA,GAAa3B,GAAb,CAA6C","file":"customer-79ad5d3a.js","sourcesContent":["import classNames from 'classnames';\nimport React, { forwardRef, ReactNode, Ref } from 'react';\n\nimport Input, { InputProps } from './Input';\nimport Label from './Label';\n\nexport interface CheckboxInputProps extends InputProps {\n    additionalClassName?: string;\n    label: ReactNode;\n    value: string;\n    checked: boolean;\n}\n\nconst CheckboxInput = forwardRef((\n    {\n        additionalClassName,\n        label,\n        id,\n        ...rest\n    }: CheckboxInputProps,\n    ref: Ref<HTMLInputElement>\n) => (\n    <>\n        <Input\n            { ...rest }\n            className={ classNames(\n                'form-checkbox',\n                'optimizedCheckout-form-checkbox',\n                additionalClassName\n            ) }\n            id={ id }\n            ref={ ref }\n            type=\"checkbox\"\n        />\n        <Label htmlFor={ id }>\n            { label }\n        </Label>\n    </>\n));\n\nexport default CheckboxInput;\n","import classNames from 'classnames';\nimport React, { forwardRef, ReactNode, Ref } from 'react';\n\nimport Input, { InputProps } from './Input';\nimport Label from './Label';\n\nexport interface RadioInputProps extends InputProps {\n    additionalClassName?: string;\n    label: ReactNode;\n    value: string;\n    checked: boolean;\n}\n\nconst RadioInput = forwardRef((\n    {\n        additionalClassName,\n        label,\n        value,\n        checked,\n        id,\n        ...rest\n    }: RadioInputProps,\n    ref: Ref<HTMLInputElement>\n) => (\n    <>\n        <Input\n            { ...rest }\n            checked={ checked }\n            className={ classNames(\n                'form-radio',\n                'optimizedCheckout-form-radio',\n                additionalClassName\n            ) }\n            id={ id }\n            ref={ ref }\n            type=\"radio\"\n            value={ value }\n        />\n        <Label htmlFor={ id }>\n            { label }\n        </Label>\n    </>\n));\n\nexport default RadioInput;\n","import classNames from 'classnames';\nimport React, { forwardRef, Ref, TextareaHTMLAttributes } from 'react';\n\nexport interface TextAreaProps extends TextareaHTMLAttributes<HTMLTextAreaElement> {\n    additionalClassName?: string;\n    testId?: string;\n}\n\nconst TextArea = forwardRef((\n    { additionalClassName, testId, className, ...rest }: TextAreaProps,\n    ref: Ref<HTMLTextAreaElement>\n) => (\n    <textarea\n        { ...rest }\n        className={ className || classNames(\n            'form-input',\n            'optimizedCheckout-form-input',\n            additionalClassName\n        ) }\n        data-test={ testId }\n        ref={ ref }\n    />\n));\n\nexport default TextArea;\n","import { FieldProps } from 'formik';\nimport { kebabCase } from 'lodash';\nimport React, { memo, useCallback, Fragment, FunctionComponent, ReactNode } from 'react';\n\nimport BasicFormField from './BasicFormField';\nimport CheckboxInput from './CheckboxInput';\nimport FormFieldError from './FormFieldError';\n\nexport interface CheckboxFormFieldProps {\n    additionalClassName?: string;\n    disabled?: boolean;\n    name: string;\n    id?: string;\n    labelContent: ReactNode;\n    onChange?(isChecked: boolean): void;\n}\n\nconst CheckboxFormField: FunctionComponent<CheckboxFormFieldProps> = ({\n    additionalClassName,\n    disabled = false,\n    labelContent,\n    onChange,\n    name,\n    id,\n}) => {\n    const renderField = useCallback(({ field }: FieldProps) => (\n        <Fragment>\n            { <CheckboxInput\n                { ...field }\n                checked={ !!field.value }\n                disabled={ disabled }\n                id={ id || field.name }\n                label={ labelContent }\n            /> }\n\n            <FormFieldError\n                name={ name }\n                testId={ `${kebabCase(name)}-field-error-message` }\n            />\n        </Fragment>\n    ), [\n        disabled,\n        id,\n        labelContent,\n        name,\n    ]);\n\n    return <BasicFormField\n        additionalClassName={ additionalClassName }\n        name={ name }\n        onChange={ onChange }\n        render={ renderField }\n    />;\n};\n\nexport default memo(CheckboxFormField);\n","import { forIn, isDate, padStart } from 'lodash';\n\nexport default function mapCustomFormFieldsFromFormValues(\n    customFieldsObject: { [id: string]: any }\n): Array<{fieldId: string; fieldValue: string}> {\n    const customFields: Array<{fieldId: string; fieldValue: string}> = [];\n    forIn(customFieldsObject, (value, key) => {\n        let fieldValue: string;\n\n        if (isDate(value)) {\n            const padMonth = padStart((value.getMonth() + 1).toString(), 2, '0');\n            const padDay = padStart((value.getDate()).toString(), 2, '0');\n            fieldValue = `${value.getFullYear()}-${padMonth}-${padDay}`;\n        } else {\n            fieldValue = value;\n        }\n\n        customFields.push({\n            fieldId: key,\n            fieldValue,\n        });\n    });\n\n    return customFields;\n}\n","import { createInjectHoc, InjectHoc } from '../common/hoc';\n\nimport LocaleContext from './LocaleContext';\n\nexport interface WithDateProps {\n    date: {\n        inputFormat: string;\n    };\n}\n\nconst withDate: InjectHoc<WithDateProps> = createInjectHoc(LocaleContext, {\n    displayNamePrefix: 'withDate',\n    pickProps: (value, key) => key === 'date' && !!value,\n});\n\nexport default withDate;\n","export default function parseAnchor(text: string): string[] {\n    const div = document.createElement('div');\n    div.innerHTML = text;\n\n    const anchor = div.querySelector('a');\n\n    if (!anchor) {\n        return [];\n    }\n\n    const anchorSiblings = div.innerHTML.split(anchor.outerHTML);\n\n    return [ anchorSiblings[0], anchor.text, anchorSiblings[1] ];\n}\n","import { FormFieldItem } from '@bigcommerce/checkout-sdk';\nimport { isDate, noop } from 'lodash';\nimport React, { memo, useCallback, FunctionComponent } from 'react';\nimport ReactDatePicker from 'react-datepicker';\n\nimport { withDate, WithDateProps } from '../../locale';\n\nimport CheckboxInput from './CheckboxInput';\nimport DynamicFormFieldType from './DynamicFormFieldType';\nimport { InputProps } from './Input';\nimport RadioInput from './RadioInput';\nimport TextArea from './TextArea';\nimport TextInput from './TextInput';\n\nexport interface DynamicInputProps extends InputProps {\n    id: string;\n    additionalClassName?: string;\n    value?: string | string[];\n    rows?: number;\n    fieldType?: DynamicFormFieldType;\n    options?: FormFieldItem[];\n}\n\nconst DynamicInput: FunctionComponent<DynamicInputProps & WithDateProps> = ({\n    additionalClassName,\n    date,\n    fieldType,\n    id,\n    name,\n    onChange = noop,\n    options,\n    placeholder,\n    value,\n    ...rest\n}) => {\n    const { inputFormat } = date;\n    const handleDateChange = useCallback((dateValue, event) => onChange({\n        ...event,\n        target: {\n            name,\n            value: dateValue,\n        },\n    }), [\n        onChange,\n        name,\n    ]);\n\n    switch (fieldType) {\n    case DynamicFormFieldType.dropdown:\n        return (\n            <select\n                { ...rest as any }\n                className=\"form-select optimizedCheckout-form-select\"\n                data-test={ `${id}-select` }\n                id={ id }\n                name={ name }\n                onChange={ onChange }\n                value={ value === null ? '' : value }\n            >\n                { placeholder &&\n                    <option value=\"\">\n                        { placeholder }\n                    </option> }\n                { options && options.map(({ label, value: optionValue }) =>\n                    <option\n                        key={ optionValue }\n                        value={ optionValue }\n                    >\n                        { label }\n                    </option>\n                ) }\n            </select>\n        );\n\n    case DynamicFormFieldType.radio:\n        if (!options || !options.length) {\n            return null;\n        }\n\n        return <>\n            { options.map(({ label, value: optionValue }) =>\n                <RadioInput\n                    { ...rest }\n                    checked={ optionValue === value }\n                    id={ `${id}-${optionValue}` }\n                    key={ optionValue }\n                    label={ label }\n                    name={ name }\n                    onChange={ onChange }\n                    testId={ `${id}-${optionValue}-radio` }\n                    value={ optionValue }\n                />) }\n        </>;\n\n    case DynamicFormFieldType.checkbox:\n        if (!options || !options.length) {\n            return null;\n        }\n\n        return <>\n            { options.map(({ label, value: optionValue }) =>\n                <CheckboxInput\n                    { ...rest }\n                    checked={ Array.isArray(value) ? value.includes(optionValue) : false }\n                    id={ `${id}-${optionValue}` }\n                    key={ optionValue }\n                    label={ label }\n                    name={ name }\n                    onChange={ onChange }\n                    testId={ `${id}-${optionValue}-checkbox` }\n                    value={ optionValue }\n                />) }\n        </>;\n\n    case DynamicFormFieldType.date:\n        return (\n            <ReactDatePicker\n                { ...rest as any }\n                autoComplete=\"off\"\n                // FIXME: we can avoid this by simply using onChangeRaw, but it's not being triggered properly\n                // https://github.com/Hacker0x01/react-datepicker/issues/1357\n                // onChangeRaw={ rest.onChange }\n                calendarClassName=\"optimizedCheckout-contentPrimary\"\n                className=\"form-input optimizedCheckout-form-input\"\n                dateFormat={ inputFormat }\n                maxDate={ rest.max ? new Date(`${rest.max}T00:00:00Z`) : undefined }\n                minDate={ rest.min ? new Date(`${rest.min}T00:00:00Z`) : undefined }\n                name={ name }\n                onChange={ handleDateChange }\n                placeholderText={ inputFormat.toUpperCase() }\n                popperClassName=\"optimizedCheckout-contentPrimary\"\n                selected={ isDate(value) ? value : undefined }\n            />\n        );\n\n    case DynamicFormFieldType.multiline:\n        return (\n            <TextArea\n                { ...rest as any }\n                id={ id }\n                name={ name }\n                onChange={ onChange }\n                testId={ `${id}-text` }\n                type={ fieldType }\n                value={ value }\n            />\n        );\n\n    default:\n        return (\n            <TextInput\n                { ...rest }\n                id={ id }\n                name={ name }\n                onChange={ onChange }\n                placeholder={ placeholder }\n                testId={ `${id}-${ fieldType === DynamicFormFieldType.password ?\n                    'password' :\n                    'text' }` }\n                type={ fieldType }\n                value={ value }\n            />\n        );\n    }\n};\n\nexport default memo(withDate(DynamicInput));\n","import React, { memo, useCallback, FunctionComponent, MouseEvent } from 'react';\n\nimport { TranslatedString } from '../../locale';\n\nimport './MultiCheckboxControl.scss';\n\nexport interface MultiCheckboxControlProps {\n    testId?: string;\n    onSelectedAll(): void;\n    onSelectedNone(): void;\n}\n\nconst MultiCheckboxControl: FunctionComponent<MultiCheckboxControlProps> = ({\n    testId,\n    onSelectedAll,\n    onSelectedNone,\n}) => {\n    const handleSelectAllClick = useCallback((event: MouseEvent) => {\n        event.preventDefault();\n        onSelectedAll();\n    }, [onSelectedAll]);\n\n    const handleSelectNoneClick = useCallback((event: MouseEvent) => {\n        event.preventDefault();\n        onSelectedNone();\n    }, [onSelectedNone]);\n\n    return <ul className=\"multiCheckbox--controls\">\n        <li className=\"multiCheckbox--control\">\n            <TranslatedString id=\"address.select\" />\n        </li>\n\n        <li className=\"multiCheckbox--control\">\n            <a\n                data-test={ `${testId}Checkbox-all-button` }\n                href=\"#\"\n                onClick={ handleSelectAllClick }\n            >\n                <TranslatedString id=\"address.select_all\" />\n            </a>\n        </li>\n\n        <li className=\"multiCheckbox--control\">\n            <a\n                data-test={ `${testId}Checkbox-none-button` }\n                href=\"#\"\n                onClick={ handleSelectNoneClick }\n            >\n                <TranslatedString id=\"address.select_none\" />\n            </a>\n        </li>\n    </ul>;\n};\n\nexport default memo(MultiCheckboxControl);\n","import { FormFieldItem } from '@bigcommerce/checkout-sdk';\nimport { getIn, FieldArray, FieldArrayRenderProps } from 'formik';\nimport { difference, kebabCase, noop, pick } from 'lodash';\nimport React, { memo, useCallback, ChangeEvent, FunctionComponent, ReactNode } from 'react';\n\nimport DynamicFormFieldType from './DynamicFormFieldType';\nimport DynamicInput from './DynamicInput';\nimport FormFieldContainer from './FormFieldContainer';\nimport FormFieldError from './FormFieldError';\nimport MultiCheckboxControl from './MultiCheckboxControl';\n\nexport interface CheckboxGroupFormFieldProps {\n    id: string;\n    label: ReactNode;\n    name: string;\n    options: FormFieldItem[];\n    onChange?(values: string[]): void;\n}\n\ntype MultiCheckboxFormFieldProps = (\n    CheckboxGroupFormFieldProps &\n    Pick<FieldArrayRenderProps, 'push' | 'remove' | 'pop' | 'form'>\n);\n\nconst MultiCheckboxFormField: FunctionComponent<MultiCheckboxFormFieldProps> = ({\n    form: { values, errors },\n    id,\n    label,\n    name,\n    onChange = noop,\n    options,\n    push,\n    remove,\n}) => {\n    const handleSelectAll = useCallback(() => {\n        const checkedValues: string[] = getIn(values, name) || [];\n\n        difference(options.map(({ value }) => value), checkedValues)\n            .forEach(val => push(val));\n\n        onChange(getIn(values, name));\n    }, [\n        name,\n        onChange,\n        options,\n        push,\n        values,\n    ]);\n\n    const handleSelectNone = useCallback(() => {\n        const checkedValues: string[] = getIn(values, name) || [];\n\n        checkedValues.forEach(() => remove(0));\n\n        onChange(getIn(values, name));\n    }, [\n        name,\n        onChange,\n        remove,\n        values,\n    ]);\n\n    const handleInputChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n        const checkedValues: string[] = getIn(values, name) || [];\n        const { value, checked } = event.target;\n\n        if (checked) {\n            push(value);\n        } else {\n            remove(checkedValues.indexOf(value));\n        }\n\n        onChange(getIn(values, name));\n    }, [\n        name,\n        onChange,\n        push,\n        remove,\n        values,\n    ]);\n\n    return <FormFieldContainer hasError={ getIn(errors, name) && getIn(errors, name).length }>\n        { label }\n\n        { options.length > 1 && <MultiCheckboxControl\n            onSelectedAll={ handleSelectAll }\n            onSelectedNone={ handleSelectNone }\n            testId={ id }\n        /> }\n\n        <DynamicInput\n            fieldType={ DynamicFormFieldType.checkbox }\n            id={ id }\n            name={ name }\n            onChange={ handleInputChange }\n            options={ options }\n            value={ getIn(values, name) || [] }\n        />\n\n        <FormFieldError\n            name={ name }\n            testId={ `${kebabCase(name)}-field-error-message` }\n        />\n    </FormFieldContainer>;\n};\n\nconst CheckboxGroupFormField: FunctionComponent<CheckboxGroupFormFieldProps> = ({\n    id,\n    label,\n    name,\n    onChange,\n    options,\n}) => {\n    const renderField = useCallback((renderProps: FieldArrayRenderProps) => (\n        <MultiCheckboxFormField\n            id={ id }\n            label={ label }\n            name={ name }\n            onChange={ onChange }\n            options={ options }\n            { ...pick(renderProps, [\n                'form',\n                'pop',\n                'push',\n                'remove',\n            ]) }\n        />\n    ), [\n        id,\n        label,\n        name,\n        onChange,\n        options,\n    ]);\n\n    return <FieldArray\n        name={ name }\n        render={ renderField }\n    />;\n};\n\nexport default memo(CheckboxGroupFormField);\n","import { FormField as FormFieldType } from '@bigcommerce/checkout-sdk';\nimport { FieldProps } from 'formik';\nimport React, { memo, useCallback, useMemo, FunctionComponent, ReactNode } from 'react';\n\nimport { TranslatedString } from '../../locale';\n\nimport CheckboxGroupFormField from './CheckboxGroupFormField';\nimport DynamicFormFieldType from './DynamicFormFieldType';\nimport DynamicInput from './DynamicInput';\nimport FormField from './FormField';\nimport Label from './Label';\n\nexport interface DynamicFormFieldOption {\n    code: string;\n    name: string;\n}\n\nexport interface DynamicFormFieldProps {\n    field: FormFieldType;\n    inputId?: string;\n    extraClass?: string;\n    autocomplete?: string;\n    parentFieldName?: string;\n    placeholder?: string;\n    label?: ReactNode;\n    onChange?(value: string | string[]): void;\n}\n\nconst DynamicFormField: FunctionComponent<DynamicFormFieldProps>  = ({\n    field: {\n        fieldType,\n        type,\n        secret,\n        name,\n        label: fieldLabel,\n        required,\n        options,\n        max,\n        min,\n        maxLength,\n    },\n    parentFieldName,\n    onChange,\n    placeholder,\n    inputId,\n    autocomplete,\n    label,\n    extraClass,\n}) => {\n    const fieldInputId = inputId || name;\n    const fieldName = parentFieldName ? `${parentFieldName}.${name}` : name;\n\n    const labelComponent = useMemo(() => (\n        <Label htmlFor={ fieldInputId }>\n            { label || fieldLabel }\n            { !required &&\n                <>\n                    { ' ' }\n                    <small className=\"optimizedCheckout-contentSecondary\">\n                        <TranslatedString id=\"common.optional_text\" />\n                    </small>\n                </> }\n        </Label>\n    ), [\n        fieldInputId,\n        fieldLabel,\n        required,\n        label,\n    ]);\n\n    const dynamicFormFieldType = useMemo((): DynamicFormFieldType => {\n        if (fieldType === 'text') {\n            if (type === 'integer') {\n                return DynamicFormFieldType.number;\n            }\n\n            return secret ?\n                DynamicFormFieldType.password :\n                DynamicFormFieldType.text;\n        }\n\n        return fieldType as DynamicFormFieldType;\n    }, [fieldType, type, secret]);\n\n    const renderInput = useCallback(({ field }: FieldProps<string>) => (\n        <DynamicInput\n            { ...field }\n            autoComplete={ autocomplete }\n            fieldType={ dynamicFormFieldType }\n            id={ fieldInputId }\n            max={ max }\n            maxLength={ maxLength || undefined }\n            min={ min }\n            options={ options && options.items }\n            placeholder={ placeholder || (options && options.helperLabel) }\n            rows={ options && (options as any).rows }\n        />\n    ), [\n        fieldInputId,\n        max,\n        maxLength,\n        min,\n        options,\n        placeholder,\n        dynamicFormFieldType,\n        autocomplete,\n    ]);\n\n    return (\n        <div className={ `dynamic-form-field ${extraClass}` }>\n            { fieldType === DynamicFormFieldType.checkbox ?\n                <CheckboxGroupFormField\n                    id={ fieldInputId }\n                    label={ labelComponent }\n                    name={ fieldName }\n                    onChange={ onChange }\n                    options={ (options && options.items) || [] }\n                /> :\n                <FormField\n                    input={ renderInput }\n                    label={ labelComponent }\n                    name={ fieldName }\n                    onChange={ onChange }\n                /> }\n        </div>\n    );\n};\n\nexport default memo(DynamicFormField);\n","import React, { FunctionComponent, MouseEventHandler } from 'react';\n\nimport { preventDefault } from '../common/dom';\nimport { parseAnchor } from '../common/utility';\n\nimport withLanguage, { WithLanguageProps } from './withLanguage';\nimport { TranslatedStringProps } from './TranslatedString';\n\nexport type TranslatedLinkProps = TranslatedStringProps & {\n    testId?: string;\n    onClick: MouseEventHandler;\n};\n\nconst TranslatedLink: FunctionComponent<TranslatedLinkProps & WithLanguageProps> = ({\n    data,\n    id,\n    language,\n    onClick,\n    testId,\n}) => {\n    const translatedString = language.translate(id, data);\n    const parsedString = parseAnchor(translatedString);\n\n    return parsedString.length ?\n        <>\n            { parsedString[0] }\n            <a\n                data-test={ testId }\n                href=\"#\"\n                onClick={ preventDefault(onClick) }\n            >\n                { parsedString[1] }\n            </a>\n            { parsedString[2] }\n        </> :\n        <>{ translatedString }</>;\n};\n\nexport default withLanguage(TranslatedLink);\n","import { CustomerAccountRequestBody } from '@bigcommerce/checkout-sdk';\n\nimport { mapCustomFormFieldsFromFormValues } from '../formFields';\n\nimport { CreateAccountFormValues } from './getCreateCustomerValidationSchema';\n\nexport default function mapCreateAccountFromFormValues(\n    { acceptsMarketingEmails, customFields, ...values }: CreateAccountFormValues\n): CustomerAccountRequestBody {\n    return {\n        ...values,\n        acceptsMarketingEmails: acceptsMarketingEmails && acceptsMarketingEmails.length > 0,\n        customFields: mapCustomFormFieldsFromFormValues(customFields),\n    };\n}\n","// NOTE: This is a legacy regex used to create accounts, more flexible than the current used one\n// we need to keep this regex for login validation as accounts might have been created using this regex\nexport const EMAIL_REGEXP = /^[a-z0-9!#$%&'*+\\/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i;\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport { object, string, ObjectSchema } from 'yup';\n\nimport { EMAIL_REGEXP } from './validationPatterns';\n\nexport interface EmailValidationSchemaOptions {\n    language: LanguageService;\n}\n\nexport default function getEmailValidationSchema({\n    language,\n}: EmailValidationSchemaOptions): ObjectSchema<{ email: string }> {\n    return object({\n        email: string()\n            .max(256)\n            .matches(EMAIL_REGEXP, language.translate('customer.email_invalid_error'))\n            .required(language.translate('customer.email_required_error')),\n    });\n}\n","import { FormField, LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { object, string, ObjectSchema } from 'yup';\n\nimport { getCustomFormFieldsValidationSchema, CustomFormFieldValues, TranslateValidationErrorFunction } from '../formFields';\n\nimport getEmailValidationSchema from './getEmailValidationSchema';\nimport { PasswordRequirements } from './getPasswordRequirements';\n\nexport type CreateAccountFormValues = {\n    firstName: string;\n    lastName: string;\n    email: string;\n    password: string;\n    acceptsMarketingEmails?: string[];\n    token?: string;\n} & CustomFormFieldValues;\n\nexport interface CreateCustomerValidationSchema {\n    formFields: FormField[];\n    language: LanguageService;\n    passwordRequirements: PasswordRequirements;\n}\n\nfunction getTranslateCreateCustomerError(language?: LanguageService): TranslateValidationErrorFunction {\n    return (type, { label, min, max }) => {\n        if (!language) {\n            return;\n        }\n\n        if (type === 'required') {\n            return language.translate('customer.required_error', { label });\n        }\n\n        if (type === 'max' && max) {\n            return language.translate('customer.max_error', { label, max });\n        }\n\n        if (type === 'min' && min) {\n            return language.translate('customer.min_error', { label, min });\n        }\n\n        if (type === 'invalid') {\n            return language.translate('customer.invalid_characters_error', { label });\n        }\n\n        return;\n    };\n}\n\nexport default memoize(function getCreateCustomerValidationSchema({\n    formFields,\n    language,\n    passwordRequirements: { description, numeric, alpha, minLength },\n}: CreateCustomerValidationSchema): ObjectSchema<CreateAccountFormValues> {\n    return object({\n            firstName: string().required(language.translate('address.first_name_required_error')),\n            lastName: string().required(language.translate('address.last_name_required_error')),\n            password: string()\n                .required(description || language.translate('customer.password_required_error'))\n                .matches(numeric, description || language.translate('customer.password_number_required_error'))\n                .matches(alpha, description || language.translate('customer.password_letter_required_error'))\n                .min(minLength, description || language.translate('customer.password_under_minimum_length_error'))\n                .max(100, language.translate('customer.password_over_maximum_length_error')),\n        })\n        .concat(getEmailValidationSchema({ language }))\n        .concat(getCustomFormFieldsValidationSchema({\n            formFields,\n            translate: getTranslateCreateCustomerError(language),\n        }));\n});\n","import { FormField } from '@bigcommerce/checkout-sdk';\nimport { withFormik, FormikProps } from 'formik';\nimport { noop } from 'lodash';\nimport React, { useMemo, FunctionComponent } from 'react';\n\nimport { preventDefault } from '../common/dom';\nimport { isRequestError } from '../common/error';\nimport { withLanguage, TranslatedString, WithLanguageProps } from '../locale';\nimport { Alert, AlertType } from '../ui/alert';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { DynamicFormField, Fieldset, Form } from '../ui/form';\n\nimport getCreateCustomerValidationSchema, { CreateAccountFormValues } from './getCreateCustomerValidationSchema';\nimport getPasswordRequirements from './getPasswordRequirements';\nimport './CreateAccountForm.scss';\n\nexport interface CreateAccountFormProps {\n    formFields: FormField[];\n    createAccountError?: Error;\n    isCreatingAccount?: boolean;\n    requiresMarketingConsent: boolean;\n    onCancel?(): void;\n    onSubmit?(values: CreateAccountFormValues): void;\n}\n\nconst CreateAccountForm: FunctionComponent<CreateAccountFormProps & WithLanguageProps & FormikProps<CreateAccountFormValues>> = ({\n    formFields,\n    createAccountError,\n    isCreatingAccount,\n    onCancel,\n}) => {\n    const createAccountErrorMessage = useMemo(() => {\n        if (!createAccountError) {\n            return;\n        }\n\n        if (isRequestError(createAccountError) && createAccountError.status === 409) {\n            const splitMessage = createAccountError.message.split(':');\n\n            if (splitMessage.length > 1) {\n                return <TranslatedString\n                    data={ { email:  splitMessage[1].trim() } }\n                    id=\"customer.email_in_use_text\"\n                />;\n            }\n\n            return <TranslatedString id=\"customer.unknown_email_in_use_text\" />;\n        }\n\n        return createAccountError.message;\n    }, [createAccountError]);\n\n    return (<>\n        <Form\n            className=\"checkout-form\"\n            id=\"checkout-customer-returning\"\n            testId=\"checkout-customer-returning\"\n        >\n            <Fieldset>\n                { createAccountErrorMessage && <Alert\n                    type={ AlertType.Error }\n                >\n                    { createAccountErrorMessage }\n                </Alert> }\n                <div className=\"create-account-form\">\n                    { formFields.map(field => (\n                        <DynamicFormField\n                            autocomplete={ field.name }\n                            extraClass={ `dynamic-form-field--${field.name}` }\n                            field={ field }\n                            key={ field.id }\n                            parentFieldName={ field.custom ? 'customFields'  : undefined }\n                        />\n                    )) }\n                </div>\n            </Fieldset>\n\n           <div className=\"form-actions\">\n                <Button\n                    disabled={ isCreatingAccount }\n                    id=\"checkout-customer-create\"\n                    testId=\"customer-continue-create\"\n                    type=\"submit\"\n                    variant={ ButtonVariant.Primary }\n                >\n                    <TranslatedString id=\"customer.create_account_action\" />\n                </Button>\n\n                <a\n                    className=\"button optimizedCheckout-buttonSecondary\"\n                    data-test=\"customer-cancel-button\"\n                    href=\"#\"\n                    id=\"checkout-customer-cancel\"\n                    onClick={ preventDefault(onCancel) }\n                >\n                    <TranslatedString id=\"common.cancel_action\" />\n                </a>\n            </div>\n        </Form>\n    </>);\n};\n\nexport default withLanguage(withFormik<CreateAccountFormProps & WithLanguageProps, CreateAccountFormValues>({\n    handleSubmit: (values, { props: { onSubmit = noop } }) => {\n        onSubmit(values);\n    },\n    mapPropsToValues: ({requiresMarketingConsent}) => ({\n        firstName: '',\n        lastName: '',\n        email: '',\n        password: '',\n        customFields: {},\n        acceptsMarketingEmails: requiresMarketingConsent ? [] : ['0'],\n    }),\n    validationSchema: ({\n        language,\n        formFields,\n    }: CreateAccountFormProps & WithLanguageProps) => {\n        const passwordRequirements = formFields.find(({ requirements }) => requirements)?.requirements;\n\n        if (!passwordRequirements) {\n            throw new Error('Password requirements missing');\n        }\n\n        const schema = getCreateCustomerValidationSchema({\n            language,\n            formFields,\n            passwordRequirements: getPasswordRequirements(passwordRequirements),\n        });\n\n        return schema;\n    },\n})(CreateAccountForm));\n","import { FieldProps } from 'formik';\nimport React, { memo, useCallback, useMemo, FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../locale';\nimport { FormField, TextInput } from '../ui/form';\n\nexport interface EmailFieldProps {\n    onChange?(value: string): void;\n}\n\nconst EmailField: FunctionComponent<EmailFieldProps>  = ({\n    onChange,\n}) => {\n    const renderInput = useCallback((props: FieldProps) => (\n        <TextInput\n            { ...props.field }\n            autoComplete={ props.field.name }\n            id={ props.field.name }\n            type=\"email\"\n        />\n    ), []);\n\n    const labelContent = useMemo(() => (\n        <TranslatedString id=\"customer.email_label\" />\n    ), []);\n\n    return <FormField\n        input={ renderInput }\n        labelContent={ labelContent }\n        name=\"email\"\n        onChange={ onChange }\n    />;\n};\n\nexport default memo(EmailField);\n","import { SignInEmail } from '@bigcommerce/checkout-sdk';\nimport { withFormik, FormikProps } from 'formik';\nimport { noop } from 'lodash';\nimport React, { memo, useMemo, FunctionComponent } from 'react';\n\nimport { withLanguage, TranslatedHtml, TranslatedLink, TranslatedString, WithLanguageProps } from '../locale';\nimport { Alert, AlertType } from '../ui/alert';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Form } from '../ui/form';\nimport { LoadingSpinner } from '../ui/loading';\nimport { Modal, ModalHeader } from '../ui/modal';\n\nimport getEmailValidationSchema from './getEmailValidationSchema';\nimport EmailField from './EmailField';\n\nexport interface EmailLoginFormProps {\n    email?: string;\n    isOpen: boolean;\n    isSendingEmail?: boolean;\n    emailHasBeenRequested?: boolean;\n    sentEmail?: SignInEmail;\n    sentEmailError?: any;\n    onRequestClose?(): void;\n    onSendLoginEmail?(values: EmailLoginFormValues): void;\n}\n\nexport interface EmailLoginFormValues {\n    email: string;\n}\n\nconst EmailLoginForm: FunctionComponent<EmailLoginFormProps & WithLanguageProps & FormikProps<EmailLoginFormValues>> = ({\n    email,\n    isOpen,\n    isSendingEmail = false,\n    emailHasBeenRequested,\n    onRequestClose = noop,\n    sentEmailError,\n    sentEmail,\n    submitForm,\n    values: {\n        email: formEmail,\n    },\n}) => {\n    const modalHeaderStringId = useMemo(() => {\n        if (emailHasBeenRequested) {\n            if (sentEmailError) {\n                return 'common.error_heading';\n            }\n\n            return 'login_email.sent_header';\n        }\n\n        if (email) {\n            return 'login_email.header_with_email';\n        }\n\n        return 'login_email.header';\n    }, [emailHasBeenRequested, sentEmailError, email]);\n\n    const okButton = useMemo(() => (\n        <div className=\"modal-footer\">\n            <Button onClick={ onRequestClose }>\n                <TranslatedString id=\"common.ok_action\" />\n            </Button>\n        </div>\n    ), [onRequestClose]);\n\n    const footer = useMemo(() => {\n        if (sentEmailError && sentEmailError.status === 429) {\n            return okButton;\n        }\n\n        if (emailHasBeenRequested && !sentEmailError) {\n            if (isSendingEmail) {\n                return <LoadingSpinner isLoading />;\n            }\n\n            if (sentEmail && sentEmail.sent_email === 'reset_password') {\n                return okButton;\n            }\n\n            return (\n                <p>\n                    <TranslatedLink\n                        id=\"login_email.resend_link\"\n                        onClick={ submitForm }\n                    />\n                    <TranslatedLink\n                        id=\"login_email.use_password_link\"\n                        onClick={ onRequestClose }\n                    />\n                </p>\n            );\n        }\n\n        return (\n            <div className=\"modal-footer\">\n                <Button\n                    className=\"optimizedCheckout-buttonSecondary\"\n                    onClick={ onRequestClose }\n                    type=\"button\"\n                >\n                    <TranslatedString id=\"common.go_back\" />\n                </Button>\n                <Button\n                    isLoading={ isSendingEmail }\n                    type=\"submit\"\n                    variant={ ButtonVariant.Primary }\n                >\n                    <TranslatedString id=\"login_email.send\" />\n                </Button>\n            </div>\n        );\n    }, [\n        sentEmailError,\n        emailHasBeenRequested,\n        okButton,\n        submitForm,\n        isSendingEmail,\n        onRequestClose,\n        sentEmail,\n    ]);\n\n    const error = useMemo(() => {\n        if (!sentEmailError) {\n            return null;\n        }\n\n        const { status } = sentEmailError;\n\n        return (\n            <Alert type={ AlertType.Error }>\n                { status === 429 ?\n                    <TranslatedString id=\"login_email.error_temporary_disabled\" /> :\n                    <TranslatedString id={ status === 404 ?\n                        'login_email.error_not_found' :\n                        'login_email.error_server' }\n                    /> }\n            </Alert>\n        );\n    }, [sentEmailError]);\n\n    const form = useMemo(() => {\n        if (sentEmailError && sentEmailError.status === 429) {\n            return null;\n        }\n\n        if (emailHasBeenRequested && sentEmail && !sentEmailError) {\n            const { expiry, sent_email } = sentEmail;\n\n            return (\n                <p>\n                    <TranslatedHtml\n                        data={ {\n                            email: formEmail,\n                            minutes: Math.round(expiry / 60),\n                        } }\n                        id={ sent_email === 'sign_in' ?\n                            'login_email.sent_text' :\n                            'customer.reset_password_before_login_error' }\n                    />\n                </p>\n            );\n        }\n\n        if (emailHasBeenRequested && !sentEmail) {\n            return <EmailField />;\n        }\n\n        return (<>\n            <p>\n                <TranslatedString id=\"login_email.text\" />\n            </p>\n            <EmailField />\n        </>);\n    }, [sentEmailError, emailHasBeenRequested, sentEmail, formEmail]);\n\n    return (\n        <Modal\n            additionalBodyClassName=\"modal--withText\"\n            additionalModalClassName=\"modal--medium\"\n            header={\n                <ModalHeader>\n                    <TranslatedString id={ modalHeaderStringId } />\n                </ModalHeader>\n            }\n            isOpen={ isOpen }\n            onRequestClose={ onRequestClose }\n            shouldShowCloseButton={ true }\n        >\n            <Form>\n                <LoadingSpinner isLoading={ isSendingEmail && !email } />\n                { error }\n                { form }\n                { footer }\n            </Form>\n        </Modal>);\n};\n\nexport default withLanguage(withFormik<EmailLoginFormProps & WithLanguageProps, EmailLoginFormValues>({\n    mapPropsToValues: ({\n        email = '',\n    }) => ({\n        email,\n    }),\n    handleSubmit: (values, { props: { onSendLoginEmail = noop } }) => {\n        onSendLoginEmail(values);\n    },\n    validationSchema: ({ language }: WithLanguageProps) => getEmailValidationSchema({ language }),\n})(memo(EmailLoginForm)));\n","import React, { memo, FunctionComponent } from 'react';\n\nimport { TranslatedHtml } from '../locale';\nimport { CheckboxFormField, Fieldset } from '../ui/form';\n\nconst PrivacyPolicyCheckboxFieldLink: FunctionComponent<{ url: string }> = ({\n    url,\n}) => (\n    <CheckboxFormField\n        labelContent={ <TranslatedHtml data={ { url } } id=\"privacy_policy.label\" /> }\n        name=\"privacyPolicy\"\n    />\n);\n\nconst PrivacyPolicyFieldset: FunctionComponent<{ url: string }> = ({\n    url,\n}) => (\n    <Fieldset additionalClassName=\"checkout-privacy-policy\">\n        <PrivacyPolicyCheckboxFieldLink url={ url } />\n    </Fieldset>\n);\n\nexport default memo(PrivacyPolicyFieldset);\n","import { FieldProps } from 'formik';\nimport React, { memo, Fragment, FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../locale';\nimport { Input, Label } from '../ui/form';\n\nexport type SubscribeFieldProps = FieldProps<boolean> & {\n    requiresMarketingConsent: boolean;\n};\n\nconst SubscribeField: FunctionComponent<SubscribeFieldProps> = ({ field, requiresMarketingConsent }) => (\n    <Fragment>\n        <Input\n            { ...field }\n            checked={ field.value }\n            className=\"form-checkbox\"\n            id={ field.name }\n            type=\"checkbox\"\n        />\n\n        <Label htmlFor={ field.name }>\n            <TranslatedString id={ requiresMarketingConsent ?\n                'customer.guest_marketing_consent' :\n                'customer.guest_subscribe_to_newsletter_text' }\n            />\n        </Label>\n    </Fragment>\n);\n\nexport default memo(SubscribeField);\n","import { withFormik, FieldProps, FormikProps } from 'formik';\nimport React, { memo, useCallback, FunctionComponent, ReactNode } from 'react';\nimport { object, string } from 'yup';\n\nimport { withLanguage, TranslatedHtml, TranslatedString, WithLanguageProps } from '../locale';\nimport { getPrivacyPolicyValidationSchema, PrivacyPolicyField } from '../privacyPolicy';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { BasicFormField, Fieldset, Form, Legend  } from '../ui/form';\n\nimport EmailField from './EmailField';\nimport SubscribeField from './SubscribeField';\n\nexport interface GuestFormProps {\n    canSubscribe: boolean;\n    checkoutButtons?: ReactNode;\n    continueAsGuestButtonLabelId: string;\n    requiresMarketingConsent: boolean;\n    defaultShouldSubscribe: boolean;\n    email?: string;\n    isLoading: boolean;\n    privacyPolicyUrl?: string;\n    onChangeEmail(email: string): void;\n    onContinueAsGuest(data: GuestFormValues): void;\n    onShowLogin(): void;\n}\n\nexport interface GuestFormValues {\n    email: string;\n    shouldSubscribe: boolean;\n}\n\nconst GuestForm: FunctionComponent<GuestFormProps & WithLanguageProps & FormikProps<GuestFormValues>> = ({\n    canSubscribe,\n    checkoutButtons,\n    continueAsGuestButtonLabelId,\n    isLoading,\n    onChangeEmail,\n    onShowLogin,\n    privacyPolicyUrl,\n    requiresMarketingConsent,\n}) => {\n    const renderField = useCallback((fieldProps: FieldProps<boolean>) => (\n        <SubscribeField\n            { ...fieldProps }\n            requiresMarketingConsent={ requiresMarketingConsent }\n        />\n    ), [\n        requiresMarketingConsent,\n    ]);\n\n    return (\n        <Form\n            className=\"checkout-form\"\n            id=\"checkout-customer-guest\"\n            testId=\"checkout-customer-guest\"\n        >\n            <Fieldset\n                legend={\n                    <Legend hidden>\n                        <TranslatedString id=\"customer.guest_customer_text\" />\n                    </Legend>\n                }\n            >\n                <p>\n                    <TranslatedHtml id=\"customer.checkout_as_guest_text\" />\n                </p>\n\n                <div className=\"customerEmail-container\">\n                    <div className=\"customerEmail-body\">\n                        <EmailField onChange={ onChangeEmail } />\n\n                        { (canSubscribe || requiresMarketingConsent) && <BasicFormField\n                            name=\"shouldSubscribe\"\n                            render={ renderField }\n                        /> }\n\n                        { privacyPolicyUrl && <PrivacyPolicyField\n                            url={ privacyPolicyUrl }\n                        /> }\n                    </div>\n\n                    <div className=\"form-actions customerEmail-action\">\n                        <Button\n                            className=\"customerEmail-button\"\n                            id=\"checkout-customer-continue\"\n                            isLoading={ isLoading }\n                            testId=\"customer-continue-as-guest-button\"\n                            type=\"submit\"\n                            variant={ ButtonVariant.Primary }\n                        >\n                            <TranslatedString id={ continueAsGuestButtonLabelId } />\n                        </Button>\n                    </div>\n                </div>\n\n                {\n                    !isLoading && <p>\n                        <TranslatedString id=\"customer.login_text\" />\n                        { ' ' }\n                        <a\n                            data-test=\"customer-continue-button\"\n                            id=\"checkout-customer-login\"\n                            onClick={ onShowLogin }\n                        >\n                            <TranslatedString id=\"customer.login_action\" />\n                        </a>\n                    </p>\n                }\n\n                { checkoutButtons }\n            </Fieldset>\n        </Form>\n    );\n};\n\nexport default withLanguage(withFormik<GuestFormProps & WithLanguageProps, GuestFormValues>({\n    mapPropsToValues: ({\n        email = '',\n        defaultShouldSubscribe = false,\n        requiresMarketingConsent,\n    }) => ({\n        email,\n        shouldSubscribe: requiresMarketingConsent ? false : defaultShouldSubscribe,\n        privacyPolicy: false,\n    }),\n    handleSubmit: (values, { props: { onContinueAsGuest } }) => {\n        onContinueAsGuest(values);\n    },\n    validationSchema: ({ language, privacyPolicyUrl }: GuestFormProps & WithLanguageProps) => {\n        const email = string()\n            .email(language.translate('customer.email_invalid_error'))\n            .max(256)\n            .required(language.translate('customer.email_required_error'));\n\n        const baseSchema = object({ email });\n\n        if (privacyPolicyUrl) {\n            return baseSchema.concat(getPrivacyPolicyValidationSchema({\n                isRequired: !!privacyPolicyUrl,\n                language,\n            }));\n        }\n\n        return baseSchema;\n    },\n})(memo(GuestForm)));\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport { boolean, object, BooleanSchema, ObjectSchema } from 'yup';\n\nexport interface PrivacyPolicyValidatonSchemaProps {\n    isRequired: boolean;\n    language: LanguageService;\n}\n\nexport default function getPrivacyPolicyValidationSchema({\n    isRequired,\n    language,\n}: PrivacyPolicyValidatonSchemaProps): ObjectSchema<{ privacyPolicy?: boolean }> {\n    const schemaFields: {\n        privacyPolicy?: BooleanSchema;\n    } = {};\n\n    if (isRequired) {\n        schemaFields.privacyPolicy = boolean()\n            .oneOf([true], language.translate('privacy_policy.required_error'));\n    }\n\n    return object(schemaFields);\n}\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconEye: FunctionComponent = () => (\n    <svg\n        viewBox=\"0 0 576 512\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n    >\n        <path d=\"M288 144a110.94 110.94 0 0 0-31.24 5 55.4 55.4 0 0 1 7.24 27 56 56 0 0 1-56 56 55.4 55.4 0 0 1-27-7.24A111.71 111.71 0 1 0 288 144zm284.52 97.4C518.29 135.59 410.93 64 288 64S57.68 135.64 3.48 241.41a32.35 32.35 0 0 0 0 29.19C57.71 376.41 165.07 448 288 448s230.32-71.64 284.52-177.41a32.35 32.35 0 0 0 0-29.19zM288 400c-98.65 0-189.09-55-237.93-144C98.91 167 189.34 112 288 112s189.09 55 237.93 144C477.1 345 386.66 400 288 400z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconEye);\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconEyeSlash: FunctionComponent = () => (\n    <svg\n        viewBox=\"0 0 640 512\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n    >\n        <path d=\"M634 471L36 3.51A16 16 0 0 0 13.51 6l-10 12.49A16 16 0 0 0 6 41l598 467.49a16 16 0 0 0 22.49-2.49l10-12.49A16 16 0 0 0 634 471zM296.79 146.47l134.79 105.38C429.36 191.91 380.48 144 320 144a112.26 112.26 0 0 0-23.21 2.47zm46.42 219.07L208.42 260.16C210.65 320.09 259.53 368 320 368a113 113 0 0 0 23.21-2.46zM320 112c98.65 0 189.09 55 237.93 144a285.53 285.53 0 0 1-44 60.2l37.74 29.5a333.7 333.7 0 0 0 52.9-75.11 32.35 32.35 0 0 0 0-29.19C550.29 135.59 442.93 64 320 64c-36.7 0-71.71 7-104.63 18.81l46.41 36.29c18.94-4.3 38.34-7.1 58.22-7.1zm0 288c-98.65 0-189.08-55-237.93-144a285.47 285.47 0 0 1 44.05-60.19l-37.74-29.5a333.6 333.6 0 0 0-52.89 75.1 32.35 32.35 0 0 0 0 29.19C89.72 376.41 197.08 448 320 448c36.7 0 71.71-7.05 104.63-18.81l-46.41-36.28C359.28 397.2 339.89 400 320 400z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconEyeSlash);\n","import { FieldProps } from 'formik';\nimport React, { memo, useCallback, useMemo, FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../locale';\nimport { FormField, TextInput } from '../ui/form';\nimport { IconEye, IconEyeSlash } from '../ui/icon';\nimport { Toggle } from '../ui/toggle';\n\nexport interface PasswordFieldProps {\n    forgotPasswordUrl?: string;\n}\n\nconst PasswordField: FunctionComponent<PasswordFieldProps> = ({\n    forgotPasswordUrl,\n}) => {\n    const renderInput = useCallback((props: FieldProps) => (\n        <Toggle openByDefault={ false }>\n            { ({ isOpen, toggle }) => (\n                <div className=\"form-field-password\">\n                    <TextInput\n                        { ...props.field }\n                        additionalClassName=\"form-input--withIcon\"\n                        id={ props.field.name }\n                        type={ isOpen ? 'text' : 'password' }\n                    />\n                    <a className=\"form-toggle-password form-input-icon\" href=\"#\" onClick={ toggle }>\n                        { isOpen ? <IconEye /> : <IconEyeSlash /> }\n                    </a>\n                </div>\n            ) }\n        </Toggle>\n    ), []);\n\n    const labelContent = useMemo(() => (\n        <TranslatedString id={ 'customer.password_label' } />\n    ), []);\n\n    const footer = useMemo(() => {\n        if (!forgotPasswordUrl) {\n            return null;\n        }\n\n        return <a\n            data-test=\"forgot-password-link\"\n            href={ forgotPasswordUrl }\n            rel=\"noopener noreferrer\"\n            target=\"_blank\"\n        >\n            <TranslatedString id=\"customer.forgot_password_action\" />\n        </a>;\n    }, [forgotPasswordUrl]);\n\n    return <FormField\n        footer={ footer }\n        input={ renderInput }\n        labelContent={ labelContent }\n        name=\"password\"\n    />;\n};\n\nexport default memo(PasswordField);\n","import { withFormik, FormikProps } from 'formik';\nimport { noop } from 'lodash';\nimport React, { memo, useCallback, FunctionComponent } from 'react';\nimport { object, string } from 'yup';\n\nimport { preventDefault } from '../common/dom';\nimport { withLanguage, TranslatedHtml, TranslatedLink, TranslatedString, WithLanguageProps } from '../locale';\nimport { Alert, AlertType } from '../ui/alert';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Fieldset, Form, Legend } from '../ui/form';\n\nimport getEmailValidationSchema from './getEmailValidationSchema';\nimport mapErrorMessage from './mapErrorMessage';\nimport CustomerViewType from './CustomerViewType';\nimport EmailField from './EmailField';\nimport PasswordField from './PasswordField';\n\nexport interface LoginFormProps {\n    canCancel?: boolean;\n    continueAsGuestButtonLabelId: string;\n    email?: string;\n    forgotPasswordUrl: string;\n    isSignInEmailEnabled?: boolean;\n    isSendingSignInEmail?: boolean;\n    isSigningIn?: boolean;\n    signInError?: Error;\n    signInEmailError?: Error;\n    viewType?: Omit<CustomerViewType, 'guest'>;\n    passwordlessLogin?: boolean;\n    shouldShowCreateAccountLink?: boolean;\n    onCancel?(): void;\n    onCreateAccount?(): void;\n    onChangeEmail?(email: string): void;\n    onSignIn(data: LoginFormValues): void;\n    onSendLoginEmail?(): void;\n    onContinueAsGuest?(): void;\n}\n\nexport interface LoginFormValues {\n    email: string;\n    password: string;\n}\n\nconst LoginForm: FunctionComponent<LoginFormProps & WithLanguageProps & FormikProps<LoginFormValues>> = ({\n    canCancel,\n    continueAsGuestButtonLabelId,\n    forgotPasswordUrl,\n    email,\n    isSignInEmailEnabled,\n    isSigningIn,\n    language,\n    onCancel = noop,\n    onChangeEmail,\n    onContinueAsGuest,\n    onCreateAccount = noop,\n    onSendLoginEmail = noop,\n    signInError,\n    shouldShowCreateAccountLink,\n    viewType = CustomerViewType.Login,\n}) => {\n    const changeEmailLink = useCallback(() => {\n        if (!email) {\n            return null;\n        }\n\n        return (\n            <p className=\"optimizedCheckout-contentSecondary\">\n                <TranslatedLink\n                    data={ { email } }\n                    id=\"customer.guest_could_login_change_email\"\n                    onClick={ onCancel }\n                    testId=\"change-email\"\n                />\n            </p>\n        );\n    }, [email, onCancel]);\n\n    return (\n        <Form\n            className=\"checkout-form\"\n            id=\"checkout-customer-returning\"\n            testId=\"checkout-customer-returning\"\n        >\n            <Fieldset legend={\n                <Legend hidden>\n                    <TranslatedString id=\"customer.returning_customer_text\" />\n                </Legend>\n            }\n            >\n                { signInError && <Alert\n                    testId=\"customer-login-error-message\"\n                    type={ AlertType.Error }\n                >\n                    { mapErrorMessage(signInError, key => language.translate(key)) }\n                </Alert> }\n\n                { viewType === CustomerViewType.SuggestedLogin &&\n                    <Alert type={ AlertType.Info }>\n                        <TranslatedHtml\n                            data={ { email } }\n                            id=\"customer.guest_could_login\"\n                        />\n                    </Alert> }\n\n                { viewType === CustomerViewType.Login && shouldShowCreateAccountLink && <p>\n                    <TranslatedLink\n                        id=\"customer.create_account_to_continue_text\"\n                        onClick={ onCreateAccount }\n                    />\n                </p> }\n\n                { viewType === CustomerViewType.CancellableEnforcedLogin &&\n                    <Alert type={ AlertType.Info }>\n                        <TranslatedHtml\n                            data={ { email } }\n                            id=\"customer.guest_must_login\"\n                        />\n                    </Alert> }\n\n                { viewType === CustomerViewType.EnforcedLogin &&\n                    <Alert type={ AlertType.Error }>\n                        <TranslatedLink\n                            id=\"customer.guest_temporary_disabled\"\n                            onClick={ onCreateAccount }\n                        />\n                    </Alert> }\n\n                { (viewType === CustomerViewType.Login || viewType === CustomerViewType.EnforcedLogin) &&\n                    <EmailField onChange={ onChangeEmail } /> }\n\n                <PasswordField forgotPasswordUrl={ isSignInEmailEnabled ? undefined : forgotPasswordUrl } />\n\n                { isSignInEmailEnabled && <p>\n                    <TranslatedLink\n                        id=\"login_email.link\"\n                        onClick={ onSendLoginEmail }\n                        testId=\"customer-signin-link\"\n                    />\n                </p> }\n\n                <div className=\"form-actions\">\n                    <Button\n                        disabled={ isSigningIn }\n                        id=\"checkout-customer-continue\"\n                        testId=\"customer-continue-button\"\n                        type=\"submit\"\n                        variant={ ButtonVariant.Primary }\n                    >\n                        <TranslatedString id=\"customer.sign_in_action\" />\n                    </Button>\n\n                    { viewType === CustomerViewType.SuggestedLogin && <a\n                        className=\"button optimizedCheckout-buttonSecondary\"\n                        data-test=\"customer-guest-continue\"\n                        href=\"#\"\n                        id=\"checkout-guest-continue\"\n                        onClick={ preventDefault(onContinueAsGuest) }\n                    >\n                        <TranslatedString id={ continueAsGuestButtonLabelId } />\n                    </a> }\n\n                    { canCancel &&\n                        viewType !== CustomerViewType.EnforcedLogin &&\n                        viewType !== CustomerViewType.SuggestedLogin &&\n                        <a\n                            className=\"button optimizedCheckout-buttonSecondary\"\n                            data-test=\"customer-cancel-button\"\n                            href=\"#\"\n                            id=\"checkout-customer-cancel\"\n                            onClick={ preventDefault(onCancel) }\n                        >\n                            <TranslatedString id={ viewType === CustomerViewType.CancellableEnforcedLogin ?\n                                'login_email.use_another_email' :\n                                'common.cancel_action' }\n                            />\n                        </a> }\n                </div>\n\n                { viewType === CustomerViewType.SuggestedLogin && changeEmailLink() }\n            </Fieldset>\n        </Form>);\n};\n\nexport default withLanguage(withFormik<LoginFormProps & WithLanguageProps, LoginFormValues>({\n    mapPropsToValues: ({\n        email = '',\n    }) => ({\n        email,\n        password: '',\n    }),\n    handleSubmit: (values, { props: { onSignIn } }) => {\n        onSignIn(values);\n    },\n    validationSchema: ({ language }: LoginFormProps & WithLanguageProps) =>\n        getEmailValidationSchema({ language }).concat(object({\n            password: string()\n                .required(language.translate('customer.password_required_error')),\n        })),\n})(memo(LoginForm)));\n","export default function mapErrorMessage(\n    error: any, // TODO: Export `RequestError`\n    translate: (key: string) => string\n): string {\n    const type = error.body && error.body.type;\n\n    switch (type) {\n    case 'throttled_login':\n        return translate('customer.sign_in_throttled_error');\n\n    case 'reset_password_before_login':\n        return translate('customer.reset_password_before_login_error');\n\n    default:\n        return translate('customer.sign_in_error');\n    }\n}\n","import { CheckoutSelectors, CustomerAccountRequestBody, CustomerCredentials, CustomerInitializeOptions, CustomerRequestOptions, ExecutePaymentMethodCheckoutOptions, FormField, GuestCredentials, SignInEmail, StoreConfig } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\n\nimport { withCheckout, CheckoutContextProps } from '../checkout';\nimport { LoadingOverlay } from '../ui/loading';\n\nimport { CreateAccountFormValues } from './getCreateCustomerValidationSchema';\nimport mapCreateAccountFromFormValues from './mapCreateAccountFromFormValues';\nimport CheckoutButtonList from './CheckoutButtonList';\nimport CreateAccountForm from './CreateAccountForm';\nimport CustomerViewType from './CustomerViewType';\nimport EmailLoginForm, { EmailLoginFormValues } from './EmailLoginForm';\nimport GuestForm, { GuestFormValues } from './GuestForm';\nimport LoginForm from './LoginForm';\n\nexport interface CustomerProps {\n    viewType: CustomerViewType;\n    isEmbedded?: boolean;\n    checkEmbeddedSupport?(methodIds: string[]): void;\n    onChangeViewType?(viewType: CustomerViewType): void;\n    onAccountCreated?(): void;\n    onContinueAsGuest?(): void;\n    onContinueAsGuestError?(error: Error): void;\n    onReady?(): void;\n    onSignIn?(): void;\n    onSignInError?(error: Error): void;\n    onUnhandledError?(error: Error): void;\n}\n\nexport interface WithCheckoutCustomerProps {\n    canSubscribe: boolean;\n    customerAccountFields: FormField[];\n    checkoutButtonIds: string[];\n    defaultShouldSubscribe: boolean;\n    email?: string;\n    firstName?: string;\n    forgotPasswordUrl: string;\n    isContinuingAsGuest: boolean;\n    isCreatingAccount: boolean;\n    isExecutingPaymentMethodCheckout: boolean;\n    isGuestEnabled: boolean;\n    isInitializing: boolean;\n    isSendingSignInEmail: boolean;\n    isSignInEmailEnabled: boolean;\n    isSigningIn: boolean;\n    privacyPolicyUrl?: string;\n    providerWithCustomCheckout?: string;\n    requiresMarketingConsent: boolean;\n    signInEmail?: SignInEmail;\n    signInEmailError?: Error;\n    isAccountCreationEnabled: boolean;\n    createAccountError?: Error;\n    signInError?: Error;\n    clearError(error: Error): Promise<CheckoutSelectors>;\n    continueAsGuest(credentials: GuestCredentials): Promise<CheckoutSelectors>;\n    deinitializeCustomer(options: CustomerRequestOptions): Promise<CheckoutSelectors>;\n    executePaymentMethodCheckout(options: ExecutePaymentMethodCheckoutOptions): Promise<CheckoutSelectors>;\n    initializeCustomer(options: CustomerInitializeOptions): Promise<CheckoutSelectors>;\n    sendLoginEmail(params: { email: string }): Promise<CheckoutSelectors>;\n    signIn(credentials: CustomerCredentials): Promise<CheckoutSelectors>;\n    createAccount(values: CustomerAccountRequestBody): Promise<CheckoutSelectors>;\n}\n\nexport interface CustomerState {\n    isEmailLoginFormOpen: boolean;\n    isReady: boolean;\n    hasRequestedLoginEmail: boolean;\n}\n\nclass Customer extends Component<CustomerProps & WithCheckoutCustomerProps, CustomerState> {\n    state: CustomerState = {\n        isEmailLoginFormOpen: false,\n        isReady: false,\n        hasRequestedLoginEmail: false,\n    };\n\n    private draftEmail?: string;\n\n    async componentDidMount(): Promise<void> {\n        const {\n            initializeCustomer,\n            email,\n            onReady = noop,\n            onUnhandledError = noop,\n            providerWithCustomCheckout,\n        } = this.props;\n\n        this.draftEmail = email;\n\n        try {\n            await initializeCustomer({ methodId: providerWithCustomCheckout });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n\n        this.setState({ isReady: true });\n\n        onReady();\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const {\n            deinitializeCustomer = noop,\n            providerWithCustomCheckout,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await deinitializeCustomer({ methodId: providerWithCustomCheckout });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n        const { viewType } = this.props;\n        const { isEmailLoginFormOpen, isReady } = this.state;\n        const shouldRenderGuestForm = viewType === CustomerViewType.Guest;\n        const shouldRenderCreateAccountForm = viewType === CustomerViewType.CreateAccount;\n        const shouldRenderLoginForm = !shouldRenderGuestForm && !shouldRenderCreateAccountForm;\n\n        return (\n            <LoadingOverlay\n                isLoading={ !isReady }\n                unmountContentWhenLoading\n            >\n                { isEmailLoginFormOpen && this.renderEmailLoginLinkForm() }\n                { shouldRenderLoginForm && this.renderLoginForm() }\n                { shouldRenderGuestForm && this.renderGuestForm() }\n                { shouldRenderCreateAccountForm && this.renderCreateAccountForm() }\n            </LoadingOverlay>\n        );\n    }\n\n    private renderGuestForm(): ReactNode {\n        const {\n            canSubscribe,\n            checkEmbeddedSupport,\n            checkoutButtonIds,\n            defaultShouldSubscribe,\n            deinitializeCustomer,\n            email,\n            initializeCustomer,\n            isContinuingAsGuest = false,\n            isExecutingPaymentMethodCheckout = false,\n            isInitializing = false,\n            privacyPolicyUrl,\n            providerWithCustomCheckout,\n            requiresMarketingConsent,\n            onUnhandledError = noop,\n        } = this.props;\n\n        return (\n            <GuestForm\n                canSubscribe={ canSubscribe }\n                checkoutButtons={\n                    <CheckoutButtonList\n                        checkEmbeddedSupport={ checkEmbeddedSupport }\n                        deinitialize={ deinitializeCustomer }\n                        initialize={ initializeCustomer }\n                        isInitializing={ isInitializing }\n                        methodIds={ checkoutButtonIds }\n                        onError={ onUnhandledError }\n                    />\n                }\n                continueAsGuestButtonLabelId={ !!providerWithCustomCheckout ? 'customer.continue' : 'customer.continue_as_guest_action' }\n                defaultShouldSubscribe={ defaultShouldSubscribe }\n                email={ this.draftEmail || email }\n                isLoading={ isContinuingAsGuest || isInitializing || isExecutingPaymentMethodCheckout }\n                onChangeEmail={ this.handleChangeEmail }\n                onContinueAsGuest={ this.handleContinueAsGuest }\n                onShowLogin={ this.handleShowLogin }\n                privacyPolicyUrl={ privacyPolicyUrl }\n                requiresMarketingConsent={ requiresMarketingConsent }\n            />\n        );\n    }\n\n    private renderEmailLoginLinkForm(): ReactNode {\n        const {\n            isEmailLoginFormOpen,\n            hasRequestedLoginEmail,\n        } = this.state;\n\n        const {\n            isSendingSignInEmail,\n            signInEmailError,\n            signInEmail,\n        } = this.props;\n\n        return (\n            <EmailLoginForm\n                email={ this.draftEmail }\n                emailHasBeenRequested={ hasRequestedLoginEmail }\n                isOpen={ isEmailLoginFormOpen }\n                isSendingEmail={ isSendingSignInEmail }\n                onRequestClose={ this.closeEmailLoginFormForm }\n                onSendLoginEmail={ this.handleSendLoginEmail }\n                sentEmail={ signInEmail }\n                sentEmailError={ signInEmailError }\n            />\n        );\n    }\n\n    private closeEmailLoginFormForm: () => void = () => {\n        this.setState({\n            isEmailLoginFormOpen: false,\n            hasRequestedLoginEmail: false,\n        });\n    };\n\n    private renderCreateAccountForm(): ReactNode {\n        const {\n            customerAccountFields,\n            isCreatingAccount,\n            createAccountError,\n            requiresMarketingConsent,\n        } = this.props;\n\n        return (\n            <CreateAccountForm\n                createAccountError={ createAccountError }\n                formFields={ customerAccountFields }\n                isCreatingAccount={ isCreatingAccount }\n                onCancel={ this.handleCancelCreateAccount }\n                onSubmit={ this.handleCreateAccount }\n                requiresMarketingConsent={ requiresMarketingConsent }\n            />\n        );\n    }\n\n    private renderLoginForm(): ReactNode {\n        const {\n            isEmbedded,\n            email,\n            forgotPasswordUrl,\n            isSignInEmailEnabled,\n            isGuestEnabled,\n            isSendingSignInEmail,\n            isSigningIn,\n            isAccountCreationEnabled,\n            providerWithCustomCheckout,\n            signInError,\n            viewType,\n        } = this.props;\n\n        return (\n            <LoginForm\n                canCancel={ isGuestEnabled }\n                continueAsGuestButtonLabelId={ !!providerWithCustomCheckout ? 'customer.continue' : 'customer.continue_as_guest_action' }\n                email={ this.draftEmail || email }\n                forgotPasswordUrl={ forgotPasswordUrl }\n                isSendingSignInEmail={ isSendingSignInEmail }\n                isSignInEmailEnabled={ isSignInEmailEnabled && !isEmbedded }\n                isSigningIn={ isSigningIn }\n                onCancel={ this.handleCancelSignIn }\n                onChangeEmail={ this.handleChangeEmail }\n                onContinueAsGuest={ this.executePaymentMethodCheckoutOrContinue }\n                onCreateAccount={ this.showCreateAccount }\n                onSendLoginEmail={ this.handleEmailLoginClicked }\n                onSignIn={ this.handleSignIn }\n                shouldShowCreateAccountLink={ isAccountCreationEnabled }\n                signInError={ signInError }\n                viewType={ viewType }\n            />\n        );\n    }\n\n    private handleEmailLoginClicked: () => void = async () => {\n        const { viewType } = this.props;\n\n        try {\n            if (viewType !== CustomerViewType.Login && this.draftEmail) {\n                await this.handleSendLoginEmail({ email: this.draftEmail });\n            }\n        } finally {\n            this.setState({\n                isEmailLoginFormOpen: true,\n            });\n        }\n    };\n\n    private handleSendLoginEmail: (values: EmailLoginFormValues) => Promise<void> = async values => {\n        const {\n            sendLoginEmail,\n        } = this.props;\n\n        try {\n            await sendLoginEmail(values);\n        } finally {\n            this.setState({\n                hasRequestedLoginEmail: true,\n            });\n        }\n    };\n\n    private handleContinueAsGuest: (formValues: GuestFormValues) => Promise<void> = async formValues => {\n        const {\n            canSubscribe,\n            continueAsGuest,\n            onChangeViewType = noop,\n            onContinueAsGuest = noop,\n            onContinueAsGuestError = noop,\n        } = this.props;\n\n        const email = formValues.email.trim();\n        try {\n            const { data } = await continueAsGuest({\n                email,\n                acceptsMarketingNewsletter: canSubscribe && formValues.shouldSubscribe ? true : undefined,\n                acceptsAbandonedCartEmails: formValues.shouldSubscribe ? true : undefined,\n            });\n\n            const customer = data.getCustomer();\n\n            if (customer && customer.shouldEncourageSignIn && customer.isGuest) {\n               return onChangeViewType(CustomerViewType.SuggestedLogin);\n            }\n\n            await this.executePaymentMethodCheckoutOrContinue();\n\n            this.draftEmail = undefined;\n        } catch (error) {\n            if (error.type === 'update_subscriptions' || error.type === 'payment_method_client_invalid') {\n                this.draftEmail = undefined;\n\n                onContinueAsGuest();\n            }\n\n            if (error.status === 429) {\n                return onChangeViewType(CustomerViewType.EnforcedLogin);\n            }\n\n            if (error.status === 403) {\n                return onChangeViewType(CustomerViewType.CancellableEnforcedLogin);\n            }\n\n            onContinueAsGuestError(error);\n        }\n    };\n\n    private handleSignIn: (credentials: CustomerCredentials) => Promise<void> = async credentials => {\n        const {\n            signIn,\n            onSignIn = noop,\n            onSignInError = noop,\n        } = this.props;\n\n        try {\n            await signIn(credentials);\n            onSignIn();\n\n            this.draftEmail = undefined;\n        } catch (error) {\n            onSignInError(error);\n        }\n    };\n\n    private handleCreateAccount: (values: CreateAccountFormValues) => void = async values => {\n        const {\n            createAccount = noop,\n            onAccountCreated = noop,\n        } = this.props;\n\n        await createAccount(mapCreateAccountFromFormValues(values));\n\n        onAccountCreated();\n    };\n\n    private showCreateAccount: () => void = () => {\n        const {\n            onChangeViewType = noop,\n        } = this.props;\n\n        onChangeViewType(CustomerViewType.CreateAccount);\n    };\n\n    private handleCancelCreateAccount: () => void = () => {\n        const {\n            clearError,\n            onChangeViewType = noop,\n            createAccountError,\n        } = this.props;\n\n        if (createAccountError) {\n            clearError(createAccountError);\n        }\n\n        onChangeViewType(CustomerViewType.Login);\n    };\n\n    private handleCancelSignIn: () => void = () => {\n        const {\n            clearError,\n            onChangeViewType = noop,\n            signInError,\n        } = this.props;\n\n        if (signInError) {\n            clearError(signInError);\n        }\n\n        onChangeViewType(CustomerViewType.Guest);\n    };\n\n    private handleChangeEmail: (email: string) => void = email => {\n        this.draftEmail = email;\n    };\n\n    private handleShowLogin: () => void = () => {\n        const { onChangeViewType = noop } = this.props;\n\n        onChangeViewType(CustomerViewType.Login);\n    };\n\n    private executePaymentMethodCheckoutOrContinue: () => void = async () => {\n        const {\n            executePaymentMethodCheckout,\n            onContinueAsGuest = noop,\n            providerWithCustomCheckout,\n        } = this.props;\n\n        if (providerWithCustomCheckout) {\n            await executePaymentMethodCheckout({ methodId: providerWithCustomCheckout, continueWithCheckoutCallback: onContinueAsGuest });\n        } else {\n            onContinueAsGuest();\n        }\n    };\n}\n\nexport function mapToWithCheckoutCustomerProps(\n    { checkoutService, checkoutState }: CheckoutContextProps\n): WithCheckoutCustomerProps | null {\n    const {\n        data: { getBillingAddress, getCustomerAccountFields, getCheckout, getCustomer, getSignInEmail, getConfig },\n        errors: { getSignInError, getSignInEmailError, getCreateCustomerAccountError },\n        statuses: { isContinuingAsGuest, isExecutingPaymentMethodCheckout, isInitializingCustomer, isSigningIn, isSendingSignInEmail, isCreatingCustomerAccount },\n    } = checkoutState;\n\n    const billingAddress = getBillingAddress();\n    const checkout = getCheckout();\n    const customer = getCustomer();\n    const signInEmail = getSignInEmail();\n    const config = getConfig();\n\n    if (!checkout || !config) {\n        return null;\n    }\n\n    const {\n        checkoutSettings: {\n            privacyPolicyUrl,\n            requiresMarketingConsent,\n            isSignInEmailEnabled,\n            isAccountCreationEnabled,\n        },\n    } = config as StoreConfig & { checkoutSettings: { isAccountCreationEnabled: boolean } };\n\n    return {\n        customerAccountFields: getCustomerAccountFields(),\n        canSubscribe: config.shopperConfig.showNewsletterSignup,\n        checkoutButtonIds: config.checkoutSettings.remoteCheckoutProviders,\n        clearError: checkoutService.clearError,\n        createAccount: checkoutService.createCustomerAccount,\n        continueAsGuest: checkoutService.continueAsGuest,\n        sendLoginEmail: checkoutService.sendSignInEmail,\n        defaultShouldSubscribe: config.shopperConfig.defaultNewsletterSignup,\n        deinitializeCustomer: checkoutService.deinitializeCustomer,\n        executePaymentMethodCheckout: checkoutService.executePaymentMethodCheckout,\n        email: billingAddress?.email || customer?.email,\n        firstName: customer?.firstName,\n        forgotPasswordUrl: config.links.forgotPasswordLink,\n        initializeCustomer: checkoutService.initializeCustomer,\n        isCreatingAccount: isCreatingCustomerAccount(),\n        createAccountError: getCreateCustomerAccountError(),\n        isContinuingAsGuest: isContinuingAsGuest(),\n        isExecutingPaymentMethodCheckout: isExecutingPaymentMethodCheckout(),\n        isInitializing:  isInitializingCustomer(),\n        isSignInEmailEnabled,\n        isAccountCreationEnabled,\n        isGuestEnabled: config.checkoutSettings.guestCheckoutEnabled,\n        isSigningIn: isSigningIn(),\n        isSendingSignInEmail: isSendingSignInEmail(),\n        signInEmail,\n        signInEmailError: getSignInEmailError(),\n        privacyPolicyUrl,\n        providerWithCustomCheckout: config.checkoutSettings.providerWithCustomCheckout || undefined,\n        requiresMarketingConsent,\n        signIn: checkoutService.signInCustomer,\n        signInError: getSignInError(),\n    };\n}\n\nexport default withCheckout(mapToWithCheckoutCustomerProps)(Customer);\n"],"sourceRoot":""}